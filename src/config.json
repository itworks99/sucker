{"sections": [0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37],"entry": ["workers", "cpu_affinity_map", "auth_param", "authenticate_cache_garbage_interval", "authenticate_ttl", "authenticate_ip_ttl", "external_acl_type", "acl", "proxy_protocol_access", "follow_x_forwarded_for", "acl_uses_indirect_client ", "delay_pool_uses_indirect_client ", "log_uses_indirect_client ", "tproxy_uses_indirect_client ", "spoof_client_ip", "http_access", "adapted_http_access", "http_reply_access", "icp_access", "htcp_access", "htcp_clr_access", "miss_access", "ident_lookup_access", "reply_body_max_size size [acl acl...]", "http_port", "https_port", "ftp_port", "tcp_outgoing_tos", "clientside_tos", "tcp_outgoing_mark", "clientside_mark", "qos_flows", "tcp_outgoing_address", "host_verify_strict", "client_dst_passthru", "ssl_unclean_shutdown", "ssl_engine", "sslproxy_client_certificate", "sslproxy_client_key", "sslproxy_version", "sslproxy_options", "sslproxy_cipher", "sslproxy_cafile", "sslproxy_capath", "sslproxy_session_ttl", "sslproxy_session_cache_size", "sslproxy_cert_sign_hash", "ssl_bump", "sslproxy_flags", "sslproxy_cert_error", "sslproxy_cert_sign", "sslproxy_cert_adapt", "sslpassword_program", "sslcrtd_program", "sslcrtd_children", "sslcrtvalidator_program", "sslcrtvalidator_children", "cache_peer", "cache_peer_domain", "cache_peer_access", "neighbor_type_domain", "dead_peer_timeout (seconds)", "forward_max_tries", "cache_mem (bytes)", "maximum_object_size_in_memory (bytes)", "memory_cache_shared ", "memory_cache_mode", "memory_replacement_policy", "cache_replacement_policy", "minimum_object_size (bytes)", "maximum_object_size (bytes)", "cache_dir", "store_dir_select_algorithm", "max_open_disk_fds", "cache_swap_low (percent, 0-100)", "cache_swap_high (percent, 0-100)", "logformat", "access_log", "icap_log", "logfile_daemon", "stats_collection allow|deny acl acl...", "cache_store_log", "cache_swap_state", "logfile_rotate", "mime_table", "log_mime_hdrs ", "pid_filename", "client_netmask", "strip_query_terms", "buffered_logs ", "netdb_filename", "cache_log", "debug_options", "coredump_dir", "ftp_user", "ftp_passive", "ftp_epsv_all", "ftp_epsv", "ftp_eprt", "ftp_sanitycheck", "ftp_telnet_protocol", "diskd_program", "unlinkd_program", "pinger_program", "pinger_enable", "url_rewrite_program", "url_rewrite_children", "url_rewrite_host_header", "url_rewrite_access", "url_rewrite_bypass", "url_rewrite_extras", "store_id_program", "store_id_extras", "store_id_children", "store_id_access", "store_id_bypass", "cache", "send_hit", "store_miss", "max_stale time-units", "refresh_pattern", "quick_abort_min (KB)", "quick_abort_max (KB)", "quick_abort_pct (percent)", "read_ahead_gap buffer-size", "negative_ttl time-units", "positive_dns_ttl time-units", "negative_dns_ttl time-units", "range_offset_limit size [acl acl...]", "minimum_expiry_time (seconds)", "store_avg_object_size (bytes)", "store_objects_per_bucket", "request_header_max_size (KB)", "reply_header_max_size (KB)", "request_body_max_size (bytes)", "client_request_buffer_max_size (bytes)", "broken_posts", "adaptation_uses_indirect_client ", "via ", "ie_refresh ", "vary_ignore_expire ", "request_entities", "request_header_access", "reply_header_access", "request_header_replace", "reply_header_replace", "request_header_add", "note", "relaxed_header_parser on|off|warn", "collapsed_forwarding (on|off)", "forward_timeout time-units", "connect_timeout time-units", "peer_connect_timeout time-units", "read_timeout time-units", "write_timeout time-units", "request_timeout", "client_idle_pconn_timeout", "ftp_client_idle_timeout", "client_lifetime time-units", "half_closed_clients", "server_idle_pconn_timeout", "ident_timeout", "shutdown_lifetime time-units", "cache_mgr", "mail_from", "mail_program", "cache_effective_user", "cache_effective_group", "httpd_suppress_version_string ", "visible_hostname", "unique_hostname", "hostname_aliases", "umask", "announce_period", "announce_host", "announce_file", "announce_port", "httpd_accel_surrogate_id", "http_accel_surrogate_remote ", "esi_parser libxml2|expat|custom", "delay_pools", "delay_class", "delay_access", "delay_parameters", "delay_initial_bucket_level (percent, 0-100)", "client_delay_pools", "client_delay_initial_bucket_level (percent, 0-no_limit)", "client_delay_parameters", "client_delay_access", "wccp_router", "wccp2_router", "wccp_version", "wccp2_rebuild_wait", "wccp2_forwarding_method", "wccp2_return_method", "wccp2_assignment_method", "wccp2_service", "wccp2_service_info", "wccp2_weight", "wccp_address", "wccp2_address", "client_persistent_connections", "server_persistent_connections", "persistent_connection_after_error", "detect_broken_pconn", "digest_generation", "digest_bits_per_entry", "digest_rebuild_period (seconds)", "digest_rewrite_period (seconds)", "digest_swapout_chunk_size (bytes)", "digest_rebuild_chunk_percentage (percent, 0-100)", "snmp_port", "snmp_access", "snmp_incoming_address", "snmp_outgoing_address", "icp_port", "htcp_port", "log_icp_queries ", "udp_incoming_address", "udp_outgoing_address", "icp_hit_stale ", "minimum_direct_hops", "minimum_direct_rtt (msec)", "netdb_low", "netdb_high", "netdb_ping_period", "query_icmp ", "test_reachability ", "icp_query_timeout (msec)", "maximum_icp_query_timeout (msec)", "minimum_icp_query_timeout (msec)", "background_ping_rate time-units", "mcast_groups", "mcast_miss_addr", "mcast_miss_ttl", "mcast_miss_port", "mcast_miss_encode_key", "mcast_icp_query_timeout (msec)", "icon_directory", "global_internal_static", "short_icon_urls", "error_directory", "error_default_language", "error_log_languages", "err_page_stylesheet", "err_html_text", "email_err_data ", "deny_info", "nonhierarchical_direct", "prefer_direct", "cache_miss_revalidate ", "always_direct", "never_direct", "incoming_udp_average", "incoming_tcp_average", "incoming_dns_average", "min_udp_poll_cnt", "min_dns_poll_cnt", "min_tcp_poll_cnt", "accept_filter", "client_ip_max_connections", "tcp_recv_bufsize (bytes)", "icap_enable ", "icap_connect_timeout", "icap_io_timeout time-units", "icap_service_failure_limit limit [in memory-depth time-units]", "icap_service_revival_delay", "icap_preview_enable ", "icap_preview_size", "icap_206_enable ", "icap_default_options_ttl", "icap_persistent_connections ", "adaptation_send_client_ip ", "adaptation_send_username ", "icap_client_username_header", "icap_client_username_encode ", "icap_service", "icap_class", "icap_access", "ecap_enable ", "ecap_service", "loadable_modules", "adaptation_service_set", "adaptation_service_chain", "adaptation_access", "adaptation_service_iteration_limit", "adaptation_masterx_shared_names", "adaptation_meta", "icap_retry", "icap_retry_limit", "check_hostnames", "allow_underscore", "dns_retransmit_interval", "dns_timeout", "dns_packet_max", "dns_defnames ", "dns_multicast_local ", "dns_nameservers", "hosts_file", "append_domain", "ignore_unknown_nameservers", "dns_v4_first", "ipcache_size (number of entries)", "ipcache_low (percent)", "ipcache_high (percent)", "fqdncache_size (number of entries)", "configuration_includes_quoted_values ", "memory_pools ", "memory_pools_limit (bytes)", "forwarded_for on|off|transparent|truncate|delete", "cachemgr_passwd", "client_db ", "refresh_all_ims ", "reload_into_ims ", "connect_retries", "retry_on_error", "as_whois_server", "offline_mode", "uri_whitespace", "chroot", "balance_on_multiple_ip", "pipeline_prefetch", "high_response_time_warning (msec)", "high_page_fault_warning", "high_memory_warning", "sleep_after_fork (microseconds)", "windows_ipaddrchangemonitor ", "eui_lookup", "max_filedescriptors"],"value": ["workers", "cpu_affinity_map", "auth_param", " authenticate_cache_garbage_interval 1 hour\n", " authenticate_ttl 1 hour\n", " authenticate_ip_ttl 1 second\n", "external_acl_type", "acl CONNECT method CONNECT\nacl Safe_ports port 777\t\t# multiling http\nacl Safe_ports port 591\t\t# filemaker\nacl Safe_ports port 488\t\t# gss-http\nacl Safe_ports port 280\t\t# http-mgmt\nacl Safe_ports port 1025-65535\t# unregistered ports\nacl Safe_ports port 210\t\t# wais\nacl Safe_ports port 70\t\t# gopher\nacl Safe_ports port 443\t\t# https\nacl Safe_ports port 21\t\t# ftp\nacl Safe_ports port 80\t\t# http\nacl SSL_ports port 443\nacl localnet src fe80::/10      # RFC 4291 link-local (directly plugged) machines\nacl localnet src fc00::/7       # RFC 4193 local private network range\nacl localnet src 192.168.0.0/16\t# RFC1918 possible internal network\nacl localnet src 172.16.0.0/12\t# RFC1918 possible internal network\nacl localnet src 10.0.0.0/8\t# RFC1918 possible internal network\n", "proxy_protocol_access", "follow_x_forwarded_for", " acl_uses_indirect_client on\n", " delay_pool_uses_indirect_client on\n", " log_uses_indirect_client on\n", " tproxy_uses_indirect_client off\n", "spoof_client_ip", "http_access deny all\nhttp_access allow localhost\nhttp_access allow localnet\nhttp_access deny to_localhost\nhttp_access deny manager\nhttp_access allow localhost manager\nhttp_access deny CONNECT !SSL_ports\nhttp_access deny !Safe_ports\n", "adapted_http_access", "http_reply_access", "icp_access", "htcp_access", "htcp_clr_access", "miss_access", "ident_lookup_access", "reply_body_max_size size [acl acl...]", "http_port 3128\n", "https_port", "ftp_port", "tcp_outgoing_tos", "clientside_tos", "tcp_outgoing_mark", "clientside_mark", "qos_flows", "tcp_outgoing_address", " host_verify_strict off\n", " client_dst_passthru on\n", " ssl_unclean_shutdown off\n", "ssl_engine", "sslproxy_client_certificate", "sslproxy_client_key", "sslproxy_version", "sslproxy_options", "sslproxy_cipher", "sslproxy_cafile", "sslproxy_capath", " sslproxy_session_ttl 300\n", " sslproxy_session_cache_size 2 MB\n", "sslproxy_cert_sign_hash", "ssl_bump", "sslproxy_flags", "sslproxy_cert_error", "sslproxy_cert_sign", "sslproxy_cert_adapt", "sslpassword_program", " sslcrtd_program /usr/lib/squid/ssl_crtd -s /var/lib/ssl_db -M 4MB\n", " sslcrtd_children 32 startup=5 idle=1\n", "sslcrtvalidator_program", " sslcrtvalidator_children 32 startup=5 idle=1 concurrency=1\n", "cache_peer", "cache_peer_domain", "cache_peer_access", "neighbor_type_domain", "ad_peer_timeout ", " forward_max_tries 25\n", "cache_mem ", "maximum_object_size_in_memory ", "memory_cache_shared ", "memory_cache_mode", " memory_replacement_policy lru\n", " cache_replacement_policy lru\n", "minimum_object_size ", "maximum_object_size ", "cache_dir ufs /var/spool/squid 100 16 256\n", " store_dir_select_algorithm least-load\n", "max_open_disk_fds", "ache_swap_low", "ache_swap_high", "logformat", " access_log daemon:/var/log/squid/access.log squid\n", "icap_log", " logfile_daemon /usr/lib/squid/log_file_daemon\n", "stats_collection allow|deny acl acl...", "cache_store_log", "cache_swap_state", " logfile_rotate 0\n", " mime_table /usr/share/squid/mime.conf\n", " log_mime_hdrs off\n", " pid_filename /var/run/squid.pid\n", "client_netmask", " strip_query_terms on\n", " buffered_logs off\n", " netdb_filename stdio:/var/log/squid/netdb.state\n", " cache_log /var/log/squid/cache.log\n", "debug_options", "coredump_dir /var/spool/squid\n", " ftp_user Squid@\n", " ftp_passive on\n", " ftp_epsv_all off\n", " none\n", " ftp_eprt on\n", " ftp_sanitycheck on\n", " ftp_telnet_protocol on\n", " diskd_program /usr/lib/squid/diskd\n", " unlinkd_program /usr/lib/squid/unlinkd\n", " pinger_program /usr/lib/squid/pinger\n", " pinger_enable on\n", "url_rewrite_program", " url_rewrite_children 20 startup=0 idle=1 concurrency=0\n", " url_rewrite_host_header on\n", "url_rewrite_access", " url_rewrite_bypass off\n", " url_rewrite_extras \"%>a/%>A %un %>rm myip=%la myport=%lp\"\n", "store_id_program", " store_id_extras \"%>a/%>A %un %>rm myip=%la myport=%lp\"\n", " store_id_children 20 startup=0 idle=1 concurrency=0\n", "store_id_access", " store_id_bypass on\n", "cache", "send_hit", "store_miss", "max_stale time-units", "refresh_pattern .\t\t0\t20%\t4320\nrefresh_pattern (\\.deb|\\.udeb)$   129600 100% 129600\nrefresh_pattern (Release|Packages(.gz)*)$      0       20%     2880\nrefresh_pattern -i (/cgi-bin/|\\?) 0\t0%\t0\nrefresh_pattern ^gopher:\t1440\t0%\t1440\nrefresh_pattern ^ftp:\t\t1440\t20%\t10080\n", "quick_abort_min ", "quick_abort_max ", "quick_abort_pct ", "read_ahead_gap buffer-size", "negative_ttl time-units", "positive_dns_ttl time-units", "negative_dns_ttl time-units", "range_offset_limit size [acl acl...]", "minimum_expiry_time ", "ore_avg_object_size ", " store_objects_per_bucket 20\n", "request_header_max_size ", "reply_header_max_size ", "request_body_max_size ", "client_request_buffer_max_size ", "broken_posts", " adaptation_uses_indirect_client on\n", " via on\n", " ie_refresh off\n", " vary_ignore_expire off\n", " request_entities off\n", "request_header_access", "reply_header_access", "request_header_replace", "reply_header_replace", "request_header_add", "note", "relaxed_header_parser on|off|warn", "collapsed_forwarding ", "forward_timeout time-units", "connect_timeout time-units", "peer_connect_timeout time-units", "read_timeout time-units", "write_timeout time-units", " request_timeout 5 minutes\n", " client_idle_pconn_timeout 2 minutes\n", " ftp_client_idle_timeout 30 minutes\n", "client_lifetime time-units", " half_closed_clients off\n", " server_idle_pconn_timeout 1 minute\n", " ident_timeout 10 seconds\n", "shutdown_lifetime time-units", " cache_mgr webmaster\n", "mail_from", " mail_program mail\n", " cache_effective_user proxy\n", "cache_effective_group", " httpd_suppress_version_string off\n", "visible_hostname", "unique_hostname", "hostname_aliases", " umask 027\n", "announce_period", " announce_host tracker.ircache.net\n", "announce_file", " announce_port 3131\n", "httpd_accel_surrogate_id", " http_accel_surrogate_remote off\n", "esi_parser libxml2|expat|custom", " delay_pools 0\n", "delay_class", "delay_access", "delay_parameters", "delay_initial_bucket_level", " client_delay_pools 0\n", "delay_initial_bucket_lev", "client_delay_parameters", "client_delay_access", "wccp_router", "wccp2_router", " wccp_version 4\n", " wccp2_rebuild_wait on\n", " wccp2_forwarding_method gre\n", " wccp2_return_method gre\n", " wccp2_assignment_method hash\n", "wccp2_service", "wccp2_service_info", " wccp2_weight 10000\n", "wccp_address", "wccp2_address", " client_persistent_connections on\n", " server_persistent_connections on\n", " persistent_connection_after_error on\n", " detect_broken_pconn off\n", " digest_generation on\n", " digest_bits_per_entry 5\n", "igest_rebuild_period ", "igest_rewrite_period ", "digest_swapout_chunk_size ", "digest_rebuild_chunk_percentag", "snmp_port", "snmp_access", "snmp_incoming_address", "snmp_outgoing_address", "icp_port", "htcp_port", " log_icp_queries on\n", "udp_incoming_address", "udp_outgoing_address", " icp_hit_stale off\n", " minimum_direct_hops 4\n", "inimum_direct_rtt ", " netdb_low 900\n", " netdb_high 1000\n", " netdb_ping_period 5 minutes\n", " query_icmp off\n", " test_reachability off\n", "icp_query_timeout ", "aximum_icp_query_timeout ", "inimum_icp_query_timeout ", "background_ping_rate time-units", "mcast_groups", "mcast_miss_addr", " mcast_miss_ttl 16\n", " mcast_miss_port 3135\n", " mcast_miss_encode_key XXXXXXXXXXXXXXXX\n", "ast_icp_query_timeout ", " icon_directory /usr/share/squid/icons\n", " global_internal_static on\n", " short_icon_urls on\n", "error_directory", "error_default_language", " error_log_languages on\n", " err_page_stylesheet /etc/squid/errorpage.css\n", "err_html_text", " email_err_data on\n", "deny_info", " nonhierarchical_direct on\n", " prefer_direct off\n", " cache_miss_revalidate on\n", "always_direct", "never_direct", " incoming_udp_average 6\n", " incoming_tcp_average 4\n", " incoming_dns_average 4\n", " min_udp_poll_cnt 8\n", " min_dns_poll_cnt 8\n", " min_tcp_poll_cnt 8\n", "accept_filter", "client_ip_max_connections", "cp_recv_bufsize ", " icap_enable off\n", "icap_connect_timeout", "icap_io_timeout time-units", "icap_service_failure_limit limit [in memory-depth time-units]", " icap_service_revival_delay 180\n", " icap_preview_enable on\n", "icap_preview_size", " icap_206_enable on\n", " icap_default_options_ttl 60\n", " icap_persistent_connections on\n", " adaptation_send_client_ip off\n", " adaptation_send_username off\n", " icap_client_username_header X-Client-Username\n", " icap_client_username_encode off\n", "icap_service", "icap_class", "icap_access", " ecap_enable off\n", "ecap_service", "loadable_modules", "adaptation_service_set", "adaptation_service_chain", "adaptation_access", " adaptation_service_iteration_limit 16\n", "adaptation_masterx_shared_names", "adaptation_meta", " icap_retry deny all\n", "icap_retry_limit", " check_hostnames off\n", " allow_underscore on\n", " dns_retransmit_interval 5 seconds\n", " dns_timeout 30 seconds\n", "dns_packet_max", "dns_defnames ", "dns_multicast_local ", "dns_nameservers", " hosts_file /etc/hosts\n", "append_domain", " ignore_unknown_nameservers on\n", " dns_v4_first off\n", "pcache_siz", "ipcache_low ", "ipcache_high ", "qdncache_siz", " configuration_includes_quoted_values off\n", " memory_pools on\n", "memory_pools_limit ", "forwarded_for on|off|transparent|truncate|delete", "cachemgr_passwd", " client_db on\n", " refresh_all_ims off\n", " reload_into_ims off\n", "connect_retries", " retry_on_error off\n", " as_whois_server whois.ra.net\n", " offline_mode off\n", " uri_whitespace strip\n", "chroot", " balance_on_multiple_ip off\n", "pipeline_prefetch", "high_response_time_warning ", "high_page_fault_warning", "high_memory_warning", "leep_after_fork ", " windows_ipaddrchangemonitor on\n", " eui_lookup on\n", "max_filedescriptors"],"units": ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "seconds", "", "bytes", "bytes", "", "", "", "", "bytes", "bytes", "", "", "", "percent, 0-100", "percent, 0-100", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "KB", "KB", "percent", "", "", "", "", "", "seconds", "bytes", "", "KB", "KB", "bytes", "bytes", "", "", "", "", "", "", "", "", "", "", "", "", "", "on|off", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "percent, 0-100", "", "percent, 0-no_limit", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "seconds", "seconds", "bytes", "percent, 0-100", "", "", "", "", "", "", "", "", "", "", "", "msec", "", "", "", "", "", "msec", "msec", "msec", "", "", "", "", "", "", "msec", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "bytes", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "number of entries", "percent", "percent", "number of entries", "", "", "bytes", "", "", "", "", "", "", "", "", "", "", "", "", "", "msec", "", "", "microseconds", "", "", ""],"isenabled": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],"allsections": ["OPTIONS FOR SMP", "OPTIONS FOR AUTHENTICATION", "ACCESS CONTROLS", "NETWORK OPTIONS", "SSL OPTIONS", "OPTIONS RELATING TO EXTERNAL SSL_CRTD", "OPTIONS WHICH AFFECT THE NEIGHBOR SELECTION ALGORITHM", "MEMORY CACHE OPTIONS", "DISK CACHE OPTIONS", "LOGFILE OPTIONS", "OPTIONS FOR TROUBLESHOOTING", "OPTIONS FOR FTP GATEWAYING", "OPTIONS FOR EXTERNAL SUPPORT PROGRAMS", "OPTIONS FOR URL REWRITING", "OPTIONS FOR STORE ID", "OPTIONS FOR TUNING THE CACHE", "HTTP OPTIONS", "TIMEOUTS", "ADMINISTRATIVE PARAMETERS", "OPTIONS FOR THE CACHE REGISTRATION SERVICE", "HTTPD-ACCELERATOR OPTIONS", "DELAY POOL PARAMETERS", "CLIENT DELAY POOL PARAMETERS", "WCCPv1 AND WCCPv2 CONFIGURATION OPTIONS", "PERSISTENT CONNECTION HANDLING", "CACHE DIGEST OPTIONS", "SNMP OPTIONS", "ICP OPTIONS", "MULTICAST ICP OPTIONS", "INTERNAL ICON OPTIONS", "ERROR PAGE OPTIONS", "OPTIONS INFLUENCING REQUEST FORWARDING", "ADVANCED NETWORKING OPTIONS", "ICAP OPTIONS", "eCAP OPTIONS", "MESSAGE ADAPTATION OPTIONS", "DNS OPTIONS", "MISCELLANEOUS"],"switchable": [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],"switchposition"onlyavailableifrebuiltwith": ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "--with-openssl", "", "", "", "Packet MARK (Linux)", "Packet MARK (Linux)", "", "", "", "", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--with-openssl", "--enable-ssl-crtd", "--enable-ssl-crtd", "--with-openssl", "--with-openssldefine", "-DMULTICAST_MISS_STREAM define", "-DMULTICAST_MISS_STREAM define", "-DMULTICAST_MISS_STREAM define", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "GNU Malloc with mstats()", "", "MS Windows", "", ""],"version": ["3.5.12"],"help": ["   TAG: workers\n Number of main Squid processes or \"workers\" to fork and maintain.\n 0: \"no daemon\" mode, like running \"squid -N ...\"\n 1: \"no SMP\" mode, start one main Squid process daemon (default)\n N: start N main Squid process daemons (i.e., SMP mode)\n \n In SMP mode, each worker does nearly all what a single Squid daemon\n does (e.g., listen on http_port and forward HTTP requests).\n Default:\n  SMP support disabled.\n", "   TAG: cpu_affinity_map\n Usage: cpu_affinity_map process_numbers=P1,P2,... cores=C1,C2,...\n \n Sets 1:1 mapping between Squid processes and CPU cores. For example,\n \n     cpu_affinity_map process_numbers=1,2,3,4 cores=1,3,5,7\n \n affects processes 1 through 4 only and places them on the first\n four even cores, starting with core  1.\n \n CPU cores are numbered starting from 1. Requires support for\n sched_getaffinity(2) and sched_setaffinity(2) system calls.\n \n Multiple cpu_affinity_map options are merged.\n \n See also: workers\n Default:\n  Let operating system decide.\n", "   TAG: auth_param\n This is used to define parameters for the various authentication\n schemes supported by Squid.\n \n format: auth_param scheme parameter [setting]\n \n The order in which authentication schemes are presented to the client is\n dependent on the order the scheme first appears in config file. IE\n has a bug (it's not RFC 2617 compliant) in that it will use the basic\n scheme if basic is the first entry presented, even if more secure\n schemes are presented. For now use the order in the recommended\n settings section below. If other browsers have difficulties (don't\n recognize the schemes offered even if you are using basic) either\n put basic first, or disable the other schemes (by commenting out their\n program entry).\n \n Once an authentication scheme is fully configured, it can only be\n shutdown by shutting squid down and restarting. Changes can be made on\n the fly and activated with a reconfigure. I.E. You can change to a\n different helper, but not unconfigure the helper completely.\n \n Please note that while this directive defines how Squid processes\n authentication it does not automatically activate authentication.\n To use authentication you must in addition make use of ACLs based\n on login name in http_access (proxy_auth, proxy_auth_regex or\n external with %LOGIN used in the format tag). The browser will be\n challenged for authentication on the first such acl encountered\n in http_access processing and will also be re-challenged for new\n login credentials if the request is being denied by a proxy_auth\n type acl.\n \n WARNING: authentication can't be used in a transparently intercepting\n proxy as the client then thinks it is talking to an origin server and\n not the proxy. This is a limitation of bending the TCP/IP protocol to\n transparently intercepting port 80, not a limitation in Squid.\n Ports flagged 'transparent', 'intercept', or 'tproxy' have\n authentication disabled.\n \n === Parameters common to all schemes. ===\n \n \"program\" cmdline\n Specifies the command for the external authenticator.\n \n By default, each authentication scheme is not used unless a\n program is specified.\n \n See http://wiki.squid-cache.org/Features/AddonHelpers for\n more details on helper operations and creating your own.\n \n \"key_extras\" format\n Specifies a string to be append to request line format for\n the authentication helper. \"Quoted\" format values may contain\n spaces and logformat %macros. In theory, any logformat %macro\n can be used. In practice, a %macro expands as a dash (-) if\n the helper request is sent before the required macro\n information is available to Squid.\n \n By default, Squid uses request formats provided in\n scheme-specific examples below (search for %credentials).\n \n The expanded key_extras value is added to the Squid credentials\n cache and, hence, will affect authentication. It can be used to\n autenticate different users with identical user names (e.g.,\n when user authentication depends on http_port).\n \n Avoid adding frequently changing information to key_extras. For\n example, if you add user source IP, and it changes frequently\n in your environment, then max_user_ip ACL is going to treat\n every user+IP combination as a unique \"user\", breaking the ACL\n and wasting a lot of memory on those user records. It will also\n force users to authenticate from scratch whenever their IP\n changes.\n \n \"realm\" string\n Specifies the protection scope (aka realm name) which is to be\n reported to the client for the authentication scheme. It is\n commonly part of the text the user will see when prompted for\n their username and password.\n \n For Basic the default is \"Squid proxy-caching web server\".\n For Digest there is no default, this parameter is mandatory.\n For NTLM and Negotiate this parameter is ignored.\n \n \"children\" numberofchildren [startup=N] [idle=N] [concurrency=N]\n \n The maximum number of authenticator processes to spawn. If\n you start too few Squid will have to wait for them to process\n a backlog of credential verifications, slowing it down. When\n password verifications are done via a (slow) network you are\n likely to need lots of authenticator processes.\n \n The startup= and idle= options permit some skew in the exact\n amount run. A minimum of startup=N will begin during startup\n and reconfigure. Squid will start more in groups of up to\n idle=N in an attempt to meet traffic needs and to keep idle=N\n free above those traffic needs up to the maximum.\n \n The concurrency= option sets the number of concurrent requests\n the helper can process.  The default of 0 is used for helpers\n who only supports one request at a time. Setting this to a\n number greater than 0 changes the protocol used to include a\n channel ID field first on the request/response line, allowing\n multiple requests to be sent to the same helper in parallel\n without waiting for the response.\n \n Concurrency must not be set unless it's known the helper\n supports the input format with channel-ID fields.\n \n NOTE: NTLM and Negotiate schemes do not support concurrency\n in the Squid code module even though some helpers can.\n \n \n \n === Example Configuration ===\n \n This configuration displays the recommended authentication scheme\n order from most to least secure with recommended minimum configuration\n settings for each scheme:\n \n  auth_param negotiate program <uncomment and complete this line to activate>\n  auth_param negotiate children 20 startup=0 idle=1\n  auth_param negotiate keep_alive on\n  \n  auth_param digest program <uncomment and complete this line to activate>\n  auth_param digest children 20 startup=0 idle=1\n  auth_param digest realm Squid proxy-caching web server\n  auth_param digest nonce_garbage_interval 5 minutes\n  auth_param digest nonce_max_duration 30 minutes\n  auth_param digest nonce_max_count 50\n  \n  auth_param ntlm program <uncomment and complete this line to activate>\n  auth_param ntlm children 20 startup=0 idle=1\n  auth_param ntlm keep_alive on\n  \n  auth_param basic program <uncomment and complete this line>\n  auth_param basic children 5 startup=5 idle=1\n  auth_param basic realm Squid proxy-caching web server\n  auth_param basic credentialsttl 2 hours\n Default:\n  none\n", "   TAG: authenticate_cache_garbage_interval\n The time period between garbage collection across the username cache.\n This is a trade-off between memory utilization (long intervals - say\n 2 days) and CPU (short intervals - say 1 minute). Only change if you\n have good reason to.\n Default:\n  authenticate_cache_garbage_interval 1 hour\n", "   TAG: authenticate_ttl\n The time a user & their credentials stay in the logged in\n user cache since their last request. When the garbage\n interval passes, all user credentials that have passed their\n TTL are removed from memory.\n Default:\n  authenticate_ttl 1 hour\n", "   TAG: authenticate_ip_ttl\n If you use proxy authentication and the 'max_user_ip' ACL,\n this directive controls how long Squid remembers the IP\n addresses associated with each user.  Use a small value\n (e.g., 60 seconds) if your users might change addresses\n quickly, as is the case with dialup.   You might be safe\n using a larger value (e.g., 2 hours) in a corporate LAN\n environment with relatively static address assignments.\n Default:\n  authenticate_ip_ttl 1 second\n", "   TAG: external_acl_type\n This option defines external acl classes using a helper program\n to look up the status\n \n   external_acl_type name [options] FORMAT.. /path/to/helper [helper arguments..]\n \n Options:\n \n   ttl=nTTL in seconds for cached results (defaults to 3600\n   for 1 hour)\n \n   negative_ttl=n\n   TTL for cached negative lookups (default same\n   as ttl)\n \n   grace=nPercentage remaining of TTL where a refresh of a\n cached entry should be initiated without needing to\n wait for a new reply. (default is for no grace period)\n \n   cache=nLimit the result cache size, default is 262144.\n The expanded FORMAT value is used as the cache key, so\n if the details in FORMAT are highly variable a larger\n cache may be needed to produce reduction in helper load.\n \n   children-max=n\n Maximum number of acl helper processes spawned to service\n external acl lookups of this type. (default 20)\n \n   children-startup=n\n Minimum number of acl helper processes to spawn during\n startup and reconfigure to service external acl lookups\n of this type. (default 0)\n \n   children-idle=n\n Number of acl helper processes to keep ahead of traffic\n loads. Squid will spawn this many at once whenever load\n rises above the capabilities of existing processes.\n Up to the value of children-max. (default 1)\n \n   concurrency=nconcurrency level per process. Only used with helpers\n capable of processing more than one query at a time.\n \n   protocol=2.5Compatibility mode for Squid-2.5 external acl helpers.\n \n   ipv4 / ipv6IP protocol used to communicate with this helper.\n The default is to auto-detect IPv6 and use it when available.\n \n \n FORMAT specifications\n \n   %LOGINAuthenticated user login name\n   %unA user name. Expands to the first available name\n   from the following list of information sources:\n - authenticated user name, like %ul or %LOGIN\n - user name sent by an external ACL, like %EXT_USER\n - SSL client name, like %us in logformat\n - ident user name, like %ui in logformat\n   %EXT_USERUsername from previous external acl\n   %EXT_LOGLog details from previous external acl\n   %EXT_TAGTag from previous external acl\n   %IDENTIdent user name\n   %SRCClient IP\n   %SRCPORTClient source port\n   %URIRequested URI\n   %DSTRequested host\n   %PROTORequested URL scheme\n   %PORTRequested port\n   %PATHRequested URL path\n   %METHODRequest method\n   %MYADDRSquid interface address\n   %MYPORTSquid http_port number\n   %PATHRequested URL-path (including query-string if any)\n   %USER_CERTSSL User certificate in PEM format\n   %USER_CERTCHAIN SSL User certificate chain in PEM format\n   %USER_CERT_xxSSL User certificate subject attribute xx\n   %USER_CA_CERT_xx SSL User certificate issuer attribute xx\n   %ssl::>sniSSL client SNI sent to Squid\n   %ssl::<cert_subject SSL server certificate DN\n   %ssl::<cert_issuer SSL server certificate issuer DN\n \n   %>{Header}HTTP request header \"Header\"\n   %>{Hdr:member}\n   HTTP request header \"Hdr\" list member \"member\"\n   %>{Hdr:;member}\n   HTTP request header list member using ; as\n   list separator. ; can be any non-alphanumeric\n character.\n \n   %<{Header}HTTP reply header \"Header\"\n   %<{Hdr:member}\n   HTTP reply header \"Hdr\" list member \"member\"\n   %<{Hdr:;member}\n   HTTP reply header list member using ; as\n   list separator. ; can be any non-alphanumeric\n character.\n \n   %ACLThe name of the ACL being tested.\n   %DATAThe ACL arguments. If not used then any arguments\n is automatically added at the end of the line\n sent to the helper.\n NOTE: this will encode the arguments as one token,\n whereas the default will pass each separately.\n \n   %%The percent sign. Useful for helpers which need\n an unchanging input format.\n \n \n General request syntax:\n \n   [channel-ID] FORMAT-values [acl-values ...]\n \n \n FORMAT-values consists of transaction details expanded with\n whitespace separation per the config file FORMAT specification\n using the FORMAT macros listed above.\n \n acl-values consists of any string specified in the referencing\n config 'acl ... external' line. see the \"acl external\" directive.\n \n Request values sent to the helper are URL escaped to protect\n each value in requests against whitespaces.\n \n If using protocol=2.5 then the request sent to the helper is not\n URL escaped to protect against whitespace.\n \n NOTE: protocol=3.0 is deprecated as no longer necessary.\n \n When using the concurrency= option the protocol is changed by\n introducing a query channel tag in front of the request/response.\n The query channel tag is a number between 0 and concurrency-1.\n This value must be echoed back unchanged to Squid as the first part\n of the response relating to its request.\n \n \n The helper receives lines expanded per the above format specification\n and for each input line returns 1 line starting with OK/ERR/BH result\n code and optionally followed by additional keywords with more details.\n \n \n General result syntax:\n \n   [channel-ID] result keyword=value ...\n \n Result consists of one of the codes:\n \n   OK\n the ACL test produced a match.\n \n   ERR\n the ACL test does not produce a match.\n \n   BH\n An internal error occurred in the helper, preventing\n a result being identified.\n \n The meaning of 'a match' is determined by your squid.conf\n access control configuration. See the Squid wiki for details.\n \n Defined keywords:\n \n   user=The users name (login)\n \n   password=The users password (for login= cache_peer option)\n \n   message=Message describing the reason for this response.\n Available as %o in error pages.\n Useful on (ERR and BH results).\n \n   tag=Apply a tag to a request. Only sets a tag once,\n does not alter existing tags.\n \n   log=String to be logged in access.log. Available as\n   %ea in logformat specifications.\n \n     clt_conn_tag= Associates a TAG with the client TCP connection.\n Please see url_rewrite_program related documentation\n for this kv-pair.\n \n Any keywords may be sent on any response whether OK, ERR or BH.\n \n All response keyword values need to be a single token with URL\n escaping, or enclosed in double quotes (\") and escaped using \\ on\n any double quotes or \\ characters within the value. The wrapping\n double quotes are removed before the value is interpreted by Squid.\n \\r and \\n are also replace by CR and LF.\n \n Some example key values:\n \n user=John%20Smith\n user=\"John Smith\"\n user=\"J. \\\"Bob\\\" Smith\"\n Default:\n  none\n", "   TAG: acl\n Defining an Access List\n \n Every access list definition must begin with an aclname and acltype, \n followed by either type-specific arguments or a quoted filename that\n they are read from.\n \n    acl aclname acltype argument ...\n    acl aclname acltype \"file\" ...\n \n When using \"file\", the file should contain one item per line.\n \n Some acl types supports options which changes their default behaviour.\n The available options are:\n \n -i,+iBy default, regular expressions are CASE-SENSITIVE. To make them\n case-insensitive, use the -i option. To return case-sensitive\n use the +i option between patterns, or make a new ACL line\n without -i.\n \n -nDisable lookups and address type conversions.  If lookup or\n conversion is required because the parameter type (IP or\n domain name) does not match the message address type (domain\n name or IP), then the ACL would immediately declare a mismatch\n without any warnings or lookups.\n \n --Used to stop processing all options, in the case the first acl\n value has '-' character as first character (for example the '-'\n is a valid domain name)\n \n Some acl types require suspending the current request in order\n to access some external data source.\n Those which do are marked with the tag [slow], those which\n don't are marked as [fast].\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl\n for further information\n \n ***** ACL TYPES AVAILABLE *****\n \n acl aclname src ip-address/mask ...  clients IP address [fast]\n acl aclname src addr1-addr2/mask ...  range of addresses [fast]\n acl aclname dst [-n] ip-address/mask ...  URL host's IP address [slow]\n acl aclname localip ip-address/mask ...   IP address the client connected to [fast]\n \n acl aclname arp      mac-address ... (xx:xx:xx:xx:xx:xx notation)\n     [fast]\n     The 'arp' ACL code is not portable to all operating systems.\n     It works on Linux, Solaris, Windows, FreeBSD, and some other\n     BSD variants.\n    \n     NOTE: Squid can only determine the MAC/EUI address for IPv4\n     clients that are on the same subnet. If the client is on a\n     different subnet, then Squid cannot find out its address.\n    \n     NOTE 2: IPv6 protocol does not contain ARP. MAC/EUI is either\n     encoded directly in the IPv6 address or not available.\n \n acl aclname srcdomain   .foo.com ...\n     reverse lookup, from client IP [slow]\n acl aclname dstdomain [-n] .foo.com ...\n     Destination server from URL [fast]\n acl aclname srcdom_regex [-i] \\.foo\\.com ...\n     regex matching client name [slow]\n acl aclname dstdom_regex [-n] [-i] \\.foo\\.com ...\n     regex matching server [fast]\n    \n     For dstdomain and dstdom_regex a reverse lookup is tried if a IP\n     based URL is used and no match is found. The name \"none\" is used\n     if the reverse lookup fails.\n \n acl aclname src_as number ...\n acl aclname dst_as number ...\n     [fast]\n     Except for access control, AS numbers can be used for\n     routing of requests to specific caches. Here's an\n     example for routing all requests for AS 1241 and only\n     those to mycache.mydomain.net:\n     acl asexample dst_as 1241\n     cache_peer_access mycache.mydomain.net allow asexample\n     cache_peer_access mycache_mydomain.net deny all\n \n acl aclname peername myPeer ...\n     [fast]\n     match against a named cache_peer entry\n     set unique name= on cache_peer lines for reliable use.\n \n acl aclname time [day-abbrevs] [h1:m1-h2:m2]\n     [fast]\n      day-abbrevs:\n    S - Sunday\n    M - Monday\n    T - Tuesday\n    W - Wednesday\n    H - Thursday\n    F - Friday\n    A - Saturday\n      h1:m1 must be less than h2:m2\n \n acl aclname url_regex [-i] ^http:// ...\n     regex matching on whole URL [fast]\n acl aclname urllogin [-i] [^a-zA-Z0-9] ...\n     regex matching on URL login field\n acl aclname urlpath_regex [-i] \\.gif$ ...\n     regex matching on URL path [fast]\n \n acl aclname port 80 70 21 0-1024...     destination TCP port [fast]\n                                         ranges are alloed\n acl aclname localport 3128 ...        TCP port the client connected to [fast]\n                                         NP: for interception mode this is usually '80'\n \n acl aclname myportname 3128 ...         *_port name [fast]\n \n acl aclname proto HTTP FTP ...          request protocol [fast]\n  \n acl aclname method GET POST ...         HTTP request method [fast]\n \n acl aclname http_status 200 301 500- 400-403 ... \n     status code in reply [fast]\n \n acl aclname browser [-i] regexp ...\n     pattern match on User-Agent header (see also req_header below) [fast]\n \n acl aclname referer_regex [-i] regexp ...\n     pattern match on Referer header [fast]\n     Referer is highly unreliable, so use with care\n \n acl aclname ident username ...\n acl aclname ident_regex [-i] pattern ...\n     string match on ident output [slow]\n     use REQUIRED to accept any non-null ident.\n \n acl aclname proxy_auth [-i] username ...\n acl aclname proxy_auth_regex [-i] pattern ...\n     perform http authentication challenge to the client and match against\n     supplied credentials [slow]\n    \n     takes a list of allowed usernames.\n     use REQUIRED to accept any valid username.\n    \n     Will use proxy authentication in forward-proxy scenarios, and plain\n     http authenticaiton in reverse-proxy scenarios\n    \n     NOTE: when a Proxy-Authentication header is sent but it is not\n     needed during ACL checking the username is NOT logged\n     in access.log.\n    \n     NOTE: proxy_auth requires a EXTERNAL authentication program\n     to check username/password combinations (see\n     auth_param directive).\n    \n     NOTE: proxy_auth can't be used in a transparent/intercepting proxy\n     as the browser needs to be configured for using a proxy in order\n     to respond to proxy authentication.\n \n acl aclname snmp_community string ...\n     A community string to limit access to your SNMP Agent [fast]\n     Example:\n    \n    acl snmppublic snmp_community public\n \n acl aclname maxconn number\n     This will be matched when the client's IP address has\n     more than <number> TCP connections established. [fast]\n     NOTE: This only measures direct TCP links so X-Forwarded-For\n     indirect clients are not counted.\n \n acl aclname max_user_ip [-s] number\n     This will be matched when the user attempts to log in from more\n     than <number> different ip addresses. The authenticate_ip_ttl\n     parameter controls the timeout on the ip entries. [fast]\n     If -s is specified the limit is strict, denying browsing\n     from any further IP addresses until the ttl has expired. Without\n     -s Squid will just annoy the user by \"randomly\" denying requests.\n     (the counter is reset each time the limit is reached and a\n     request is denied)\n     NOTE: in acceleration mode or where there is mesh of child proxies,\n     clients may appear to come from multiple addresses if they are\n     going through proxy farms, so a limit of 1 may cause user problems.\n \n acl aclname random probability\n     Pseudo-randomly match requests. Based on the probability given.\n     Probability may be written as a decimal (0.333), fraction (1/3)\n     or ratio of matches:non-matches (3:5).\n \n acl aclname req_mime_type [-i] mime-type ...\n     regex match against the mime type of the request generated\n     by the client. Can be used to detect file upload or some\n     types HTTP tunneling requests [fast]\n     NOTE: This does NOT match the reply. You cannot use this\n     to match the returned file type.\n \n acl aclname req_header header-name [-i] any\\.regex\\.here\n     regex match against any of the known request headers.  May be\n     thought of as a superset of \"browser\", \"referer\" and \"mime-type\"\n     ACL [fast]\n \n acl aclname rep_mime_type [-i] mime-type ...\n     regex match against the mime type of the reply received by\n     squid. Can be used to detect file download or some\n     types HTTP tunneling requests. [fast]\n     NOTE: This has no effect in http_access rules. It only has\n     effect in rules that affect the reply data stream such as\n     http_reply_access.\n \n acl aclname rep_header header-name [-i] any\\.regex\\.here\n     regex match against any of the known reply headers. May be\n     thought of as a superset of \"browser\", \"referer\" and \"mime-type\"\n     ACLs [fast]\n \n acl aclname external class_name [arguments...]\n     external ACL lookup via a helper class defined by the\n     external_acl_type directive [slow]\n \n acl aclname user_cert attribute values...\n     match against attributes in a user SSL certificate\n     attribute is one of DN/C/O/CN/L/ST or a numerical OID [fast]\n \n acl aclname ca_cert attribute values...\n     match against attributes a users issuing CA SSL certificate\n     attribute is one of DN/C/O/CN/L/ST or a numerical OID  [fast]\n \n acl aclname ext_user username ...\n acl aclname ext_user_regex [-i] pattern ...\n     string match on username returned by external acl helper [slow]\n     use REQUIRED to accept any non-null user name.\n \n acl aclname tag tagvalue ...\n     string match on tag returned by external acl helper [fast]\n     DEPRECATED. Only the first tag will match with this ACL.\n     Use the 'note' ACL instead for handling multiple tag values.\n \n acl aclname hier_code codename ...\n     string match against squid hierarchy code(s); [fast]\n      e.g., DIRECT, PARENT_HIT, NONE, etc.\n    \n     NOTE: This has no effect in http_access rules. It only has\n     effect in rules that affect the reply data stream such as\n     http_reply_access.\n \n acl aclname note name [value ...]\n     match transaction annotation [fast]\n     Without values, matches any annotation with a given name.\n     With value(s), matches any annotation with a given name that\n     also has one of the given values.\n     Names and values are compared using a string equality test.\n     Annotation sources include note and adaptation_meta directives\n     as well as helper and eCAP responses.\n \n acl aclname adaptation_service service ...\n     Matches the name of any icap_service, ecap_service,\n     adaptation_service_set, or adaptation_service_chain that Squid\n     has used (or attempted to use) for the master transaction.\n     This ACL must be defined after the corresponding adaptation\n     service is named in squid.conf. This ACL is usable with\n     adaptation_meta because it starts matching immediately after\n     the service has been selected for adaptation.\n \n acl aclname any-of acl1 acl2 ...\n     match any one of the acls [fast or slow]\n     The first matching ACL stops further ACL evaluation.\n    \n     ACLs from multiple any-of lines with the same name are ORed.\n     For example, A = (a1 or a2) or (a3 or a4) can be written as\n       acl A any-of a1 a2\n       acl A any-of a3 a4\n    \n     This group ACL is fast if all evaluated ACLs in the group are fast\n     and slow otherwise.\n \n acl aclname all-of acl1 acl2 ... \n     match all of the acls [fast or slow]\n     The first mismatching ACL stops further ACL evaluation.\n    \n     ACLs from multiple all-of lines with the same name are ORed.\n     For example, B = (b1 and b2) or (b3 and b4) can be written as\n       acl B all-of b1 b2\n       acl B all-of b3 b4\n    \n     This group ACL is fast if all evaluated ACLs in the group are fast\n     and slow otherwise.\n \n Examples:\n acl macaddress arp 09:00:2b:23:45:67\n acl myexample dst_as 1241\n acl password proxy_auth REQUIRED\n acl fileupload req_mime_type -i ^multipart/form-data$\n acl javascript rep_mime_type -i ^application/x-javascript$\n \n Default:\n  ACLs all, manager, localhost, and to_localhost are predefined.\n", "   TAG: proxy_protocol_access\n Determine which client proxies can be trusted to provide correct\n information regarding real client IP address using PROXY protocol.\n \n Requests may pass through a chain of several other proxies\n before reaching us. The original source details may by sent in:\n * HTTP message Forwarded header, or\n * HTTP message X-Forwarded-For header, or\n * PROXY protocol connection header.\n \n This directive is solely for validating new PROXY protocol\n connections received from a port flagged with require-proxy-header.\n It is checked only once after TCP connection setup.\n \n A deny match results in TCP connection closure.\n \n An allow match is required for Squid to permit the corresponding\n TCP connection, before Squid even looks for HTTP request headers.\n If there is an allow match, Squid starts using PROXY header information\n to determine the source address of the connection for all future ACL\n checks, logging, etc.\n \n SECURITY CONSIDERATIONS:\n \n Any host from which we accept client IP details can place\n incorrect information in the relevant header, and Squid\n will use the incorrect information as if it were the\n source address of the request.  This may enable remote\n hosts to bypass any access control restrictions that are\n based on the client's source addresses.\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Default:\n  all TCP connections to ports with require-proxy-header will be denied\n", "   TAG: follow_x_forwarded_for\n Determine which client proxies can be trusted to provide correct\n information regarding real client IP address.\n \n Requests may pass through a chain of several other proxies\n before reaching us. The original source details may by sent in:\n * HTTP message Forwarded header, or\n * HTTP message X-Forwarded-For header, or\n * PROXY protocol connection header.\n \n PROXY protocol connections are controlled by the proxy_protocol_access\n directive which is checked before this.\n \n If a request reaches us from a source that is allowed by this\n directive, then we trust the information it provides regarding\n the IP of the client it received from (if any).\n \n For the purpose of ACLs used in this directive the src ACL type always\n matches the address we are testing and srcdomain matches its rDNS.\n \n On each HTTP request Squid checks for X-Forwarded-For header fields.\n If found the header values are iterated in reverse order and an allow\n match is required for Squid to continue on to the next value.\n The verification ends when a value receives a deny match, cannot be\n tested, or there are no more values to test.\n NOTE: Squid does not yet follow the Forwarded HTTP header.\n \n The end result of this process is an IP address that we will\n refer to as the indirect client address.  This address may\n be treated as the client address for access control, ICAP, delay\n pools and logging, depending on the acl_uses_indirect_client,\n icap_uses_indirect_client, delay_pool_uses_indirect_client, \n log_uses_indirect_client and tproxy_uses_indirect_client options.\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n \n SECURITY CONSIDERATIONS:\n \n Any host from which we accept client IP details can place\n incorrect information in the relevant header, and Squid\n will use the incorrect information as if it were the\n source address of the request.  This may enable remote\n hosts to bypass any access control restrictions that are\n based on the client's source addresses.\n \n For example:\n \n acl localhost src 127.0.0.1\n acl my_other_proxy srcdomain .proxy.example.com\n follow_x_forwarded_for allow localhost\n follow_x_forwarded_for allow my_other_proxy\n Default:\n  X-Forwarded-For header will be ignored.\n", "   TAG: acl_uses_indirect_clienton|off\n Controls whether the indirect client address\n (see follow_x_forwarded_for) is used instead of the\n direct client address in acl matching.\n \n NOTE: maxconn ACL considers direct TCP links and indirect\n       clients will always have zero. So no match.\n Default:\n  acl_uses_indirect_client on\n", "   TAG: delay_pool_uses_indirect_clienton|off\n Controls whether the indirect client address\n (see follow_x_forwarded_for) is used instead of the\n direct client address in delay pools.\n Default:\n  delay_pool_uses_indirect_client on\n", "   TAG: log_uses_indirect_clienton|off\n Controls whether the indirect client address\n (see follow_x_forwarded_for) is used instead of the\n direct client address in the access log.\n Default:\n  log_uses_indirect_client on\n", "   TAG: tproxy_uses_indirect_clienton|off\n Controls whether the indirect client address\n (see follow_x_forwarded_for) is used instead of the\n direct client address when spoofing the outgoing client.\n \n This has no effect on requests arriving in non-tproxy\n mode ports.\n \n SECURITY WARNING: Usage of this option is dangerous\n and should not be used trivially. Correct configuration\n of follow_x_forwarded_for with a limited set of trusted\n sources is required to prevent abuse of your proxy.\n Default:\n  tproxy_uses_indirect_client off\n", "   TAG: spoof_client_ip\n Control client IP address spoofing of TPROXY traffic based on\n defined access lists.\n \n spoof_client_ip allow|deny [!]aclname ...\n \n If there are no \"spoof_client_ip\" lines present, the default\n is to \"allow\" spoofing of any suitable request.\n \n Note that the cache_peer \"no-tproxy\" option overrides this ACL.\n \n This clause supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Default:\n  Allow spoofing on all TPROXY traffic.\n", "   TAG: http_access\n Allowing or Denying access based on defined access lists\n \n To allow or deny a message received on an HTTP, HTTPS, or FTP port:\n http_access allow|deny [!]aclname ...\n \n NOTE on default values:\n \n If there are no \"access\" lines present, the default is to deny\n the request.\n \n If none of the \"access\" lines cause a match, the default is the\n opposite of the last line in the list.  If the last line was\n deny, the default is allow.  Conversely, if the last line\n is allow, the default will be deny.  For these reasons, it is a\n good idea to have an \"deny all\" entry at the end of your access\n lists to avoid potential confusion.\n \n This clause supports both fast and slow acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n \n Default:\n  Deny, unless rules exist in squid.conf.\n", "   TAG: adapted_http_access\n Allowing or Denying access based on defined access lists\n \n Essentially identical to http_access, but runs after redirectors\n and ICAP/eCAP adaptation. Allowing access control based on their\n output.\n \n If not set then only http_access is used.\n Default:\n  Allow, unless rules exist in squid.conf.\n", "   TAG: http_reply_access\n Allow replies to client requests. This is complementary to http_access.\n \n http_reply_access allow|deny [!] aclname ...\n \n NOTE: if there are no access lines present, the default is to allow\n all replies.\n \n If none of the access lines cause a match the opposite of the\n last line will apply. Thus it is good practice to end the rules\n with an \"allow all\" or \"deny all\" entry.\n \n This clause supports both fast and slow acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Default:\n  Allow, unless rules exist in squid.conf.\n", "   TAG: icp_access\n Allowing or Denying access to the ICP port based on defined\n access lists\n \n icp_access  allow|deny [!]aclname ...\n \n NOTE: The default if no icp_access lines are present is to\n deny all traffic. This default may cause problems with peers\n using ICP.\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n \n   Allow ICP queries from local networks only\n  icp_access allow localnet\n  icp_access deny all\n Default:\n  Deny, unless rules exist in squid.conf.\n", "   TAG: htcp_access\n Allowing or Denying access to the HTCP port based on defined\n access lists\n \n htcp_access  allow|deny [!]aclname ...\n \n See also htcp_clr_access for details on access control for\n cache purge (CLR) HTCP messages.\n \n NOTE: The default if no htcp_access lines are present is to\n deny all traffic. This default may cause problems with peers\n using the htcp option.\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n \n   Allow HTCP queries from local networks only\n  htcp_access allow localnet\n  htcp_access deny all\n Default:\n  Deny, unless rules exist in squid.conf.\n", "   TAG: htcp_clr_access\n Allowing or Denying access to purge content using HTCP based\n on defined access lists.\n See htcp_access for details on general HTCP access control.\n \n htcp_clr_access  allow|deny [!]aclname ...\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n \n   Allow HTCP CLR requests from trusted peers\n acl htcp_clr_peer src 192.0.2.2 2001:DB8::2\n htcp_clr_access allow htcp_clr_peer\n htcp_clr_access deny all\n Default:\n  Deny, unless rules exist in squid.conf.\n", "   TAG: miss_access\n Determines whether network access is permitted when satisfying a request.\n \n For example;\n     to force your neighbors to use you as a sibling instead of\n     a parent.\n \n acl localclients src 192.0.2.0/24 2001:DB8::a:0/64\n miss_access deny  !localclients\n miss_access allow all\n \n This means only your local clients are allowed to fetch relayed/MISS\n replies from the network and all other clients can only fetch cached\n objects (HITs).\n \n The default for this setting allows all clients who passed the\n http_access rules to relay via this proxy.\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Default:\n  Allow, unless rules exist in squid.conf.\n", "   TAG: ident_lookup_access\n A list of ACL elements which, if matched, cause an ident\n (RFC 931) lookup to be performed for this request.  For\n example, you might choose to always perform ident lookups\n for your main multi-user Unix boxes, but not for your Macs\n and PCs.  By default, ident lookups are not performed for\n any requests.\n \n To enable ident lookups for specific client addresses, you\n can follow this example:\n \n acl ident_aware_hosts src 198.168.1.0/24\n ident_lookup_access allow ident_aware_hosts\n ident_lookup_access deny all\n \n Only src type ACL checks are fully supported.  A srcdomain\n ACL might work at times, but it will not always provide\n the correct result.\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Default:\n  Unless rules exist in squid.conf, IDENT is not fetched.\n", "   TAG: reply_body_max_sizesize [acl acl...]\n This option specifies the maximum size of a reply body. It can be\n used to prevent users from downloading very large files, such as\n MP3's and movies. When the reply headers are received, the\n reply_body_max_size lines are processed, and the first line where\n all (if any) listed ACLs are true is used as the maximum body size\n for this reply.\n \n This size is checked twice. First when we get the reply headers,\n we check the content-length value.  If the content length value exists\n and is larger than the allowed size, the request is denied and the\n user receives an error message that says \"the request or reply\n is too large.\" If there is no content-length, and the reply\n size exceeds this limit, the client's connection is just closed\n and they will receive a partial reply.\n \n WARNING: downstream caches probably can not detect a partial reply\n if there is no content-length header, so they will cache\n partial responses and give them out as hits.  You should NOT\n use this option if you have downstream caches.\n \n WARNING: A maximum size smaller than the size of squid's error messages\n will cause an infinite loop and crash squid. Ensure that the smallest\n non-zero value you use is greater that the maximum header size plus\n the size of your largest error page.\n \n If you set this parameter none (the default), there will be\n no limit imposed.\n \n Configuration Format is:\n reply_body_max_size SIZE UNITS [acl ...]\n ie.\n reply_body_max_size 10 MB\n \n Default:\n  No limit is applied.\n", "   TAG: http_port\n Usage:port [mode] [options]\n hostname:port [mode] [options]\n 1.2.3.4:port [mode] [options]\n \n The socket addresses where Squid will listen for HTTP client\n requests.  You may specify multiple socket addresses.\n There are three forms: port alone, hostname with port, and\n IP address with port.  If you specify a hostname or IP\n address, Squid binds the socket to that specific\n address. Most likely, you do not need to bind to a specific\n address, so you can use the port number alone.\n \n If you are running Squid in accelerator mode, you\n probably want to listen on port 80 also, or instead.\n \n The -a command line option may be used to specify additional\n port(s) where Squid listens for proxy request. Such ports will\n be plain proxy ports with no options.\n \n You may specify multiple socket addresses on multiple lines.\n \n Modes:\n \n    interceptSupport for IP-Layer NAT interception delivering\n traffic to this Squid port.\n NP: disables authentication on the port.\n \n    tproxySupport Linux TPROXY (or BSD divert-to) with spoofing\n of outgoing connections using the client IP address.\n NP: disables authentication on the port.\n \n    accelAccelerator / reverse proxy mode\n \n    ssl-bumpFor each CONNECT request allowed by ssl_bump ACLs,\n establish secure connection with the client and with\n the server, decrypt HTTPS messages as they pass through\n Squid, and treat them as unencrypted HTTP messages,\n becoming the man-in-the-middle.\n \n The ssl_bump option is required to fully enable\n bumping of CONNECT requests.\n \n Omitting the mode flag causes default forward proxy mode to be used.\n \n \n Accelerator Mode Options:\n \n    defaultsite=domainname\n What to use for the Host: header if it is not present\n in a request. Determines what site (not origin server)\n accelerators should consider the default.\n \n    no-vhostDisable using HTTP/1.1 Host header for virtual domain support.\n \n    protocol=Protocol to reconstruct accelerated and intercepted\n requests with. Defaults to HTTP/1.1 for http_port and\n HTTPS/1.1 for https_port.\n When an unsupported value is configured Squid will\n produce a FATAL error.\n Values: HTTP or HTTP/1.1, HTTPS or HTTPS/1.1\n \n    vportVirtual host port support. Using the http_port number\n instead of the port passed on Host: headers.\n \n    vport=NNVirtual host port support. Using the specified port\n number instead of the port passed on Host: headers.\n \n    act-as-origin\n Act as if this Squid is the origin server.\n This currently means generate new Date: and Expires:\n headers on HIT instead of adding Age:.\n \n    ignore-ccIgnore request Cache-Control headers.\n \n WARNING: This option violates HTTP specifications if\n used in non-accelerator setups.\n \n    allow-directAllow direct forwarding in accelerator mode. Normally\n accelerated requests are denied direct forwarding as if\n never_direct was used.\n \n WARNING: this option opens accelerator mode to security\n vulnerabilities usually only affecting in interception\n mode. Make sure to protect forwarding with suitable\n http_access rules when using this.\n \n \n SSL Bump Mode Options:\n     In addition to these options ssl-bump requires TLS/SSL options.\n \n    generate-host-certificates[=<on|off>]\n Dynamically create SSL server certificates for the\n destination hosts of bumped CONNECT requests.When \n enabled, the cert and key options are used to sign\n generated certificates. Otherwise generated\n certificate will be selfsigned.\n If there is a CA certificate lifetime of the generated \n certificate equals lifetime of the CA certificate. If\n generated certificate is selfsigned lifetime is three \n years.\n This option is enabled by default when ssl-bump is used.\n See the ssl-bump option above for more information.\n \n    dynamic_cert_mem_cache_size=SIZE\n Approximate total RAM size spent on cached generated\n certificates. If set to zero, caching is disabled. The\n default value is 4MB.\n \n TLS / SSL Options:\n \n    cert=Path to SSL certificate (PEM format).\n \n    key=Path to SSL private key file (PEM format)\n if not specified, the certificate file is\n assumed to be a combined certificate and\n key file.\n \n    version=The version of SSL/TLS supported\n     1automatic (default)\n     2SSLv2 only\n     3SSLv3 only\n     4TLSv1.0 only\n     5TLSv1.1 only\n     6TLSv1.2 only\n \n    cipher=Colon separated list of supported ciphers.\n NOTE: some ciphers such as EDH ciphers depend on\n       additional settings. If those settings are\n       omitted the ciphers may be silently ignored\n       by the OpenSSL library.\n \n    options=Various SSL implementation options. The most important\n being:\n     NO_SSLv2    Disallow the use of SSLv2\n     NO_SSLv3    Disallow the use of SSLv3\n     NO_TLSv1    Disallow the use of TLSv1.0\n     NO_TLSv1_1  Disallow the use of TLSv1.1\n     NO_TLSv1_2  Disallow the use of TLSv1.2\n     SINGLE_DH_USE Always create a new key when using\n       temporary/ephemeral DH key exchanges\n     NO_TICKET Disables TLS tickets extension\n     ALL       Enable various bug workarounds\n       suggested as \"harmless\" by OpenSSL\n       Be warned that this reduces SSL/TLS\n       strength to some attacks.\n See OpenSSL SSL_CTX_set_options documentation for a\n complete list of options.\n \n    clientca=File containing the list of CAs to use when\n requesting a client certificate.\n \n    cafile=File containing additional CA certificates to\n use when verifying client certificates. If unset\n clientca will be used.\n \n    capath=Directory containing additional CA certificates\n and CRL lists to use when verifying client certificates.\n \n    crlfile=File of additional CRL lists to use when verifying\n the client certificate, in addition to CRLs stored in\n the capath. Implies VERIFY_CRL flag below.\n \n    dhparams=File containing DH parameters for temporary/ephemeral\n DH key exchanges. See OpenSSL documentation for details\n on how to create this file.\n WARNING: EDH ciphers will be silently disabled if this\n  option is not set.\n \n    sslflags=Various flags modifying the use of SSL:\n     DELAYED_AUTH\n Don't request client certificates\n immediately, but wait until acl processing\n requires a certificate (not yet implemented).\n     NO_DEFAULT_CA\n Don't use the default CA lists built in\n to OpenSSL.\n     NO_SESSION_REUSE\n Don't allow for session reuse. Each connection\n will result in a new SSL session.\n     VERIFY_CRL\n Verify CRL lists when accepting client\n certificates.\n     VERIFY_CRL_ALL\n Verify CRL lists for all certificates in the\n client certificate chain.\n \n    sslcontext=SSL session ID context identifier.\n \n Other Options:\n \n    connection-auth[=on|off]\n                 use connection-auth=off to tell Squid to prevent \n                 forwarding Microsoft connection oriented authentication\n (NTLM, Negotiate and Kerberos)\n \n    disable-pmtu-discovery=\n Control Path-MTU discovery usage:\n     offlets OS decide on what to do (default).\n     transparentdisable PMTU discovery when transparent\n support is enabled.\n     alwaysdisable always PMTU discovery.\n \n In many setups of transparently intercepting proxies\n Path-MTU discovery can not work on traffic towards the\n clients. This is the case when the intercepting device\n does not fully track connections and fails to forward\n ICMP must fragment messages to the cache server. If you\n have such setup and experience that certain clients\n sporadically hang or never complete requests set\n disable-pmtu-discovery option to 'transparent'.\n \n    name=Specifies a internal name for the port. Defaults to\n the port specification (port or addr:port)\n \n    tcpkeepalive[=idle,interval,timeout]\n Enable TCP keepalive probes of idle connections.\n In seconds; idle is the initial time before TCP starts\n probing the connection, interval how often to probe, and\n timeout the time before giving up.\n \n    require-proxy-header\n Require PROXY protocol version 1 or 2 connections.\n The proxy_protocol_access is required to whitelist\n downstream proxies which can be trusted.\n \n If you run Squid on a dual-homed machine with an internal\n and an external interface we recommend you to specify the\n internal address:port in http_port. This way Squid will only be\n visible on the internal address.\n \n \n\n", "   TAG: https_port\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n Usage:  [ip:]port cert=certificate.pem [key=key.pem] [mode] [options...]\n \n The socket address where Squid will listen for client requests made\n over TLS or SSL connections. Commonly referred to as HTTPS.\n \n This is most useful for situations where you are running squid in\n accelerator mode and you want to do the SSL work at the accelerator level.\n \n You may specify multiple socket addresses on multiple lines,\n each with their own SSL certificate and/or options.\n \n Modes:\n \n    accelAccelerator / reverse proxy mode\n \n    interceptSupport for IP-Layer interception of\n outgoing requests without browser settings.\n NP: disables authentication and IPv6 on the port.\n \n    tproxySupport Linux TPROXY for spoofing outgoing\n connections using the client IP address.\n NP: disables authentication and maybe IPv6 on the port.\n \n    ssl-bumpFor each intercepted connection allowed by ssl_bump\n ACLs, establish a secure connection with the client and with\n the server, decrypt HTTPS messages as they pass through\n Squid, and treat them as unencrypted HTTP messages,\n becoming the man-in-the-middle.\n \n An \"ssl_bump server-first\" match is required to\n fully enable bumping of intercepted SSLconnections.\n \n Requires tproxy or intercept.\n \n Omitting the mode flag causes default forward proxy mode to be used.\n \n \n See http_port for a list of generic options\n \n \n SSL Options:\n \n    cert=Path to SSL certificate (PEM format).\n \n    key=Path to SSL private key file (PEM format)\n if not specified, the certificate file is\n assumed to be a combined certificate and\n key file.\n \n    version=The version of SSL/TLS supported\n     1automatic (default)\n     2SSLv2 only\n     3SSLv3 only\n     4TLSv1 only\n \n    cipher=Colon separated list of supported ciphers.\n \n    options=Various SSL engine options. The most important\n being:\n     NO_SSLv2  Disallow the use of SSLv2\n     NO_SSLv3  Disallow the use of SSLv3\n     NO_TLSv1  Disallow the use of TLSv1\n     SINGLE_DH_USE Always create a new key when using\n       temporary/ephemeral DH key exchanges\n See src/ssl_support.c or OpenSSL SSL_CTX_set_options\n documentation for a complete list of options.\n \n    clientca=File containing the list of CAs to use when\n requesting a client certificate.\n \n    cafile=File containing additional CA certificates to\n use when verifying client certificates. If unset\n clientca will be used.\n \n    capath=Directory containing additional CA certificates\n and CRL lists to use when verifying client certificates.\n \n    crlfile=File of additional CRL lists to use when verifying\n the client certificate, in addition to CRLs stored in\n the capath. Implies VERIFY_CRL flag below.\n \n    dhparams=File containing DH parameters for temporary/ephemeral\n DH key exchanges.\n \n    sslflags=Various flags modifying the use of SSL:\n     DELAYED_AUTH\n Don't request client certificates\n immediately, but wait until acl processing\n requires a certificate (not yet implemented).\n     NO_DEFAULT_CA\n Don't use the default CA lists built in\n to OpenSSL.\n     NO_SESSION_REUSE\n Don't allow for session reuse. Each connection\n will result in a new SSL session.\n     VERIFY_CRL\n Verify CRL lists when accepting client\n certificates.\n     VERIFY_CRL_ALL\n Verify CRL lists for all certificates in the\n client certificate chain.\n \n    sslcontext=SSL session ID context identifier.\n \n    generate-host-certificates[=<on|off>]\n Dynamically create SSL server certificates for the\n destination hosts of bumped SSL requests.When\n enabled, the cert and key options are used to sign\n generated certificates. Otherwise generated\n certificate will be selfsigned.\n If there is CA certificate life time of generated\n certificate equals lifetime of CA certificate. If\n generated certificate is selfsigned lifetime is three\n years.\n This option is enabled by default when SslBump is used.\n See the sslBump option above for more information.\n \n    dynamic_cert_mem_cache_size=SIZE\n Approximate total RAM size spent on cached generated\n certificates. If set to zero, caching is disabled. The\n default value is 4MB.\n \n See http_port for a list of available options.\n Default:\n  none\n", "   TAG: ftp_port\n Enables Native FTP proxy by specifying the socket address where Squid\n listens for FTP client requests. See http_port directive for various\n ways to specify the listening address and mode.\n \n Usage: ftp_port address [mode] [options]\n \n WARNING: This is a new, experimental, complex feature that has seen\n limited production exposure. Some Squid modules (e.g., caching) do not\n currently work with native FTP proxying, and many features have not\n even been tested for compatibility. Test well before deploying!\n \n Native FTP proxying differs substantially from proxying HTTP requests\n with ftp:// URIs because Squid works as an FTP server and receives\n actual FTP commands (rather than HTTP requests with FTP URLs).\n \n Native FTP commands accepted at ftp_port are internally converted or\n wrapped into HTTP-like messages. The same happens to Native FTP\n responses received from FTP origin servers. Those HTTP-like messages\n are shoveled through regular access control and adaptation layers\n between the FTP client and the FTP origin server. This allows Squid to\n examine, adapt, block, and log FTP exchanges. Squid reuses most HTTP\n mechanisms when shoveling wrapped FTP messages. For example,\n http_access and adaptation_access directives are used.\n \n Modes:\n \n    interceptSame as http_port intercept. The FTP origin address is\n determined based on the intended destination of the\n intercepted connection.\n \n    tproxySupport Linux TPROXY for spoofing outgoing\n connections using the client IP address.\n NP: disables authentication and maybe IPv6 on the port.\n \n By default (i.e., without an explicit mode option), Squid extracts the\n FTP origin address from the login@origin parameter of the FTP USER\n command. Many popular FTP clients support such native FTP proxying.\n \n Options:\n \n    name=tokenSpecifies an internal name for the port. Defaults to\n the port address. Usable with myportname ACL.\n \n    ftp-track-dirs\n Enables tracking of FTP directories by injecting extra\n PWD commands and adjusting Request-URI (in wrapping\n HTTP requests) to reflect the current FTP server\n directory. Tracking is disabled by default.\n \n    protocol=FTPProtocol to reconstruct accelerated and intercepted\n requests with. Defaults to FTP. No other accepted\n values have been tested with. An unsupported value\n results in a FATAL error. Accepted values are FTP,\n HTTP (or HTTP/1.1), and HTTPS (or HTTPS/1.1).\n \n Other http_port modes and options that are not specific to HTTP and\n HTTPS may also work.\n Default:\n  none\n", "   TAG: tcp_outgoing_tos\n Allows you to select a TOS/Diffserv value for packets outgoing\n on the server side, based on an ACL.\n \n tcp_outgoing_tos ds-field [!]aclname ...\n \n Example where normal_service_net uses the TOS value 0x00\n and good_service_net uses 0x20\n \n acl normal_service_net src 10.0.0.0/24\n acl good_service_net src 10.0.1.0/24\n tcp_outgoing_tos 0x00 normal_service_net\n tcp_outgoing_tos 0x20 good_service_net\n \n TOS/DSCP values really only have local significance - so you should\n know what you're specifying. For more information, see RFC2474,\n RFC2475, and RFC3260.\n \n The TOS/DSCP byte must be exactly that - a octet value  0 - 255, or\n \"default\" to use whatever default your host has.\n Note that only multiples of 4 are usable as the two rightmost bits have\n been redefined for use by ECN (RFC 3168 section 23.1).\n The squid parser will enforce this by masking away the ECN bits.\n \n Processing proceeds in the order specified, and stops at first fully\n matching line.\n \n Only fast ACLs are supported.\n Default:\n  none\n", "   TAG: clientside_tos\n Allows you to select a TOS/DSCP value for packets being transmitted\n on the client-side, based on an ACL.\n \n clientside_tos ds-field [!]aclname ...\n \n Example where normal_service_net uses the TOS value 0x00\n and good_service_net uses 0x20\n \n acl normal_service_net src 10.0.0.0/24\n acl good_service_net src 10.0.1.0/24\n clientside_tos 0x00 normal_service_net\n clientside_tos 0x20 good_service_net\n \n Note: This feature is incompatible with qos_flows. Any TOS values set here\n will be overwritten by TOS values in qos_flows.\n \n The TOS/DSCP byte must be exactly that - a octet value  0 - 255, or\n \"default\" to use whatever default your host has.\n Note that only multiples of 4 are usable as the two rightmost bits have\n been redefined for use by ECN (RFC 3168 section 23.1).\n The squid parser will enforce this by masking away the ECN bits.\n \n Default:\n  none\n", "   TAG: tcp_outgoing_mark\n  Note: This option is only available if Squid is rebuilt with the\n        Packet MARK (Linux)\n \n Allows you to apply a Netfilter mark value to outgoing packets\n on the server side, based on an ACL.\n \n tcp_outgoing_mark mark-value [!]aclname ...\n \n Example where normal_service_net uses the mark value 0x00\n and good_service_net uses 0x20\n \n acl normal_service_net src 10.0.0.0/24\n acl good_service_net src 10.0.1.0/24\n tcp_outgoing_mark 0x00 normal_service_net\n tcp_outgoing_mark 0x20 good_service_net\n \n Only fast ACLs are supported.\n Default:\n  none\n", "   TAG: clientside_mark\n  Note: This option is only available if Squid is rebuilt with the\n        Packet MARK (Linux)\n \n Allows you to apply a Netfilter mark value to packets being transmitted\n on the client-side, based on an ACL.\n \n clientside_mark mark-value [!]aclname ...\n \n Example where normal_service_net uses the mark value 0x00\n and good_service_net uses 0x20\n \n acl normal_service_net src 10.0.0.0/24\n acl good_service_net src 10.0.1.0/24\n clientside_mark 0x00 normal_service_net\n clientside_mark 0x20 good_service_net\n \n Note: This feature is incompatible with qos_flows. Any mark values set here\n will be overwritten by mark values in qos_flows.\n Default:\n  none\n", "   TAG: qos_flows\n Allows you to select a TOS/DSCP value to mark outgoing\n connections to the client, based on where the reply was sourced.\n For platforms using netfilter, allows you to set a netfilter mark\n value instead of, or in addition to, a TOS value.\n \n By default this functionality is disabled. To enable it with the default\n settings simply use \"qos_flows mark\" or \"qos_flows tos\". Default\n settings will result in the netfilter mark or TOS value being copied\n from the upstream connection to the client. Note that it is the connection\n CONNMARK value not the packet MARK value that is copied.\n \n It is not currently possible to copy the mark or TOS value from the\n client to the upstream connection request.\n \n TOS values really only have local significance - so you should\n know what you're specifying. For more information, see RFC2474,\n RFC2475, and RFC3260.\n \n The TOS/DSCP byte must be exactly that - a octet value  0 - 255.\n Note that only multiples of 4 are usable as the two rightmost bits have\n been redefined for use by ECN (RFC 3168 section 23.1).\n The squid parser will enforce this by masking away the ECN bits.\n \n Mark values can be any unsigned 32-bit integer value.\n \n This setting is configured by setting the following values:\n \n tos|mark                Whether to set TOS or netfilter mark values\n \n local-hit=0xFFValue to mark local cache hits.\n \n sibling-hit=0xFFValue to mark hits from sibling peers.\n \n parent-hit=0xFFValue to mark hits from parent peers.\n \n miss=0xFF[/mask]Value to mark cache misses. Takes precedence\n over the preserve-miss feature (see below), unless\n mask is specified, in which case only the bits\n specified in the mask are written.\n \n The TOS variant of the following features are only possible on Linux\n and require your kernel to be patched with the TOS preserving ZPH\n patch, available from http://zph.bratcheda.org\n No patch is needed to preserve the netfilter mark, which will work\n with all variants of netfilter.\n \n disable-preserve-miss\n This option disables the preservation of the TOS or netfilter\n mark. By default, the existing TOS or netfilter mark value of\n the response coming from the remote server will be retained\n and masked with miss-mark.\n NOTE: in the case of a netfilter mark, the mark must be set on\n the connection (using the CONNMARK target) not on the packet\n (MARK target).\n \n miss-mask=0xFF\n Allows you to mask certain bits in the TOS or mark value\n received from the remote server, before copying the value to\n the TOS sent towards clients.\n Default for tos: 0xFF (TOS from server is not changed).\n Default for mark: 0xFFFFFFFF (mark from server is not changed).\n \n All of these features require the --enable-zph-qos compilation flag\n (enabled by default). Netfilter marking also requires the\n libnetfilter_conntrack libraries (--with-netfilter-conntrack) and\n libcap 2.09+ (--with-libcap).\n \n Default:\n  none\n", "   TAG: tcp_outgoing_address\n Allows you to map requests to different outgoing IP addresses\n based on the username or source address of the user making\n the request.\n \n tcp_outgoing_address ipaddr [[!]aclname] ...\n \n For example;\n Forwarding clients with dedicated IPs for certain subnets.\n \n   acl normal_service_net src 10.0.0.0/24\n   acl good_service_net src 10.0.2.0/24\n \n   tcp_outgoing_address 2001:db8::c001 good_service_net\n   tcp_outgoing_address 10.1.0.2 good_service_net\n \n   tcp_outgoing_address 2001:db8::beef normal_service_net\n   tcp_outgoing_address 10.1.0.1 normal_service_net\n \n   tcp_outgoing_address 2001:db8::1\n   tcp_outgoing_address 10.1.0.3\n \n Processing proceeds in the order specified, and stops at first fully\n matching line.\n \n Squid will add an implicit IP version test to each line.\n Requests going to IPv4 websites will use the outgoing 10.1.0.* addresses.\n Requests going to IPv6 websites will use the outgoing 2001:db8:* addresses.\n \n \n NOTE: The use of this directive using client dependent ACLs is\n incompatible with the use of server side persistent connections. To\n ensure correct results it is best to set server_persistent_connections\n to off when using this directive in such configurations.\n \n NOTE: The use of this directive to set a local IP on outgoing TCP links\n is incompatible with using TPROXY to set client IP out outbound TCP links.\n When needing to contact peers use the no-tproxy cache_peer option and the\n client_dst_passthru directive re-enable normal forwarding such as this.\n \n Default:\n  Address selection is performed by the operating system.\n", "   TAG: host_verify_strict\n Regardless of this option setting, when dealing with intercepted\n traffic, Squid always verifies that the destination IP address matches\n the Host header domain or IP (called 'authority form URL').\n \n This enforcement is performed to satisfy a MUST-level requirement in\n RFC 2616 section 14.23: \"The Host field value MUST represent the naming\n authority of the origin server or gateway given by the original URL\".\n \n When set to ON:\n Squid always responds with an HTTP 409 (Conflict) error\n page and logs a security warning if there is no match.\n \n Squid verifies that the destination IP address matches\n the Host header for forward-proxy and reverse-proxy traffic\n as well. For those traffic types, Squid also enables the\n following checks, comparing the corresponding Host header\n and Request-URI components:\n \n  * The host names (domain or IP) must be identical,\n    but valueless or missing Host header disables all checks.\n    For the two host names to match, both must be either IP\n    or FQDN.\n \n  * Port numbers must be identical, but if a port is missing\n    the scheme-default port is assumed.\n \n \n When set to OFF (the default):\n Squid allows suspicious requests to continue but logs a\n security warning and blocks caching of the response.\n \n  * Forward-proxy traffic is not checked at all.\n \n  * Reverse-proxy traffic is not checked at all.\n \n  * Intercepted traffic which passes verification is handled\n    according to client_dst_passthru.\n \n  * Intercepted requests which fail verification are sent\n    to the client original destination instead of DIRECT.\n    This overrides 'client_dst_passthru off'.\n \n For now suspicious intercepted CONNECT requests are always\n responded to with an HTTP 409 (Conflict) error page.\n \n \n SECURITY NOTE:\n \n As described in CVE-2009-0801 when the Host: header alone is used\n to determine the destination of a request it becomes trivial for\n malicious scripts on remote websites to bypass browser same-origin\n security policy and sandboxing protections.\n \n The cause of this is that such applets are allowed to perform their\n own HTTP stack, in which case the same-origin policy of the browser\n sandbox only verifies that the applet tries to contact the same IP\n as from where it was loaded at the IP level. The Host: header may\n be different from the connected IP and approved origin.\n \n Default:\n  host_verify_strict off\n", "   TAG: client_dst_passthru\n With NAT or TPROXY intercepted traffic Squid may pass the request\n directly to the original client destination IP or seek a faster\n source using the HTTP Host header.\n \n Using Host to locate alternative servers can provide faster\n connectivity with a range of failure recovery options.\n But can also lead to connectivity trouble when the client and\n server are attempting stateful interactions unaware of the proxy.\n \n This option (on by default) prevents alternative DNS entries being\n located to send intercepted traffic DIRECT to an origin server.\n The clients original destination IP and port will be used instead.\n \n Regardless of this option setting, when dealing with intercepted\n traffic Squid will verify the Host: header and any traffic which\n fails Host verification will be treated as if this option were ON.\n \n see host_verify_strict for details on the verification process.\n Default:\n  client_dst_passthru on\n", "   TAG: ssl_unclean_shutdown\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n Some browsers (especially MSIE) bugs out on SSL shutdown\n messages.\n Default:\n  ssl_unclean_shutdown off\n", "   TAG: ssl_engine\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n The OpenSSL engine to use. You will need to set this if you\n would like to use hardware SSL acceleration for example.\n Default:\n  none\n", "   TAG: sslproxy_client_certificate\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n Client SSL Certificate to use when proxying https:// URLs\n Default:\n  none\n", "   TAG: sslproxy_client_key\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n Client SSL Key to use when proxying https:// URLs\n Default:\n  none\n", "   TAG: sslproxy_version\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n SSL version level to use when proxying https:// URLs\n \n The versions of SSL/TLS supported:\n \n     1automatic (default)\n     2SSLv2 only\n     3SSLv3 only\n     4TLSv1.0 only\n     5TLSv1.1 only\n     6TLSv1.2 only\n Default:\n  automatic SSL/TLS version negotiation\n", "   TAG: sslproxy_options\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n Colon (:) or comma (,) separated list of SSL implementation options\n to use when proxying https:// URLs\n \n The most important being:\n \n     NO_SSLv2    Disallow the use of SSLv2\n     NO_SSLv3    Disallow the use of SSLv3\n     NO_TLSv1    Disallow the use of TLSv1.0\n     NO_TLSv1_1  Disallow the use of TLSv1.1\n     NO_TLSv1_2  Disallow the use of TLSv1.2\n     SINGLE_DH_USE\n       Always create a new key when using temporary/ephemeral\n       DH key exchanges\n     SSL_OP_NO_TICKET\n       Disable use of RFC5077 session tickets. Some servers\n       may have problems understanding the TLS extension due\n       to ambiguous specification in RFC4507.\n     ALL       Enable various bug workarounds suggested as \"harmless\"\n       by OpenSSL. Be warned that this may reduce SSL/TLS\n       strength to some attacks.\n \n See the OpenSSL SSL_CTX_set_options documentation for a\n complete list of possible options.\n \n WARNING: This directive takes a single token. If a space is used\n  the value(s) after that space are SILENTLY IGNORED.\n Default:\n  none\n", "   TAG: sslproxy_cipher\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n SSL cipher list to use when proxying https:// URLs\n \n Colon separated list of supported ciphers.\n Default:\n  none\n", "   TAG: sslproxy_cafile\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n file containing CA certificates to use when verifying server\n certificates while proxying https:// URLs\n Default:\n  none\n", "   TAG: sslproxy_capath\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n directory containing CA certificates to use when verifying\n server certificates while proxying https:// URLs\n Default:\n  none\n", "   TAG: sslproxy_session_ttl\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n Sets the timeout value for SSL sessions\n Default:\n  sslproxy_session_ttl 300\n", "   TAG: sslproxy_session_cache_size\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n         Sets the cache size to use for ssl session\n Default:\n  sslproxy_session_cache_size 2 MB\n", "   TAG: sslproxy_cert_sign_hash\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n Sets the hashing algorithm to use when signing generated certificates.\n Valid algorithm names depend on the OpenSSL library used. The following\n names are usually available: sha1, sha256, sha512, and md5. Please see\n your OpenSSL library manual for the available hashes. By default, Squids\n that support this option use sha256 hashes.\n \n Squid does not forcefully purge cached certificates that were generated\n with an algorithm other than the currently configured one. They remain\n in the cache, subject to the regular cache eviction policy, and become\n useful if the algorithm changes again.\n Default:\n  none\n", "   TAG: ssl_bump\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n This option is consulted when a CONNECT request is received on\n an http_port (or a new connection is intercepted at an\n https_port), provided that port was configured with an ssl-bump\n flag. The subsequent data on the connection is either treated as\n HTTPS and decrypted OR tunneled at TCP level without decryption,\n depending on the first matching bumping \"action\".\n \n ssl_bump <action> [!]acl ...\n \n The following bumping actions are currently supported:\n \n     splice\n Become a TCP tunnel without decrypting proxied traffic.\n This is the default action.\n \n     bump\n Establish a secure connection with the server and, using a\n mimicked server certificate, with the client.\n \n     peek\n Receive client (step SslBump1) or server (step SslBump2)\n certificate while preserving the possibility of splicing the\n connection. Peeking at the server certificate (during step 2)\n usually precludes bumping of the connection at step 3.\n \n     stare\n Receive client (step SslBump1) or server (step SslBump2)\n certificate while preserving the possibility of bumping the\n connection. Staring at the server certificate (during step 2)\n usually precludes splicing of the connection at step 3.\n \n     terminate\n Close client and server connections.\n \n Backward compatibility actions available at step SslBump1:\n \n     client-first\n Bump the connection. Establish a secure connection with the\n client first, then connect to the server. This old mode does\n not allow Squid to mimic server SSL certificate and does not\n work with intercepted SSL connections.\n \n     server-first\n Bump the connection. Establish a secure connection with the\n server first, then establish a secure connection with the\n client, using a mimicked server certificate. Works with both\n CONNECT requests and intercepted SSL connections, but does\n not allow to make decisions based on SSL handshake info.\n \n     peek-and-splice\n Decide whether to bump or splice the connection based on \n client-to-squid and server-to-squid SSL hello messages.\n XXX: Remove.\n \n     none\n Same as the \"splice\" action.\n \n All ssl_bump rules are evaluated at each of the supported bumping\n steps.  Rules with actions that are impossible at the current step are\n ignored. The first matching ssl_bump action wins and is applied at the\n end of the current step. If no rules match, the splice action is used.\n See the at_step ACL for a list of the supported SslBump steps.\n \n This clause supports both fast and slow acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n \n See also: http_port ssl-bump, https_port ssl-bump, and acl at_step.\n \n \n   Example: Bump all requests except those originating from\n   localhost or those going to example.com.\n \n acl broken_sites dstdomain .example.com\n ssl_bump splice localhost\n ssl_bump splice broken_sites\n ssl_bump bump all\n Default:\n  Become a TCP tunnel without decrypting proxied traffic.\n", "   TAG: sslproxy_flags\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n Various flags modifying the use of SSL while proxying https:// URLs:\n     DONT_VERIFY_PEERAccept certificates that fail verification.\n For refined control, see sslproxy_cert_error.\n     NO_DEFAULT_CADon't use the default CA list built in\n to OpenSSL.\n Default:\n  none\n", "   TAG: sslproxy_cert_error\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n Use this ACL to bypass server certificate validation errors.\n \n For example, the following lines will bypass all validation errors\n when talking to servers for example.com. All other\n validation errors will result in ERR_SECURE_CONNECT_FAIL error.\n \n acl BrokenButTrustedServers dstdomain example.com\n sslproxy_cert_error allow BrokenButTrustedServers\n sslproxy_cert_error deny all\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Using slow acl types may result in server crashes\n \n Without this option, all server certificate validation errors\n terminate the transaction to protect Squid and the client.\n \n SQUID_X509_V_ERR_INFINITE_VALIDATION error cannot be bypassed\n but should not happen unless your OpenSSL library is buggy.\n \n SECURITY WARNING:\n Bypassing validation errors is dangerous because an\n error usually implies that the server cannot be trusted\n and the connection may be insecure.\n \n See also: sslproxy_flags and DONT_VERIFY_PEER.\n Default:\n  Server certificate errors terminate the transaction.\n", "   TAG: sslproxy_cert_sign\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n \n         sslproxy_cert_sign <signing algorithm> acl ...\n \n         The following certificate signing algorithms are supported:\n \n    signTrusted\n Sign using the configured CA certificate which is usually\n placed in and trusted by end-user browsers. This is the\n default for trusted origin server certificates.\n \n    signUntrusted\n Sign to guarantee an X509_V_ERR_CERT_UNTRUSTED browser error.\n This is the default for untrusted origin server certificates\n that are not self-signed (see ssl::certUntrusted).\n \n    signSelf\n Sign using a self-signed certificate with the right CN to\n generate a X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT error in the\n browser. This is the default for self-signed origin server\n certificates (see ssl::certSelfSigned).\n \n This clause only supports fast acl types.\n \n When sslproxy_cert_sign acl(s) match, Squid uses the corresponding\n signing algorithm to generate the certificate and ignores all\n subsequent sslproxy_cert_sign options (the first match wins). If no\n acl(s) match, the default signing algorithm is determined by errors\n detected when obtaining and validating the origin server certificate.\n \n WARNING: SQUID_X509_V_ERR_DOMAIN_MISMATCH and ssl:certDomainMismatch can\n be used with sslproxy_cert_adapt, but if and only if Squid is bumping a\n CONNECT request that carries a domain name. In all other cases (CONNECT\n to an IP address or an intercepted SSL connection), Squid cannot detect\n the domain mismatch at certificate generation time when\n bump-server-first is used.\n Default:\n  none\n", "   TAG: sslproxy_cert_adapt\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n \n sslproxy_cert_adapt <adaptation algorithm> acl ...\n \n The following certificate adaptation algorithms are supported:\n \n    setValidAfter\n Sets the \"Not After\" property to the \"Not After\" property of\n the CA certificate used to sign generated certificates.\n \n    setValidBefore\n Sets the \"Not Before\" property to the \"Not Before\" property of\n the CA certificate used to sign generated certificates.\n \n    setCommonName or setCommonName{CN}\n Sets Subject.CN property to the host name specified as a \n CN parameter or, if no explicit CN parameter was specified,\n extracted from the CONNECT request. It is a misconfiguration\n to use setCommonName without an explicit parameter for\n intercepted or tproxied SSL connections.\n \n This clause only supports fast acl types.\n \n Squid first groups sslproxy_cert_adapt options by adaptation algorithm.\n Within a group, when sslproxy_cert_adapt acl(s) match, Squid uses the\n corresponding adaptation algorithm to generate the certificate and\n ignores all subsequent sslproxy_cert_adapt options in that algorithm's\n group (i.e., the first match wins within each algorithm group). If no\n acl(s) match, the default mimicking action takes place.\n \n WARNING: SQUID_X509_V_ERR_DOMAIN_MISMATCH and ssl:certDomainMismatch can\n be used with sslproxy_cert_adapt, but if and only if Squid is bumping a\n CONNECT request that carries a domain name. In all other cases (CONNECT\n to an IP address or an intercepted SSL connection), Squid cannot detect\n the domain mismatch at certificate generation time when\n bump-server-first is used.\n Default:\n  none\n", "   TAG: sslpassword_program\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n Specify a program used for entering SSL key passphrases\n when using encrypted SSL certificate keys. If not specified\n keys must either be unencrypted, or Squid started with the -N\n option to allow it to query interactively for the passphrase.\n \n The key file name is given as argument to the program allowing\n selection of the right password if you have multiple encrypted\n keys.\n Default:\n  none\n", "   TAG: sslcrtd_program\n  Note: This option is only available if Squid is rebuilt with the\n        --enable-ssl-crtd\n \n Specify the location and options of the executable for ssl_crtd process.\n /usr/lib/squid/ssl_crtd program requires -s and -M parameters\n For more information use:\n /usr/lib/squid/ssl_crtd -h\n Default:\n  sslcrtd_program /usr/lib/squid/ssl_crtd -s /var/lib/ssl_db -M 4MB\n", "   TAG: sslcrtd_children\n  Note: This option is only available if Squid is rebuilt with the\n        --enable-ssl-crtd\n \n The maximum number of processes spawn to service ssl server.\n The maximum this may be safely set to is 32.\n \n The startup= and idle= options allow some measure of skew in your\n tuning.\n \n startup=N\n \n Sets the minimum number of processes to spawn when Squid\n starts or reconfigures. When set to zero the first request will\n cause spawning of the first child process to handle it.\n \n Starting too few children temporary slows Squid under load while it\n tries to spawn enough additional processes to cope with traffic.\n \n idle=N\n \n Sets a minimum of how many processes Squid is to try and keep available\n at all times. When traffic begins to rise above what the existing\n processes can handle this many more will be spawned up to the maximum\n configured. A minimum setting of 1 is required.\n \n You must have at least one ssl_crtd process.\n Default:\n  sslcrtd_children 32 startup=5 idle=1\n", "   TAG: sslcrtvalidator_program\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n Specify the location and options of the executable for ssl_crt_validator\n process.\n \n Usage:  sslcrtvalidator_program [ttl=n] [cache=n] path ...\n \n Options:\n   ttl=n         TTL in seconds for cached results. The default is 60 secs\n   cache=n       limit the result cache size. The default value is 2048\n Default:\n  none\n", "   TAG: sslcrtvalidator_children\n  Note: This option is only available if Squid is rebuilt with the\n        --with-openssl\n \n The maximum number of processes spawn to service SSL server.\n The maximum this may be safely set to is 32.\n \n The startup= and idle= options allow some measure of skew in your\n tuning.\n \n startup=N\n \n Sets the minimum number of processes to spawn when Squid\n starts or reconfigures. When set to zero the first request will\n cause spawning of the first child process to handle it.\n \n Starting too few children temporary slows Squid under load while it\n tries to spawn enough additional processes to cope with traffic.\n \n idle=N\n \n Sets a minimum of how many processes Squid is to try and keep available\n at all times. When traffic begins to rise above what the existing\n processes can handle this many more will be spawned up to the maximum\n configured. A minimum setting of 1 is required.\n \n concurrency=\n \n The number of requests each certificate validator helper can handle in\n parallel. A value of 0 indicates the certficate validator does not\n support concurrency. Defaults to 1.\n \n When this directive is set to a value >= 1 then the protocol\n used to communicate with the helper is modified to include\n a request ID in front of the request/response. The request\n ID from the request must be echoed back with the response\n to that request.\n \n You must have at least one ssl_crt_validator process.\n Default:\n  sslcrtvalidator_children 32 startup=5 idle=1 concurrency=1\n", "   TAG: cache_peer\n To specify other caches in a hierarchy, use the format:\n \n cache_peer hostname type http-port icp-port [options]\n \n For example,\n \n                                          proxy  icp\n            hostname             type     port   port  options\n            -------------------- -------- ----- -----  -----------\n cache_peer parent.foo.net       parent    3128  3130  default\n cache_peer sib1.foo.net         sibling   3128  3130  proxy-only\n cache_peer sib2.foo.net         sibling   3128  3130  proxy-only\n cache_peer example.com          parent    80       0  default\n cache_peer cdn.example.com      sibling   3128     0  \n \n       type:either 'parent', 'sibling', or 'multicast'.\n \n proxy-port:The port number where the peer accept HTTP requests.\n For other Squid proxies this is usually 3128\n For web servers this is usually 80\n \n   icp-port:Used for querying neighbor caches about objects.\n Set to 0 if the peer does not support ICP or HTCP.\n See ICP and HTCP options below for additional details.\n \n \n ==== ICP OPTIONS ====\n \n You MUST also set icp_port and icp_access explicitly when using these options.\n The defaults will prevent peer traffic using ICP.\n \n \n no-queryDisable ICP queries to this neighbor.\n \n multicast-responder\n Indicates the named peer is a member of a multicast group.\n ICP queries will not be sent directly to the peer, but ICP\n replies will be accepted from it.\n \n closest-onlyIndicates that, for ICP_OP_MISS replies, we'll only forward\n CLOSEST_PARENT_MISSes and never FIRST_PARENT_MISSes.\n \n background-ping\n To only send ICP queries to this neighbor infrequently.\n This is used to keep the neighbor round trip time updated\n and is usually used in conjunction with weighted-round-robin.\n \n \n ==== HTCP OPTIONS ====\n \n You MUST also set htcp_port and htcp_access explicitly when using these options.\n The defaults will prevent peer traffic using HTCP.\n \n \n htcpSend HTCP, instead of ICP, queries to the neighbor.\n You probably also want to set the \"icp-port\" to 4827\n instead of 3130. This directive accepts a comma separated\n list of options described below.\n \n htcp=oldsquidSend HTCP to old Squid versions (2.5 or earlier).\n \n htcp=no-clrSend HTCP to the neighbor but without\n sending any CLR requests.  This cannot be used with\n only-clr.\n \n htcp=only-clrSend HTCP to the neighbor but ONLY CLR requests.\n This cannot be used with no-clr.\n \n htcp=no-purge-clr\n Send HTCP to the neighbor including CLRs but only when\n they do not result from PURGE requests.\n \n htcp=forward-clr\n Forward any HTCP CLR requests this proxy receives to the peer.\n \n \n ==== PEER SELECTION METHODS ====\n \n The default peer selection method is ICP, with the first responding peer\n being used as source. These options can be used for better load balancing.\n \n \n defaultThis is a parent cache which can be used as a \"last-resort\"\n if a peer cannot be located by any of the peer-selection methods.\n If specified more than once, only the first is used.\n \n round-robinLoad-Balance parents which should be used in a round-robin\n fashion in the absence of any ICP queries.\n weight=N can be used to add bias.\n \n weighted-round-robin\n Load-Balance parents which should be used in a round-robin\n fashion with the frequency of each parent being based on the\n round trip time. Closer parents are used more often.\n Usually used for background-ping parents.\n weight=N can be used to add bias.\n \n carpLoad-Balance parents which should be used as a CARP array.\n The requests will be distributed among the parents based on the\n CARP load balancing hash function based on their weight.\n \n userhashLoad-balance parents based on the client proxy_auth or ident username.\n \n sourcehashLoad-balance parents based on the client source IP.\n \n multicast-siblings\n To be used only for cache peers of type \"multicast\".\n ALL members of this multicast group have \"sibling\"\n relationship with it, not \"parent\".  This is to a multicast\n group when the requested object would be fetched only from\n a \"parent\" cache, anyway.  It's useful, e.g., when\n configuring a pool of redundant Squid proxies, being\n members of the same multicast group.\n \n \n ==== PEER SELECTION OPTIONS ====\n \n weight=Nuse to affect the selection of a peer during any weighted\n peer-selection mechanisms.\n The weight must be an integer; default is 1,\n larger weights are favored more.\n This option does not affect parent selection if a peering\n protocol is not in use.\n \n basetime=NSpecify a base amount to be subtracted from round trip\n times of parents.\n It is subtracted before division by weight in calculating\n which parent to fectch from. If the rtt is less than the\n base time the rtt is set to a minimal value.\n \n ttl=NSpecify a TTL to use when sending multicast ICP queries\n to this address.\n Only useful when sending to a multicast group.\n Because we don't accept ICP replies from random\n hosts, you must configure other group members as\n peers with the 'multicast-responder' option.\n \n no-delayTo prevent access to this neighbor from influencing the\n delay pools.\n \n digest-url=URLTell Squid to fetch the cache digest (if digests are\n enabled) for this host from the specified URL rather\n than the Squid default location.\n \n \n ==== CARP OPTIONS ====\n \n carp-key=key-specification\n use a different key than the full URL to hash against the peer.\n the key-specification is a comma-separated list of the keywords\n scheme, host, port, path, params\n Order is not important.\n \n ==== ACCELERATOR / REVERSE-PROXY OPTIONS ====\n \n originserverCauses this parent to be contacted as an origin server.\n Meant to be used in accelerator setups when the peer\n is a web server.\n \n forceddomain=name\n Set the Host header of requests forwarded to this peer.\n Useful in accelerator setups where the server (peer)\n expects a certain domain name but clients may request\n others. ie example.com or www.example.com\n \n no-digestDisable request of cache digests.\n \n no-netdb-exchange\n Disables requesting ICMP RTT database (NetDB).\n \n \n ==== AUTHENTICATION OPTIONS ====\n \n login=user:password\n If this is a personal/workgroup proxy and your parent\n requires proxy authentication.\n \n Note: The string can include URL escapes (i.e. %20 for\n spaces). This also means % must be written as %%.\n \n login=PASSTHRU\n Send login details received from client to this peer.\n Both Proxy- and WWW-Authorization headers are passed\n without alteration to the peer.\n Authentication is not required by Squid for this to work.\n \n Note: This will pass any form of authentication but\n only Basic auth will work through a proxy unless the\n connection-auth options are also used.\n \n login=PASSSend login details received from client to this peer.\n Authentication is not required by this option.\n \n If there are no client-provided authentication headers\n to pass on, but username and password are available\n from an external ACL user= and password= result tags\n they may be sent instead.\n \n Note: To combine this with proxy_auth both proxies must\n share the same user database as HTTP only allows for\n a single login (one for proxy, one for origin server).\n Also be warned this will expose your users proxy\n password to the peer. USE WITH CAUTION\n \n login=*:password\n Send the username to the upstream cache, but with a\n fixed password. This is meant to be used when the peer\n is in another administrative domain, but it is still\n needed to identify each user.\n The star can optionally be followed by some extra\n information which is added to the username. This can\n be used to identify this proxy to the peer, similar to\n the login=username:password option above.\n \n login=NEGOTIATE\n If this is a personal/workgroup proxy and your parent\n requires a secure proxy authentication.\n The first principal from the default keytab or defined by\n the environment variable KRB5_KTNAME will be used. \n \n WARNING: The connection may transmit requests from multiple\n clients. Negotiate often assumes end-to-end authentication\n and a single-client. Which is not strictly true here.\n \n login=NEGOTIATE:principal_name\n If this is a personal/workgroup proxy and your parent\n requires a secure proxy authentication. \n The principal principal_name from the default keytab or\n defined by the environment variable KRB5_KTNAME will be\n used.\n \n WARNING: The connection may transmit requests from multiple\n clients. Negotiate often assumes end-to-end authentication\n and a single-client. Which is not strictly true here.\n \n connection-auth=on|off\n Tell Squid that this peer does or not support Microsoft\n connection oriented authentication, and any such\n challenges received from there should be ignored.\n Default is auto to automatically determine the status\n of the peer.\n \n \n ==== SSL / HTTPS / TLS OPTIONS ====\n \n sslEncrypt connections to this peer with SSL/TLS.\n \n sslcert=/path/to/ssl/certificate\n A client SSL certificate to use when connecting to\n this peer.\n \n sslkey=/path/to/ssl/key\n The private SSL key corresponding to sslcert above.\n If 'sslkey' is not specified 'sslcert' is assumed to\n reference a combined file containing both the\n certificate and the key.\n \n Notes:\n \n On Debian/Ubuntu systems a default snakeoil certificate is\n     available in /etc/ssl and users can set:\n \n cert=/etc/ssl/certs/ssl-cert-snakeoil.pem\n \n and\n \n key=/etc/ssl/private/ssl-cert-snakeoil.key\n \n for testing.\n \n sslversion=1|2|3|4|5|6\n The SSL version to use when connecting to this peer\n 1 = automatic (default)\n 2 = SSL v2 only\n 3 = SSL v3 only\n 4 = TLS v1.0 only\n 5 = TLS v1.1 only\n 6 = TLS v1.2 only\n \n sslcipher=...The list of valid SSL ciphers to use when connecting\n to this peer.\n \n ssloptions=... Specify various SSL implementation options:\n \n     NO_SSLv2    Disallow the use of SSLv2\n     NO_SSLv3    Disallow the use of SSLv3\n     NO_TLSv1    Disallow the use of TLSv1.0\n     NO_TLSv1_1  Disallow the use of TLSv1.1\n     NO_TLSv1_2  Disallow the use of TLSv1.2\n     SINGLE_DH_USE\n       Always create a new key when using\n       temporary/ephemeral DH key exchanges\n     ALL       Enable various bug workarounds\n       suggested as \"harmless\" by OpenSSL\n       Be warned that this reduces SSL/TLS\n       strength to some attacks.\n \n See the OpenSSL SSL_CTX_set_options documentation for a\n more complete list.\n \n sslcafile=... A file containing additional CA certificates to use\n when verifying the peer certificate.\n \n sslcapath=...A directory containing additional CA certificates to\n use when verifying the peer certificate.\n \n sslcrlfile=... A certificate revocation list file to use when\n verifying the peer certificate.\n \n sslflags=...Specify various flags modifying the SSL implementation:\n \n DONT_VERIFY_PEER\n Accept certificates even if they fail to\n verify.\n NO_DEFAULT_CA\n Don't use the default CA list built in\n to OpenSSL.\n DONT_VERIFY_DOMAIN\n Don't verify the peer certificate\n matches the server name\n \n ssldomain= The peer name as advertised in it's certificate.\n Used for verifying the correctness of the received peer\n certificate. If not specified the peer hostname will be\n used.\n \n front-end-https\n Enable the \"Front-End-Https: On\" header needed when\n using Squid as a SSL frontend in front of Microsoft OWA.\n See MS KB document Q307347 for details on this header.\n If set to auto the header will only be added if the\n request is forwarded as a https:// URL.\n \n \n ==== GENERAL OPTIONS ====\n \n connect-timeout=N\n A peer-specific connect timeout.\n Also see the peer_connect_timeout directive.\n \n connect-fail-limit=N\n How many times connecting to a peer must fail before\n it is marked as down. Standby connection failures\n count towards this limit. Default is 10.\n \n allow-missDisable Squid's use of only-if-cached when forwarding\n requests to siblings. This is primarily useful when\n icp_hit_stale is used by the sibling. Excessive use\n of this option may result in forwarding loops. One way\n to prevent peering loops when using this option, is to\n deny cache peer usage on requests from a peer:\n acl fromPeer ...\n cache_peer_access peerName deny fromPeer\n \n max-conn=N Limit the number of concurrent connections the Squid\n may open to this peer, including already opened idle\n and standby connections. There is no peer-specific\n connection limit by default.\n \n A peer exceeding the limit is not used for new\n requests unless a standby connection is available.\n \n max-conn currently works poorly with idle persistent\n connections: When a peer reaches its max-conn limit,\n and there are idle persistent connections to the peer,\n the peer may not be selected because the limiting code\n does not know whether Squid can reuse those idle\n connections.\n \n standby=NMaintain a pool of N \"hot standby\" connections to an\n UP peer, available for requests when no idle\n persistent connection is available (or safe) to use.\n By default and with zero N, no such pool is maintained.\n N must not exceed the max-conn limit (if any).\n \n At start or after reconfiguration, Squid opens new TCP\n standby connections until there are N connections\n available and then replenishes the standby pool as\n opened connections are used up for requests. A used\n connection never goes back to the standby pool, but\n may go to the regular idle persistent connection pool\n shared by all peers and origin servers.\n \n Squid never opens multiple new standby connections\n concurrently.  This one-at-a-time approach minimizes\n flooding-like effect on peers. Furthermore, just a few\n standby connections should be sufficient in most cases\n to supply most new requests with a ready-to-use\n connection.\n \n Standby connections obey server_idle_pconn_timeout.\n For the feature to work as intended, the peer must be\n configured to accept and keep them open longer than\n the idle timeout at the connecting Squid, to minimize\n race conditions typical to idle used persistent\n connections. Default request_timeout and\n server_idle_pconn_timeout values ensure such a\n configuration.\n \n name=xxxUnique name for the peer.\n Required if you have multiple peers on the same host\n but different ports.\n This name can be used in cache_peer_access and similar\n directives to identify the peer.\n Can be used by outgoing access controls through the\n peername ACL type.\n \n no-tproxyDo not use the client-spoof TPROXY support when forwarding\n requests to this peer. Use normal address selection instead.\n This overrides the spoof_client_ip ACL.\n \n proxy-onlyobjects fetched from the peer will not be stored locally.\n \n Default:\n  none\n", "   TAG: cache_peer_domain\n Use to limit the domains for which a neighbor cache will be\n queried.\n \n Usage:\n cache_peer_domain cache-host domain [domain ...]\n cache_peer_domain cache-host !domain\n \n For example, specifying\n \n cache_peer_domain parent.foo.net.edu\n \n has the effect such that UDP query packets are sent to\n 'bigserver' only when the requested object exists on a\n server in the .edu domain.  Prefixing the domainname\n with '!' means the cache will be queried for objects\n NOT in that domain.\n \n NOTE:* Any number of domains may be given for a cache-host,\n   either on the same or separate lines.\n * When multiple domains are given for a particular\n   cache-host, the first matched domain is applied.\n * Cache hosts with no domain restrictions are queried\n   for all requests.\n * There are no defaults.\n * There is also a 'cache_peer_access' tag in the ACL\n   section.\n Default:\n  none\n", "   TAG: cache_peer_access\n Restricts usage of cache_peer proxies.\n \n Usage:\n cache_peer_access peer-name allow|deny [!]aclname ...\n \n For the required peer-name parameter, use either the value of the\n cache_peer name=value parameter or, if name=value is missing, the\n cache_peer hostname parameter.\n \n This directive narrows down the selection of peering candidates, but\n does not determine the order in which the selected candidates are\n contacted. That order is determined by the peer selection algorithms\n (see PEER SELECTION sections in the cache_peer documentation).\n \n If a deny rule matches, the corresponding peer will not be contacted\n for the current transaction -- Squid will not send ICP queries and\n will not forward HTTP requests to that peer. An allow match leaves\n the corresponding peer in the selection. The first match for a given\n peer wins for that peer.\n \n The relative order of cache_peer_access directives for the same peer\n matters. The relative order of any two cache_peer_access directives\n for different peers does not matter. To ease interpretation, it is a\n good idea to group cache_peer_access directives for the same peer\n together.\n \n A single cache_peer_access directive may be evaluated multiple times\n for a given transaction because individual peer selection algorithms\n may check it independently from each other. These redundant checks\n may be optimized away in future Squid versions.\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Default:\n  No peer usage restrictions.\n", "   TAG: neighbor_type_domain\n Modify the cache_peer neighbor type when passing requests\n about specific domains to the peer.\n \n Usage:\n  neighbor_type_domain neighbor parent|sibling domain domain ...\n \n For example:\n cache_peer foo.example.com parent 3128 3130\n neighbor_type_domain foo.example.com sibling .au .de\n \n The above configuration treats all requests to foo.example.com as a\n parent proxy unless the request is for a .au or .de ccTLD domain name.\n Default:\n  The peer type from cache_peer directive is used for all requests to that peer.\n", "   TAG: dead_peer_timeout(seconds)\n This controls how long Squid waits to declare a peer cache\n as \"dead.\"  If there are no ICP replies received in this\n amount of time, Squid will declare the peer dead and not\n expect to receive any further ICP replies.  However, it\n continues to send ICP queries, and will mark the peer as\n alive upon receipt of the first subsequent ICP reply.\n \n This timeout also affects when Squid expects to receive ICP\n replies from peers.  If more than 'dead_peer' seconds have\n passed since the last ICP reply was received, Squid will not\n expect to receive an ICP reply on the next query.  Thus, if\n your time between requests is greater than this timeout, you\n will see a lot of requests sent DIRECT to origin servers\n instead of to your parents.\n Default:\n  dead_peer_timeout 10 seconds\n", "   TAG: forward_max_tries\n Controls how many different forward paths Squid will try\n before giving up. See also forward_timeout.\n \n NOTE: connect_retries (default: none) can make each of these\n possible forwarding paths be tried multiple times.\n Default:\n  forward_max_tries 25\n", "   TAG: cache_mem(bytes)\n NOTE: THIS PARAMETER DOES NOT SPECIFY THE MAXIMUM PROCESS SIZE.\n IT ONLY PLACES A LIMIT ON HOW MUCH ADDITIONAL MEMORY SQUID WILL\n USE AS A MEMORY CACHE OF OBJECTS. SQUID USES MEMORY FOR OTHER\n THINGS AS WELL. SEE THE SQUID FAQ SECTION 8 FOR DETAILS.\n \n 'cache_mem' specifies the ideal amount of memory to be used\n for:\n * In-Transit objects\n * Hot Objects\n * Negative-Cached objects\n \n Data for these objects are stored in 4 KB blocks.  This\n parameter specifies the ideal upper limit on the total size of\n 4 KB blocks allocated.  In-Transit objects take the highest\n priority.\n \n In-transit objects have priority over the others.  When\n additional space is needed for incoming data, negative-cached\n and hot objects will be released.  In other words, the\n negative-cached and hot objects will fill up any unused space\n not needed for in-transit objects.\n \n If circumstances require, this limit will be exceeded.\n Specifically, if your incoming request rate requires more than\n 'cache_mem' of memory to hold in-transit objects, Squid will\n exceed this limit to satisfy the new requests.  When the load\n decreases, blocks will be freed until the high-water mark is\n reached.  Thereafter, blocks will be used to store hot\n objects.\n \n If shared memory caching is enabled, Squid does not use the shared\n cache space for in-transit objects, but they still consume as much\n local memory as they need. For more details about the shared memory\n cache, see memory_cache_shared.\n Default:\n  cache_mem 256 MB\n", "   TAG: maximum_object_size_in_memory(bytes)\n Objects greater than this size will not be attempted to kept in\n the memory cache. This should be set high enough to keep objects\n accessed frequently in memory to improve performance whilst low\n enough to keep larger objects from hoarding cache_mem.\n Default:\n  maximum_object_size_in_memory 512 KB\n", "   TAG: memory_cache_sharedon|off\n Controls whether the memory cache is shared among SMP workers.\n \n The shared memory cache is meant to occupy cache_mem bytes and replace\n the non-shared memory cache, although some entities may still be\n cached locally by workers for now (e.g., internal and in-transit\n objects may be served from a local memory cache even if shared memory\n caching is enabled).\n \n By default, the memory cache is shared if and only if all of the\n following conditions are satisfied: Squid runs in SMP mode with\n multiple workers, cache_mem is positive, and Squid environment\n supports required IPC primitives (e.g., POSIX shared memory segments\n and GCC-style atomic operations).\n \n To avoid blocking locks, shared memory uses opportunistic algorithms\n that do not guarantee that every cachable entity that could have been\n shared among SMP workers will actually be shared.\n \n Currently, entities exceeding 32KB in size cannot be shared.\n Default:\n  \"on\" where supported if doing memory caching with multiple SMP workers.\n", "   TAG: memory_cache_mode\n Controls which objects to keep in the memory cache (cache_mem)\n \n alwaysKeep most recently fetched objects in memory (default)\n \n diskOnly disk cache hits are kept in memory, which means\n an object must first be cached on disk and then hit\n a second time before cached in memory.\n \n networkOnly objects fetched from network is kept in memory\n Default:\n  Keep the most recently fetched objects in memory\n", "   TAG: memory_replacement_policy\n The memory replacement policy parameter determines which\n objects are purged from memory when memory space is needed.\n \n See cache_replacement_policy for details on algorithms.\n Default:\n  memory_replacement_policy lru\n", "   TAG: cache_replacement_policy\n The cache replacement policy parameter determines which\n objects are evicted (replaced) when disk space is needed.\n \n     lru       : Squid's original list based LRU policy\n     heap GDSF : Greedy-Dual Size Frequency\n     heap LFUDA: Least Frequently Used with Dynamic Aging\n     heap LRU  : LRU policy implemented using a heap\n \n Applies to any cache_dir lines listed below this directive.\n \n The LRU policies keeps recently referenced objects.\n \n The heap GDSF policy optimizes object hit rate by keeping smaller\n popular objects in cache so it has a better chance of getting a\n hit.  It achieves a lower byte hit rate than LFUDA though since\n it evicts larger (possibly popular) objects.\n \n The heap LFUDA policy keeps popular objects in cache regardless of\n their size and thus optimizes byte hit rate at the expense of\n hit rate since one large, popular object will prevent many\n smaller, slightly less popular objects from being cached.\n \n Both policies utilize a dynamic aging mechanism that prevents\n cache pollution that can otherwise occur with frequency-based\n replacement policies.\n \n NOTE: if using the LFUDA replacement policy you should increase\n the value of maximum_object_size above its default of 4 MB to\n to maximize the potential byte hit rate improvement of LFUDA.\n \n For more information about the GDSF and LFUDA cache replacement\n policies see http://www.hpl.hp.com/techreports/1999/HPL-1999-69.html\n and http://fog.hpl.external.hp.com/techreports/98/HPL-98-173.html.\n Default:\n  cache_replacement_policy lru\n", "   TAG: minimum_object_size(bytes)\n Objects smaller than this size will NOT be saved on disk.  The\n value is specified in bytes, and the default is 0 KB, which\n means all responses can be stored.\n Default:\n  no limit\n", "   TAG: maximum_object_size(bytes)\n Set the default value for max-size parameter on any cache_dir.\n The value is specified in bytes, and the default is 4 MB.\n \n If you wish to get a high BYTES hit ratio, you should probably\n increase this (one 32 MB object hit counts for 3200 10KB\n hits).\n \n If you wish to increase hit ratio more than you want to\n save bandwidth you should leave this low.\n \n NOTE: if using the LFUDA replacement policy you should increase\n this value to maximize the byte hit rate improvement of LFUDA!\n See cache_replacement_policy for a discussion of this policy.\n Default:\n  maximum_object_size 4 MB\n", "   TAG: cache_dir\n Format:\n cache_dir Type Directory-Name Fs-specific-data [options]\n \n You can specify multiple cache_dir lines to spread the\n cache among different disk partitions.\n \n Type specifies the kind of storage system to use. Only \"ufs\"\n is built by default. To enable any of the other storage systems\n see the --enable-storeio configure option.\n \n 'Directory' is a top-level directory where cache swap\n files will be stored.  If you want to use an entire disk\n for caching, this can be the mount-point directory.\n The directory must exist and be writable by the Squid\n process.  Squid will NOT create this directory for you.\n \n In SMP configurations, cache_dir must not precede the workers option\n and should use configuration macros or conditionals to give each\n worker interested in disk caching a dedicated cache directory.\n \n \n ====  The ufs store type  ====\n \n \"ufs\" is the old well-known Squid storage format that has always\n been there.\n \n Usage:\n cache_dir ufs Directory-Name Mbytes L1 L2 [options]\n \n 'Mbytes' is the amount of disk space (MB) to use under this\n directory.  The default is 100 MB.  Change this to suit your\n configuration.  Do NOT put the size of your disk drive here.\n Instead, if you want Squid to use the entire disk drive,\n subtract 20% and use that value.\n \n 'L1' is the number of first-level subdirectories which\n will be created under the 'Directory'.  The default is 16.\n \n 'L2' is the number of second-level subdirectories which\n will be created under each first-level directory.  The default\n is 256.\n \n \n ====  The aufs store type  ====\n \n \"aufs\" uses the same storage format as \"ufs\", utilizing\n POSIX-threads to avoid blocking the main Squid process on\n disk-I/O. This was formerly known in Squid as async-io.\n \n Usage:\n cache_dir aufs Directory-Name Mbytes L1 L2 [options]\n \n see argument descriptions under ufs above\n \n \n ====  The diskd store type  ====\n \n \"diskd\" uses the same storage format as \"ufs\", utilizing a\n separate process to avoid blocking the main Squid process on\n disk-I/O.\n \n Usage:\n cache_dir diskd Directory-Name Mbytes L1 L2 [options] [Q1=n] [Q2=n]\n \n see argument descriptions under ufs above\n \n Q1 specifies the number of unacknowledged I/O requests when Squid\n stops opening new files. If this many messages are in the queues,\n Squid won't open new files. Default is 64\n \n Q2 specifies the number of unacknowledged messages when Squid\n starts blocking.  If this many messages are in the queues,\n Squid blocks until it receives some replies. Default is 72\n \n When Q1 < Q2 (the default), the cache directory is optimized\n for lower response time at the expense of a decrease in hit\n ratio.  If Q1 > Q2, the cache directory is optimized for\n higher hit ratio at the expense of an increase in response\n time.\n \n \n ====  The rock store type  ====\n \n Usage:\n     cache_dir rock Directory-Name Mbytes [options]\n \n The Rock Store type is a database-style storage. All cached\n entries are stored in a \"database\" file, using fixed-size slots.\n A single entry occupies one or more slots.\n \n If possible, Squid using Rock Store creates a dedicated kid\n process called \"disker\" to avoid blocking Squid worker(s) on disk\n I/O. One disker kid is created for each rock cache_dir.  Diskers\n are created only when Squid, running in daemon mode, has support\n for the IpcIo disk I/O module.\n \n swap-timeout=msec: Squid will not start writing a miss to or\n reading a hit from disk if it estimates that the swap operation\n will take more than the specified number of milliseconds. By\n default and when set to zero, disables the disk I/O time limit\n enforcement. Ignored when using blocking I/O module because\n blocking synchronous I/O does not allow Squid to estimate the\n expected swap wait time.\n \n max-swap-rate=swaps/sec: Artificially limits disk access using\n the specified I/O rate limit. Swap out requests that\n would cause the average I/O rate to exceed the limit are\n delayed. Individual swap in requests (i.e., hits or reads) are\n not delayed, but they do contribute to measured swap rate and\n since they are placed in the same FIFO queue as swap out\n requests, they may wait longer if max-swap-rate is smaller.\n This is necessary on file systems that buffer \"too\n many\" writes and then start blocking Squid and other processes\n while committing those writes to disk.  Usually used together\n with swap-timeout to avoid excessive delays and queue overflows\n when disk demand exceeds available disk \"bandwidth\". By default\n and when set to zero, disables the disk I/O rate limit\n enforcement. Currently supported by IpcIo module only.\n \n slot-size=bytes: The size of a database \"record\" used for\n storing cached responses. A cached response occupies at least\n one slot and all database I/O is done using individual slots so\n increasing this parameter leads to more disk space waste while\n decreasing it leads to more disk I/O overheads. Should be a\n multiple of your operating system I/O page size. Defaults to\n 16KBytes. A housekeeping header is stored with each slot and\n smaller slot-sizes will be rejected. The header is smaller than\n 100 bytes.\n \n \n ==== COMMON OPTIONS ====\n \n no-storeno new objects should be stored to this cache_dir.\n \n min-size=nthe minimum object size in bytes this cache_dir\n will accept.  It's used to restrict a cache_dir\n to only store large objects (e.g. AUFS) while\n other stores are optimized for smaller objects\n (e.g. Rock).\n Defaults to 0.\n \n max-size=nthe maximum object size in bytes this cache_dir\n supports.\n The value in maximum_object_size directive sets\n the default unless more specific details are\n available (ie a small store capacity).\n \n Note: To make optimal use of the max-size limits you should order\n the cache_dir lines with the smallest max-size value first.\n \n Default:\n  No disk cache. Store cache ojects only in memory.\n", "   TAG: store_dir_select_algorithm\n How Squid selects which cache_dir to use when the response\n object will fit into more than one.\n \n Regardless of which algorithm is used the cache_dir min-size\n and max-size parameters are obeyed. As such they can affect\n the selection algorithm by limiting the set of considered\n cache_dir.\n \n Algorithms:\n \n least-load\n \n This algorithm is suited to caches with similar cache_dir\n sizes and disk speeds.\n \n The disk with the least I/O pending is selected.\n When there are multiple disks with the same I/O load ranking\n the cache_dir with most available capacity is selected.\n \n When a mix of cache_dir sizes are configured the faster disks\n have a naturally lower I/O loading and larger disks have more\n capacity. So space used to store objects and data throughput\n may be very unbalanced towards larger disks.\n \n \n round-robin\n \n This algorithm is suited to caches with unequal cache_dir\n disk sizes.\n \n Each cache_dir is selected in a rotation. The next suitable\n cache_dir is used.\n \n Available cache_dir capacity is only considered in relation\n to whether the object will fit and meets the min-size and\n max-size parameters.\n \n Disk I/O loading is only considered to prevent overload on slow\n disks. This algorithm does not spread objects by size, so any\n I/O loading per-disk may appear very unbalanced and volatile.\n \n If several cache_dirs use similar min-size, max-size, or other\n limits to to reject certain responses, then do not group such\n cache_dir lines together, to avoid round-robin selection bias\n towards the first cache_dir after the group. Instead, interleave\n cache_dir lines from different groups. For example:\n \n store_dir_select_algorithm round-robin\n cache_dir rock /hdd1 ... min-size=100000\n cache_dir rock /ssd1 ... max-size=99999\n cache_dir rock /hdd2 ... min-size=100000\n cache_dir rock /ssd2 ... max-size=99999\n cache_dir rock /hdd3 ... min-size=100000\n cache_dir rock /ssd3 ... max-size=99999\n Default:\n  store_dir_select_algorithm least-load\n", "   TAG: max_open_disk_fds\n To avoid having disk as the I/O bottleneck Squid can optionally\n bypass the on-disk cache if more than this amount of disk file\n descriptors are open.\n \n A value of 0 indicates no limit.\n Default:\n  no limit\n", "   TAG: cache_swap_low(percent, 0-100)\n The low-water mark for AUFS/UFS/diskd cache object eviction by\n the cache_replacement_policy algorithm.\n \n Removal begins when the swap (disk) usage of a cache_dir is\n above this low-water mark and attempts to maintain utilization\n near the low-water mark.\n \n As swap utilization increases towards the high-water mark set\n by cache_swap_high object eviction becomes more agressive.\n \n The value difference in percentages between low- and high-water\n marks represent an eviction rate of 300 objects per second and\n the rate continues to scale in agressiveness by multiples of\n this above the high-water mark.\n \n Defaults are 90% and 95%. If you have a large cache, 5% could be\n hundreds of MB. If this is the case you may wish to set these\n numbers closer together.\n \n See also cache_swap_high and cache_replacement_policy\n Default:\n  cache_swap_low 90\n", "   TAG: cache_swap_high(percent, 0-100)\n The high-water mark for AUFS/UFS/diskd cache object eviction by\n the cache_replacement_policy algorithm.\n \n Removal begins when the swap (disk) usage of a cache_dir is\n above the low-water mark set by cache_swap_low and attempts to\n maintain utilization near the low-water mark.\n \n As swap utilization increases towards this high-water mark object\n eviction becomes more agressive.\n \n The value difference in percentages between low- and high-water\n marks represent an eviction rate of 300 objects per second and\n the rate continues to scale in agressiveness by multiples of\n this above the high-water mark.\n \n Defaults are 90% and 95%. If you have a large cache, 5% could be\n hundreds of MB. If this is the case you may wish to set these\n numbers closer together.\n \n See also cache_swap_low and cache_replacement_policy\n Default:\n  cache_swap_high 95\n", "   TAG: logformat\n Usage:\n \n logformat <name> <format specification>\n \n Defines an access log format.\n \n The <format specification> is a string with embedded % format codes\n \n % format codes all follow the same basic structure where all but\n the formatcode is optional. Output strings are automatically escaped\n as required according to their context and the output format\n modifiers are usually not needed, but can be specified if an explicit\n output format is desired.\n \n % [\"|[|'| ] [-] [[0]width] [{argument}] formatcode\n \n \"output in quoted string format\n [output in squid text log format as used by log_mime_hdrs\n  output in URL quoted format\n 'output as-is\n \n -left aligned\n \n widthminimum and/or maximum field width:\n     [width_min][.width_max]\n When minimum starts with 0, the field is zero-padded.\n String values exceeding maximum width are truncated.\n \n {arg}argument such as header name etc\n \n Format codes:\n \n %a literal % character\n snUnique sequence number per log line entry\n err_code    The ID of an error response served by Squid or\n a similar internal error identifier.\n err_detail  Additional err_code-dependent error information.\n noteThe annotation specified by the argument. Also\n logs the adaptation meta headers set by the\n adaptation_meta configuration parameter.\n If no argument given all annotations logged.\n The argument may include a separator to use with\n annotation values:\n                             name[:separator]\n By default, multiple note values are separated with \",\"\n and multiple notes are separated with \"\\r\\n\".\n When logging named notes with %{name}note, the\n explicitly configured separator is used between note\n values. When logging all notes with %note, the\n explicitly configured separator is used between\n individual notes. There is currently no way to\n specify both value and notes separators when logging\n all notes with %note.\n \n Connection related format codes:\n \n >aClient source IP address\n >AClient FQDN\n >pClient source port\n >euiClient source EUI (MAC address, EUI-48 or EUI-64 identifier)\n >laLocal IP address the client connected to\n >lpLocal port number the client connected to\n >qos    Client connection TOS/DSCP value set by Squid\n >nfmark Client connection netfilter mark set by Squid\n \n laLocal listening IP address the client connection was connected to.\n lpLocal listening port number the client connection was connected to.\n \n <aServer IP address of the last server or peer connection\n <AServer FQDN or peer name\n <pServer port number of the last server or peer connection\n <laLocal IP address of the last server or peer connection\n <lp     Local port number of the last server or peer connection\n <qosServer connection TOS/DSCP value set by Squid\n <nfmark Server connection netfilter mark set by Squid\n \n Time related format codes:\n \n tsSeconds since epoch\n tusubsecond time (milliseconds)\n tlLocal time. Optional strftime format argument\n default %d/%b/%Y:%H:%M:%S %z\n tgGMT time. Optional strftime format argument\n default %d/%b/%Y:%H:%M:%S %z\n trResponse time (milliseconds)\n dtTotal time spent making DNS lookups (milliseconds)\n tSApproximate master transaction start time in \n <full seconds since epoch>.<fractional seconds> format.\n Currently, Squid considers the master transaction\n started when a complete HTTP request header initiating\n the transaction is received from the client. This is\n the same value that Squid uses to calculate transaction\n response time when logging %tr to access.log. Currently,\n Squid uses millisecond resolution for %tS values,\n similar to the default access.log \"current time\" field\n (%ts.%03tu).\n \n Access Control related format codes:\n \n etTag returned by external acl\n eaLog string returned by external acl\n unUser name (any available)\n ulUser name from authentication\n ueUser name from external acl helper\n uiUser name from ident\n unA user name. Expands to the first available name\n from the following list of information sources:\n - authenticated user name, like %ul\n - user name supplied by an external ACL, like %ue\n - SSL client name, like %us\n - ident user name, like %ui\n credentials Client credentials. The exact meaning depends on\n the authentication scheme: For Basic authentication,\n it is the password; for Digest, the realm sent by the\n client; for NTLM and Negotiate, the client challenge\n or client credentials prefixed with \"YR \" or \"KK \".\n \n HTTP related format codes:\n \n     REQUEST\n \n [http::]rmRequest method (GET/POST etc)\n [http::]>rmRequest method from client\n [http::]<rmRequest method sent to server or peer\n [http::]ruRequest URL from client (historic, filtered for logging)\n [http::]>ruRequest URL from client\n [http::]<ruRequest URL sent to server or peer\n [http::]>rsRequest URL scheme from client\n [http::]<rsRequest URL scheme sent to server or peer\n [http::]>rdRequest URL domain from client\n [http::]<rdRequest URL domain sent to server or peer\n [http::]>rPRequest URL port from client\n [http::]<rPRequest URL port sent to server or peer\n [http::]rpRequest URL path excluding hostname\n [http::]>rpRequest URL path excluding hostname from client\n [http::]<rpRequest URL path excluding hostname sent to server or peer\n [http::]rvRequest protocol version\n [http::]>rvRequest protocol version from client\n [http::]<rvRequest protocol version sent to server or peer\n \n [http::]>hOriginal received request header.\n Usually differs from the request header sent by\n Squid, although most fields are often preserved.\n Accepts optional header field name/value filter\n argument using name[:[separator]element] format.\n [http::]>haReceived request header after adaptation and\n redirection (pre-cache REQMOD vectoring point).\n Usually differs from the request header sent by\n Squid, although most fields are often preserved.\n Optional header name argument as for >h\n \n \n     RESPONSE\n \n [http::]<HsHTTP status code received from the next hop\n [http::]>HsHTTP status code sent to the client\n \n [http::]<hReply header. Optional header name argument\n as for >h\n \n [http::]mtMIME content type\n \n \n     SIZE COUNTERS\n \n [http::]stTotal size of request + reply traffic with client\n [http::]>stTotal size of request received from client.\n Excluding chunked encoding bytes.\n [http::]<stTotal size of reply sent to client (after adaptation)\n \n [http::]>shSize of request headers received from client\n [http::]<shSize of reply headers sent to client (after adaptation)\n \n [http::]<sHReply high offset sent\n [http::]<sSUpstream object size\n \n [http::]<bsNumber of HTTP-equivalent message body bytes \n received from the next hop, excluding chunked\n transfer encoding and control messages.\n Generated FTP/Gopher listings are treated as\n received bodies.\n \n \n     TIMING\n \n [http::]<ptPeer response time in milliseconds. The timer starts\n when the last request byte is sent to the next hop\n and stops when the last response byte is received.\n [http::]<ttTotal time in milliseconds. The timer \n starts with the first connect request (or write I/O)\n sent to the first selected peer. The timer stops\n with the last I/O with the last peer.\n \n Squid handling related format codes:\n \n SsSquid request status (TCP_MISS etc)\n ShSquid hierarchy status (DEFAULT_PARENT etc)\n \n SSL-related format codes:\n \n ssl::bump_modeSslBump decision for the transaction:\n \n For CONNECT requests that initiated bumping of\n a connection and for any request received on\n an already bumped connection, Squid logs the\n corresponding SslBump mode (\"server-first\" or\n \"client-first\"). See the ssl_bump option for\n more information about these modes.\n \n A \"none\" token is logged for requests that\n triggered \"ssl_bump\" ACL evaluation matching\n either a \"none\" rule or no rules at all.\n \n In all other cases, a single dash (\"-\") is\n logged.\n \n ssl::>sniSSL client SNI sent to Squid. Available only\n after the peek, stare, or splice SSL bumping\n actions.\n \n If ICAP is enabled, the following code becomes available (as\n well as ICAP log codes documented with the icap_log option):\n \n icap::tt        Total ICAP processing time for the HTTP\n transaction. The timer ticks when ICAP\n ACLs are checked and when ICAP\n transaction is in progress.\n \n If adaptation is enabled the following three codes become available:\n \n adapt::<last_hThe header of the last ICAP response or\n meta-information from the last eCAP\n transaction related to the HTTP transaction.\n Like <h, accepts an optional header name\n argument.\n \n adapt::sum_trs Summed adaptation transaction response\n times recorded as a comma-separated list in\n the order of transaction start time. Each time\n value is recorded as an integer number,\n representing response time of one or more\n adaptation (ICAP or eCAP) transaction in\n milliseconds.  When a failed transaction is\n being retried or repeated, its time is not\n logged individually but added to the\n replacement (next) transaction. See also:\n adapt::all_trs.\n \n adapt::all_trs All adaptation transaction response times.\n Same as adaptation_strs but response times of\n individual transactions are never added\n together. Instead, all transaction response\n times are recorded individually.\n \n You can prefix adapt::*_trs format codes with adaptation\n service name in curly braces to record response time(s) specific\n to that service. For example: %{my_service}adapt::sum_trs\n \n If SSL is enabled, the following formating codes become available:\n \n %ssl::>cert_subject The Subject field of the received client\n SSL certificate or a dash ('-') if Squid has\n received an invalid/malformed certificate or\n no certificate at all. Consider encoding the\n logged value because Subject often has spaces.\n \n %ssl::>cert_issuer The Issuer field of the received client\n SSL certificate or a dash ('-') if Squid has\n received an invalid/malformed certificate or\n no certificate at all. Consider encoding the\n logged value because Issuer often has spaces.\n \n The default formats available (which do not need re-defining) are:\n \n logformat squid      %ts.%03tu %6tr %>a %Ss/%03>Hs %<st %rm %ru %[un %Sh/%<a %mt\n logformat common     %>a %[ui %[un [%tl] \"%rm %ru HTTP/%rv\" %>Hs %<st %Ss:%Sh\n logformat combined   %>a %[ui %[un [%tl] \"%rm %ru HTTP/%rv\" %>Hs %<st \"%{Referer}>h\" \"%{User-Agent}>h\" %Ss:%Sh\n logformat referrer   %ts.%03tu %>a %{Referer}>h %ru\n logformat useragent  %>a [%tl] \"%{User-Agent}>h\"\n \n NOTE: When the log_mime_hdrs directive is set to ON.\n The squid, common and combined formats have a safely encoded copy\n of the mime headers appended to each line within a pair of brackets.\n \n NOTE: The common and combined formats are not quite true to the Apache definition.\n The logs from Squid contain an extra status and hierarchy code appended.\n \n Default:\n  The format definitions squid, common, combined, referrer, useragent are built in.\n", "   TAG: access_log\n Configures whether and how Squid logs HTTP and ICP transactions.\n If access logging is enabled, a single line is logged for every \n matching HTTP or ICP request. The recommended directive formats are:\n \n access_log <module>:<place> [option ...] [acl acl ...]\n access_log none [acl acl ...]\n \n The following directive format is accepted but may be deprecated:\n access_log <module>:<place> [<logformat name> [acl acl ...]]\n \n         In most cases, the first ACL name must not contain the '=' character\n and should not be equal to an existing logformat name. You can always\n start with an 'all' ACL to work around those restrictions.\n \n Will log to the specified module:place using the specified format (which\n must be defined in a logformat directive) those entries which match\n ALL the acl's specified (which must be defined in acl clauses).\n If no acl is specified, all requests will be logged to this destination.\n \n ===== Available options for the recommended directive format =====\n \n logformat=nameNames log line format (either built-in or\n defined by a logformat directive). Defaults\n to 'squid'.\n \n buffer-size=64KBDefines approximate buffering limit for log\n records (see buffered_logs).  Squid should not\n keep more than the specified size and, hence,\n should flush records before the buffer becomes\n full to avoid overflows under normal\n conditions (the exact flushing algorithm is\n module-dependent though).  The on-error option\n controls overflow handling.\n \n on-error=die|dropDefines action on unrecoverable errors. The\n 'drop' action ignores (i.e., does not log)\n affected log records. The default 'die' action\n kills the affected worker. The drop action \n support has not been tested for modules other\n than tcp.\n \n ===== Modules Currently available =====\n \n noneDo not log any requests matching these ACL.\n Do not specify Place or logformat name.\n \n stdioWrite each log line to disk immediately at the completion of\n each request.\n Place: the filename and path to be written.\n \n daemonVery similar to stdio. But instead of writing to disk the log\n line is passed to a daemon helper for asychronous handling instead.\n Place: varies depending on the daemon.\n \n log_file_daemon Place: the file name and path to be written.\n \n syslogTo log each request via syslog facility.\n Place: The syslog facility and priority level for these entries.\n Place Format:  facility.priority\n \n where facility could be any of:\n authpriv, daemon, local0 ... local7 or user.\n \n And priority could be any of:\n err, warning, notice, info, debug.\n \n udpTo send each log line as text data to a UDP receiver.\n Place: The destination host name or IP and port.\n Place Format:   //host:port\n \n tcpTo send each log line as text data to a TCP receiver.\n Lines may be accumulated before sending (see buffered_logs).\n Place: The destination host name or IP and port.\n Place Format:   //host:port\n \n Default:\n access_log daemon:/var/log/squid/access.log squid\n Default:\n  access_log daemon:/var/log/squid/access.log squid\n", "   TAG: icap_log\n ICAP log files record ICAP transaction summaries, one line per\n transaction.\n \n The icap_log option format is:\n icap_log <filepath> [<logformat name> [acl acl ...]]\n icap_log none [acl acl ...]]\n \n Please see access_log option documentation for details. The two\n kinds of logs share the overall configuration approach and many\n features.\n \n ICAP processing of a single HTTP message or transaction may\n require multiple ICAP transactions.  In such cases, multiple\n ICAP transaction log lines will correspond to a single access\n log line.\n \n ICAP log uses logformat codes that make sense for an ICAP\n transaction. Header-related codes are applied to the HTTP header\n embedded in an ICAP server response, with the following caveats:\n For REQMOD, there is no HTTP response header unless the ICAP\n server performed request satisfaction. For RESPMOD, the HTTP\n request header is the header sent to the ICAP server. For\n OPTIONS, there are no HTTP headers.\n \n The following format codes are also available for ICAP logs:\n \n icap::<AICAP server IP address. Similar to <A.\n \n icap::<service_nameICAP service name from the icap_service\n option in Squid configuration file.\n \n icap::ruICAP Request-URI. Similar to ru.\n \n icap::rmICAP request method (REQMOD, RESPMOD, or \n OPTIONS). Similar to existing rm.\n \n icap::>stBytes sent to the ICAP server (TCP payload\n only; i.e., what Squid writes to the socket).\n \n icap::<stBytes received from the ICAP server (TCP\n payload only; i.e., what Squid reads from\n the socket).\n \n icap::<bsNumber of message body bytes received from the\n ICAP server. ICAP message body, if any, usually\n includes encapsulated HTTP message headers and\n possibly encapsulated HTTP message body. The\n HTTP body part is dechunked before its size is\n computed.\n \n icap::tr Transaction response time (in\n milliseconds).  The timer starts when\n the ICAP transaction is created and\n stops when the transaction is completed.\n Similar to tr.\n \n icap::tioTransaction I/O time (in milliseconds). The\n timer starts when the first ICAP request\n byte is scheduled for sending. The timers\n stops when the last byte of the ICAP response\n is received.\n \n icap::to Transaction outcome: ICAP_ERR* for all\n transaction errors, ICAP_OPT for OPTION\n transactions, ICAP_ECHO for 204\n responses, ICAP_MOD for message\n modification, and ICAP_SAT for request\n satisfaction. Similar to Ss.\n \n icap::HsICAP response status code. Similar to Hs.\n \n icap::>hICAP request header(s). Similar to >h.\n \n icap::<hICAP response header(s). Similar to <h.\n \n The default ICAP log format, which can be used without an explicit\n definition, is called icap_squid:\n \n logformat icap_squid %ts.%03tu %6icap::tr %>a %icap::to/%03icap::Hs %icap::<size %icap::rm %icap::ru% %un -/%icap::<A -\n \n See also: logformat, log_icap, and %adapt::<last_h \n Default:\n  none\n", "   TAG: logfile_daemon\n Specify the path to the logfile-writing daemon. This daemon is\n used to write the access and store logs, if configured.\n \n Squid sends a number of commands to the log daemon:\n   L<data>\\n - logfile data\n   R\\n - rotate file\n   T\\n - truncate file\n   O\\n - reopen file\n   F\\n - flush file\n   r<n>\\n - set rotate count to <n>\n   b<n>\\n - 1 = buffer output, 0 = don't buffer output\n \n No responses is expected.\n Default:\n  logfile_daemon /usr/lib/squid/log_file_daemon\n", "   TAG: stats_collectionallow|deny acl acl...\n This options allows you to control which requests gets accounted\n in performance counters.\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Default:\n  Allow logging for all transactions.\n", "   TAG: cache_store_log\n Logs the activities of the storage manager.  Shows which\n objects are ejected from the cache, and which objects are\n saved and for how long.\n There are not really utilities to analyze this data, so you can safely\n disable it (the default).\n \n Store log uses modular logging outputs. See access_log for the list\n of modules supported.\n \n Example:\n cache_store_log stdio:/var/log/squid/store.log\n cache_store_log daemon:/var/log/squid/store.log\n Default:\n  none\n", "   TAG: cache_swap_state\n Location for the cache \"swap.state\" file. This index file holds\n the metadata of objects saved on disk.  It is used to rebuild\n the cache during startup.  Normally this file resides in each\n 'cache_dir' directory, but you may specify an alternate\n pathname here.  Note you must give a full filename, not just\n a directory. Since this is the index for the whole object\n list you CANNOT periodically rotate it!\n \n If %s can be used in the file name it will be replaced with a\n a representation of the cache_dir name where each / is replaced\n with '.'. This is needed to allow adding/removing cache_dir\n lines when cache_swap_log is being used.\n \n If have more than one 'cache_dir', and %s is not used in the name\n these swap logs will have names such as:\n \n cache_swap_log.00\n cache_swap_log.01\n cache_swap_log.02\n \n The numbered extension (which is added automatically)\n corresponds to the order of the 'cache_dir' lines in this\n configuration file.  If you change the order of the 'cache_dir'\n lines in this file, these index files will NOT correspond to\n the correct 'cache_dir' entry (unless you manually rename\n them).  We recommend you do NOT use this option.  It is\n better to keep these index files in each 'cache_dir' directory.\n Default:\n  Store the journal inside its cache_dir\n", "   TAG: logfile_rotate\n Specifies the number of logfile rotations to make when you\n type 'squid -k rotate'. The default is 10, which will rotate\n with extensions 0 through 9. Setting logfile_rotate to 0 will\n disable the file name rotation, but the logfiles are still closed\n and re-opened. This will enable you to rename the logfiles\n yourself just before sending the rotate signal.\n \n Note, the 'squid -k rotate' command normally sends a USR1\n signal to the running squid process.  In certain situations\n (e.g. on Linux with Async I/O), USR1 is used for other\n purposes, so -k rotate uses another signal.  It is best to get\n in the habit of using 'squid -k rotate' instead of 'kill -USR1\n <pid>'.\n \n Note, from Squid-3.1 this option is only a default for cache.log,\n that log can be rotated separately by using debug_options.\n \n Note2, for Debian/Linux the default of logfile_rotate is\n zero, since it includes external logfile-rotation methods.\n Default:\n  logfile_rotate 0\n", "   TAG: mime_table\n Path to Squid's icon configuration file.\n \n You shouldn't need to change this, but the default file contains\n examples and formatting information if you do.\n Default:\n  mime_table /usr/share/squid/mime.conf\n", "   TAG: log_mime_hdrson|off\n The Cache can record both the request and the response MIME\n headers for each HTTP transaction.  The headers are encoded\n safely and will appear as two bracketed fields at the end of\n the access log (for either the native or httpd-emulated log\n formats).  To enable this logging set log_mime_hdrs to 'on'.\n Default:\n  log_mime_hdrs off\n", "   TAG: pid_filename\n A filename to write the process-id to.  To disable, enter \"none\".\n Default:\n  pid_filename /var/run/squid.pid\n", "   TAG: client_netmask\n A netmask for client addresses in logfiles and cachemgr output.\n Change this to protect the privacy of your cache clients.\n A netmask of 255.255.255.0 will log all IP's in that range with\n the last digit set to '0'.\n Default:\n  Log full client IP address\n", "   TAG: strip_query_terms\n By default, Squid strips query terms from requested URLs before\n logging.  This protects your user's privacy and reduces log size.\n \n When investigating HIT/MISS or other caching behaviour you\n will need to disable this to see the full URL used by Squid.\n Default:\n  strip_query_terms on\n", "   TAG: buffered_logson|off\n Whether to write/send access_log records ASAP or accumulate them and\n then write/send them in larger chunks. Buffering may improve\n performance because it decreases the number of I/Os. However,\n buffering increases the delay before log records become available to\n the final recipient (e.g., a disk file or logging daemon) and,\n hence, increases the risk of log records loss.\n \n Note that even when buffered_logs are off, Squid may have to buffer\n records if it cannot write/send them immediately due to pending I/Os\n (e.g., the I/O writing the previous log record) or connectivity loss.\n \n Currently honored by 'daemon' and 'tcp' access_log modules only.\n Default:\n  buffered_logs off\n", "   TAG: netdb_filename\n Where Squid stores it's netdb journal.\n When enabled this journal preserves netdb state between restarts.\n \n To disable, enter \"none\".\n Default:\n  netdb_filename stdio:/var/log/squid/netdb.state\n", "   TAG: cache_log\n Squid administrative logging file.\n \n This is where general information about Squid behavior goes. You can\n increase the amount of data logged to this file and how often it is\n rotated with \"debug_options\"\n Default:\n  cache_log /var/log/squid/cache.log\n", "   TAG: debug_options\n Logging options are set as section,level where each source file\n is assigned a unique section.  Lower levels result in less\n output,  Full debugging (level 9) can result in a very large\n log file, so be careful.\n \n The magic word \"ALL\" sets debugging levels for all sections.\n The default is to run with \"ALL,1\" to record important warnings.\n \n The rotate=N option can be used to keep more or less of these logs\n than would otherwise be kept by logfile_rotate.\n For most uses a single log should be enough to monitor current\n events affecting Squid.\n Default:\n  Log all critical and important messages.\n", "   TAG: coredump_dir\n By default Squid leaves core files in the directory from where\n it was started. If you set 'coredump_dir' to a directory\n that exists, Squid will chdir() to that directory at startup\n and coredump files will be left there.\n \n Default:\n  Use the directory from where Squid was started.\n", "   TAG: ftp_user\n If you want the anonymous login password to be more informative\n (and enable the use of picky FTP servers), set this to something\n reasonable for your domain, like wwwuser@somewhere.net\n \n The reason why this is domainless by default is the\n request can be made on the behalf of a user in any domain,\n depending on how the cache is used.\n Some FTP server also validate the email address is valid\n (for example perl.com).\n Default:\n  ftp_user Squid@\n", "   TAG: ftp_passive\n If your firewall does not allow Squid to use passive\n connections, turn off this option.\n \n Use of ftp_epsv_all option requires this to be ON.\n Default:\n  ftp_passive on\n", "   TAG: ftp_epsv_all\n FTP Protocol extensions permit the use of a special \"EPSV ALL\" command.\n \n NATs may be able to put the connection on a \"fast path\" through the\n translator, as the EPRT command will never be used and therefore,\n translation of the data portion of the segments will never be needed.\n \n When a client only expects to do two-way FTP transfers this may be\n useful.\n If squid finds that it must do a three-way FTP transfer after issuing\n an EPSV ALL command, the FTP session will fail.\n \n If you have any doubts about this option do not use it.\n Squid will nicely attempt all other connection methods.\n \n Requires ftp_passive to be ON (default) for any effect.\n Default:\n  ftp_epsv_all off\n", "   TAG: ftp_epsv\n FTP Protocol extensions permit the use of a special \"EPSV\" command.\n \n NATs may be able to put the connection on a \"fast path\" through the\n translator using EPSV, as the EPRT command will never be used\n and therefore, translation of the data portion of the segments \n will never be needed.\n \n EPSV is often required to interoperate with FTP servers on IPv6\n networks. On the other hand, it may break some IPv4 servers.\n \n By default, EPSV may try EPSV with any FTP server. To fine tune\n that decision, you may restrict EPSV to certain clients or servers\n using ACLs:\n \n ftp_epsv allow|deny al1 acl2 ...\n \n WARNING: Disabling EPSV may cause problems with external NAT and IPv6.\n \n Only fast ACLs are supported.\n Requires ftp_passive to be ON (default) for any effect.\n Default:\n  none\n", "   TAG: ftp_eprt\n FTP Protocol extensions permit the use of a special \"EPRT\" command.\n \n This extension provides a protocol neutral alternative to the\n IPv4-only PORT command. When supported it enables active FTP data\n channels over IPv6 and efficient NAT handling.\n \n Turning this OFF will prevent EPRT being attempted and will skip\n straight to using PORT for IPv4 servers.\n \n Some devices are known to not handle this extension correctly and\n may result in crashes. Devices which suport EPRT enough to fail\n cleanly will result in Squid attempting PORT anyway. This directive\n should only be disabled when EPRT results in device failures.\n \n WARNING: Doing so will convert Squid back to the old behavior with all\n the related problems with external NAT devices/layers and IPv4-only FTP.\n Default:\n  ftp_eprt on\n", "   TAG: ftp_sanitycheck\n For security and data integrity reasons Squid by default performs\n sanity checks of the addresses of FTP data connections ensure the\n data connection is to the requested server. If you need to allow\n FTP connections to servers using another IP address for the data\n connection turn this off.\n Default:\n  ftp_sanitycheck on\n", "   TAG: ftp_telnet_protocol\n The FTP protocol is officially defined to use the telnet protocol\n as transport channel for the control connection. However, many\n implementations are broken and does not respect this aspect of\n the FTP protocol.\n \n If you have trouble accessing files with ASCII code 255 in the\n path or similar problems involving this ASCII code you can\n try setting this directive to off. If that helps, report to the\n operator of the FTP server in question that their FTP server\n is broken and does not follow the FTP standard.\n Default:\n  ftp_telnet_protocol on\n", "   TAG: diskd_program\n Specify the location of the diskd executable.\n Note this is only useful if you have compiled in\n diskd as one of the store io modules.\n Default:\n  diskd_program /usr/lib/squid/diskd\n", "   TAG: unlinkd_program\n Specify the location of the executable for file deletion process.\n Default:\n  unlinkd_program /usr/lib/squid/unlinkd\n", "   TAG: pinger_program\n Specify the location of the executable for the pinger process.\n Default:\n  pinger_program /usr/lib/squid/pinger\n", "   TAG: pinger_enable\n Control whether the pinger is active at run-time.\n Enables turning ICMP pinger on and off with a simple\n squid -k reconfigure.\n Default:\n  pinger_enable on\n", "   TAG: url_rewrite_program\n Specify the location of the executable URL rewriter to use.\n Since they can perform almost any function there isn't one included.\n \n For each requested URL, the rewriter will receive on line with the format\n \n   [channel-ID <SP>] URL [<SP> extras]<NL>\n \n See url_rewrite_extras on how to send \"extras\" with optional values to\n the helper.\n After processing the request the helper must reply using the following format:\n \n   [channel-ID <SP>] result [<SP> kv-pairs]\n \n The result code can be:\n \n   OK status=30N url=\"...\"\n Redirect the URL to the one supplied in 'url='.\n 'status=' is optional and contains the status code to send\n the client in Squids HTTP response. It must be one of the\n HTTP redirect status codes: 301, 302, 303, 307, 308.\n When no status is given Squid will use 302.\n \n   OK rewrite-url=\"...\"\n Rewrite the URL to the one supplied in 'rewrite-url='.\n The new URL is fetched directly by Squid and returned to\n the client as the response to its request.\n \n   OK\n When neither of url= and rewrite-url= are sent Squid does\n not change the URL.\n \n   ERR\n Do not change the URL.\n \n   BH\n An internal error occurred in the helper, preventing\n a result being identified. The 'message=' key name is\n reserved for delivering a log message.\n \n \n In addition to the above kv-pairs Squid also understands the following\n optional kv-pairs received from URL rewriters:\n   clt_conn_tag=TAG\n Associates a TAG with the client TCP connection.\n The TAG is treated as a regular annotation but persists across\n future requests on the client connection rather than just the\n current request. A helper may update the TAG during subsequent\n requests be returning a new kv-pair.\n \n When using the concurrency= option the protocol is changed by\n introducing a query channel tag in front of the request/response.\n The query channel tag is a number between 0 and concurrency-1.\n This value must be echoed back unchanged to Squid as the first part\n of the response relating to its request.\n \n WARNING: URL re-writing ability should be avoided whenever possible.\n  Use the URL redirect form of response instead.\n \n Re-write creates a difference in the state held by the client\n and server. Possibly causing confusion when the server response\n contains snippets of its view state. Embeded URLs, response\n and content Location headers, etc. are not re-written by this\n interface.\n \n By default, a URL rewriter is not used.\n Default:\n  none\n", "   TAG: url_rewrite_children\n The maximum number of redirector processes to spawn. If you limit\n it too few Squid will have to wait for them to process a backlog of\n URLs, slowing it down. If you allow too many they will use RAM\n and other system resources noticably.\n \n The startup= and idle= options allow some measure of skew in your\n tuning.\n \n startup=\n \n Sets a minimum of how many processes are to be spawned when Squid\n starts or reconfigures. When set to zero the first request will\n cause spawning of the first child process to handle it.\n \n Starting too few will cause an initial slowdown in traffic as Squid\n attempts to simultaneously spawn enough processes to cope.\n \n idle=\n \n Sets a minimum of how many processes Squid is to try and keep available\n at all times. When traffic begins to rise above what the existing\n processes can handle this many more will be spawned up to the maximum\n configured. A minimum setting of 1 is required.\n \n concurrency=\n \n The number of requests each redirector helper can handle in\n parallel. Defaults to 0 which indicates the redirector\n is a old-style single threaded redirector.\n \n When this directive is set to a value >= 1 then the protocol\n used to communicate with the helper is modified to include\n an ID in front of the request/response. The ID from the request\n must be echoed back with the response to that request.\n Default:\n  url_rewrite_children 20 startup=0 idle=1 concurrency=0\n", "   TAG: url_rewrite_host_header\n To preserve same-origin security policies in browsers and\n prevent Host: header forgery by redirectors Squid rewrites\n any Host: header in redirected requests.\n \n If you are running an accelerator this may not be a wanted\n effect of a redirector. This directive enables you disable\n Host: alteration in reverse-proxy traffic.\n \n WARNING: Entries are cached on the result of the URL rewriting\n process, so be careful if you have domain-virtual hosts.\n \n WARNING: Squid and other software verifies the URL and Host\n are matching, so be careful not to relay through other proxies\n or inspecting firewalls with this disabled.\n Default:\n  url_rewrite_host_header on\n", "   TAG: url_rewrite_access\n If defined, this access list specifies which requests are\n sent to the redirector processes.\n \n This clause supports both fast and slow acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Default:\n  Allow, unless rules exist in squid.conf.\n", "   TAG: url_rewrite_bypass\n When this is 'on', a request will not go through the\n redirector if all the helpers are busy.  If this is 'off'\n and the redirector queue grows too large, Squid will exit\n with a FATAL error and ask you to increase the number of\n redirectors.  You should only enable this if the redirectors\n are not critical to your caching system.  If you use\n redirectors for access control, and you enable this option,\n users may have access to pages they should not\n be allowed to request.\n Default:\n  url_rewrite_bypass off\n", "   TAG: url_rewrite_extras\n Specifies a string to be append to request line format for the\n rewriter helper. \"Quoted\" format values may contain spaces and\n logformat %macros. In theory, any logformat %macro can be used.\n In practice, a %macro expands as a dash (-) if the helper request is\n sent before the required macro information is available to Squid.\n Default:\n  url_rewrite_extras \"%>a/%>A %un %>rm myip=%la myport=%lp\"\n", "   TAG: store_id_program\n Specify the location of the executable StoreID helper to use.\n Since they can perform almost any function there isn't one included.\n \n For each requested URL, the helper will receive one line with the format\n \n   [channel-ID <SP>] URL [<SP> extras]<NL>\n \n \n After processing the request the helper must reply using the following format:\n \n   [channel-ID <SP>] result [<SP> kv-pairs]\n \n The result code can be:\n \n   OK store-id=\"...\"\n Use the StoreID supplied in 'store-id='.\n \n   ERR\n The default is to use HTTP request URL as the store ID.\n \n   BH\n An internal error occured in the helper, preventing\n a result being identified.\n \n In addition to the above kv-pairs Squid also understands the following\n optional kv-pairs received from URL rewriters:\n   clt_conn_tag=TAG\n Associates a TAG with the client TCP connection.\n Please see url_rewrite_program related documentation for this\n kv-pair\n \n Helper programs should be prepared to receive and possibly ignore\n additional whitespace-separated tokens on each input line.\n \n When using the concurrency= option the protocol is changed by\n introducing a query channel tag in front of the request/response.\n The query channel tag is a number between 0 and concurrency-1.\n This value must be echoed back unchanged to Squid as the first part\n of the response relating to its request.\n \n NOTE: when using StoreID refresh_pattern will apply to the StoreID\n       returned from the helper and not the URL.\n \n WARNING: Wrong StoreID value returned by a careless helper may result\n          in the wrong cached response returned to the user.\n \n By default, a StoreID helper is not used.\n Default:\n  none\n", "   TAG: store_id_extras\n         Specifies a string to be append to request line format for the\n         StoreId helper. \"Quoted\" format values may contain spaces and\n         logformat %macros. In theory, any logformat %macro can be used.\n         In practice, a %macro expands as a dash (-) if the helper request is\n         sent before the required macro information is available to Squid.\n Default:\n  store_id_extras \"%>a/%>A %un %>rm myip=%la myport=%lp\"\n", "   TAG: store_id_children\n The maximum number of StoreID helper processes to spawn. If you limit\n it too few Squid will have to wait for them to process a backlog of\n requests, slowing it down. If you allow too many they will use RAM\n and other system resources noticably.\n \n The startup= and idle= options allow some measure of skew in your\n tuning.\n \n startup=\n \n Sets a minimum of how many processes are to be spawned when Squid\n starts or reconfigures. When set to zero the first request will\n cause spawning of the first child process to handle it.\n \n Starting too few will cause an initial slowdown in traffic as Squid\n attempts to simultaneously spawn enough processes to cope.\n \n idle=\n \n Sets a minimum of how many processes Squid is to try and keep available\n at all times. When traffic begins to rise above what the existing\n processes can handle this many more will be spawned up to the maximum\n configured. A minimum setting of 1 is required.\n \n concurrency=\n \n The number of requests each storeID helper can handle in\n parallel. Defaults to 0 which indicates the helper\n is a old-style single threaded program.\n \n When this directive is set to a value >= 1 then the protocol\n used to communicate with the helper is modified to include\n an ID in front of the request/response. The ID from the request\n must be echoed back with the response to that request.\n Default:\n  store_id_children 20 startup=0 idle=1 concurrency=0\n", "   TAG: store_id_access\n If defined, this access list specifies which requests are\n sent to the StoreID processes.  By default all requests\n are sent.\n \n This clause supports both fast and slow acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Default:\n  Allow, unless rules exist in squid.conf.\n", "   TAG: store_id_bypass\n When this is 'on', a request will not go through the\n helper if all helpers are busy.  If this is 'off'\n and the helper queue grows too large, Squid will exit\n with a FATAL error and ask you to increase the number of\n helpers.  You should only enable this if the helperss\n are not critical to your caching system.  If you use\n helpers for critical caching components, and you enable this \n option,users may not get objects from cache.\n Default:\n  store_id_bypass on\n", "   TAG: cache\n Requests denied by this directive will not be served from the cache\n and their responses will not be stored in the cache. This directive\n has no effect on other transactions and on already cached responses.\n \n This clause supports both fast and slow acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n \n This and the two other similar caching directives listed below are\n checked at different transaction processing stages, have different\n access to response information, affect different cache operations,\n and differ in slow ACLs support:\n \n * cache: Checked before Squid makes a hit/miss determination.\n No access to reply information!\n Denies both serving a hit and storing a miss.\n Supports both fast and slow ACLs.\n * send_hit: Checked after a hit was detected.\n Has access to reply (hit) information.\n Denies serving a hit only.\n Supports fast ACLs only.\n * store_miss: Checked before storing a cachable miss.\n Has access to reply (miss) information.\n Denies storing a miss only.\n Supports fast ACLs only.\n \n If you are not sure which of the three directives to use, apply the\n following decision logic:\n \n * If your ACL(s) are of slow type _and_ need response info, redesign.\n   Squid does not support that particular combination at this time.\n         Otherwise:\n * If your directive ACL(s) are of slow type, use \"cache\"; and/or\n * if your directive ACL(s) need no response info, use \"cache\".\n         Otherwise:\n * If you do not want the response cached, use store_miss; and/or\n * if you do not want a hit on a cached response, use send_hit.\n Default:\n  By default, this directive is unused and has no effect.\n", "   TAG: send_hit\n Responses denied by this directive will not be served from the cache\n (but may still be cached, see store_miss). This directive has no\n effect on the responses it allows and on the cached objects.\n \n Please see the \"cache\" directive for a summary of differences among\n store_miss, send_hit, and cache directives.\n \n Unlike the \"cache\" directive, send_hit only supports fast acl\n types.  See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n \n For example:\n \n   apply custom Store ID mapping to some URLs\n acl MapMe dstdomain .c.example.com\n store_id_program ...\n store_id_access allow MapMe\n \n   but prevent caching of special responses\n   such as 302 redirects that cause StoreID loops\n acl Ordinary http_status 200-299\n store_miss deny MapMe !Ordinary\n \n   and do not serve any previously stored special responses\n   from the cache (in case they were already cached before\n   the above store_miss rule was in effect).\n send_hit deny MapMe !Ordinary\n Default:\n  By default, this directive is unused and has no effect.\n", "   TAG: store_miss\n Responses denied by this directive will not be cached (but may still\n be served from the cache, see send_hit). This directive has no\n effect on the responses it allows and on the already cached responses.\n \n Please see the \"cache\" directive for a summary of differences among\n store_miss, send_hit, and cache directives. See the\n send_hit directive for a usage example.\n \n Unlike the \"cache\" directive, store_miss only supports fast acl\n types.  See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Default:\n  By default, this directive is unused and has no effect.\n", "   TAG: max_staletime-units\n This option puts an upper limit on how stale content Squid\n will serve from the cache if cache validation fails.\n Can be overriden by the refresh_pattern max-stale option.\n Default:\n  max_stale 1 week\n", "   TAG: refresh_pattern\n usage: refresh_pattern [-i] regex min percent max [options]\n \n By default, regular expressions are CASE-SENSITIVE.  To make\n them case-insensitive, use the -i option.\n \n 'Min' is the time (in minutes) an object without an explicit\n expiry time should be considered fresh. The recommended\n value is 0, any higher values may cause dynamic applications\n to be erroneously cached unless the application designer\n has taken the appropriate actions.\n \n 'Percent' is a percentage of the objects age (time since last\n modification age) an object without explicit expiry time\n will be considered fresh.\n \n 'Max' is an upper limit on how long objects without an explicit\n expiry time will be considered fresh.\n \n options: override-expire\n  override-lastmod\n  reload-into-ims\n  ignore-reload\n  ignore-no-store\n  ignore-must-revalidate\n  ignore-private\n  ignore-auth\n  max-stale=NN\n  refresh-ims\n  store-stale\n \n override-expire enforces min age even if the server\n sent an explicit expiry time (e.g., with the\n Expires: header or Cache-Control: max-age). Doing this\n VIOLATES the HTTP standard.  Enabling this feature\n could make you liable for problems which it causes.\n \n Note: override-expire does not enforce staleness - it only extends\n freshness / min. If the server returns a Expires time which\n is longer than your max time, Squid will still consider\n the object fresh for that period of time.\n \n override-lastmod enforces min age even on objects\n that were modified recently.\n \n reload-into-ims changes a client no-cache or ``reload''\n request for a cached entry into a conditional request using\n If-Modified-Since and/or If-None-Match headers, provided the\n cached entry has a Last-Modified and/or a strong ETag header.\n Doing this VIOLATES the HTTP standard. Enabling this feature\n could make you liable for problems which it causes.\n \n ignore-reload ignores a client no-cache or ``reload''\n header. Doing this VIOLATES the HTTP standard. Enabling\n this feature could make you liable for problems which\n it causes.\n \n ignore-no-store ignores any ``Cache-control: no-store''\n headers received from a server. Doing this VIOLATES\n the HTTP standard. Enabling this feature could make you\n liable for problems which it causes.\n \n ignore-must-revalidate ignores any ``Cache-Control: must-revalidate``\n headers received from a server. Doing this VIOLATES\n the HTTP standard. Enabling this feature could make you\n liable for problems which it causes.\n \n ignore-private ignores any ``Cache-control: private''\n headers received from a server. Doing this VIOLATES\n the HTTP standard. Enabling this feature could make you\n liable for problems which it causes.\n \n ignore-auth caches responses to requests with authorization,\n as if the originserver had sent ``Cache-control: public''\n in the response header. Doing this VIOLATES the HTTP standard.\n Enabling this feature could make you liable for problems which\n it causes.\n \n refresh-ims causes squid to contact the origin server\n when a client issues an If-Modified-Since request. This\n ensures that the client will receive an updated version\n if one is available.\n \n store-stale stores responses even if they don't have explicit \n freshness or a validator (i.e., Last-Modified or an ETag) \n present, or if they're already stale. By default, Squid will \n not cache such responses because they usually can't be\n reused. Note that such responses will be stale by default.\n \n max-stale=NN provide a maximum staleness factor. Squid won't\n serve objects more stale than this even if it failed to\n validate the object. Default: use the max_stale global limit.\n \n Basically a cached object is:\n \n FRESH if expire > now, else STALE\n STALE if age > max\n FRESH if lm-factor < percent, else STALE\n FRESH if age < min\n else STALE\n \n The refresh_pattern lines are checked in the order listed here.\n The first entry which matches is used.  If none of the entries\n match the default will be used.\n \n Note, you must uncomment all the default lines if you want\n to change one. The default setting is only active if none is\n used.\n \n \n\n", "   TAG: quick_abort_min(KB)\n Default:\n  quick_abort_min 16 KB\n", "   TAG: quick_abort_max(KB)\n Default:\n  quick_abort_max 16 KB\n", "   TAG: quick_abort_pct(percent)\n The cache by default continues downloading aborted requests\n which are almost completed (less than 16 KB remaining). This\n may be undesirable on slow (e.g. SLIP) links and/or very busy\n caches.  Impatient users may tie up file descriptors and\n bandwidth by repeatedly requesting and immediately aborting\n downloads.\n \n When the user aborts a request, Squid will check the\n quick_abort values to the amount of data transferred until\n then.\n \n If the transfer has less than 'quick_abort_min' KB remaining,\n it will finish the retrieval.\n \n If the transfer has more than 'quick_abort_max' KB remaining,\n it will abort the retrieval.\n \n If more than 'quick_abort_pct' of the transfer has completed,\n it will finish the retrieval.\n \n If you do not want any retrieval to continue after the client\n has aborted, set both 'quick_abort_min' and 'quick_abort_max'\n to '0 KB'.\n \n If you want retrievals to always continue if they are being\n cached set 'quick_abort_min' to '-1 KB'.\n Default:\n  quick_abort_pct 95\n", "   TAG: read_ahead_gapbuffer-size\n The amount of data the cache will buffer ahead of what has been\n sent to the client when retrieving an object from another server.\n Default:\n  read_ahead_gap 16 KB\n", "   TAG: negative_ttltime-units\n Set the Default Time-to-Live (TTL) for failed requests.\n Certain types of failures (such as \"connection refused\" and\n \"404 Not Found\") are able to be negatively-cached for a short time.\n Modern web servers should provide Expires: header, however if they\n do not this can provide a minimum TTL.\n The default is not to cache errors with unknown expiry details.\n \n Note that this is different from negative caching of DNS lookups.\n \n WARNING: Doing this VIOLATES the HTTP standard.  Enabling\n this feature could make you liable for problems which it\n causes.\n Default:\n  negative_ttl 0 seconds\n", "   TAG: positive_dns_ttltime-units\n Upper limit on how long Squid will cache positive DNS responses.\n Default is 6 hours (360 minutes). This directive must be set\n larger than negative_dns_ttl.\n Default:\n  positive_dns_ttl 6 hours\n", "   TAG: negative_dns_ttltime-units\n Time-to-Live (TTL) for negative caching of failed DNS lookups.\n This also sets the lower cache limit on positive lookups.\n Minimum value is 1 second, and it is not recommendable to go\n much below 10 seconds.\n Default:\n  negative_dns_ttl 1 minutes\n", "   TAG: range_offset_limitsize [acl acl...]\n usage: (size) [units] [[!]aclname]\n \n Sets an upper limit on how far (number of bytes) into the file \n a Range requestmay be to cause Squid to prefetch the whole file. \n If beyond this limit, Squid forwards the Range request as it is and \n the result is NOT cached.\n \n This is to stop a far ahead range request (lets say start at 17MB)\n from making Squid fetch the whole object up to that point before\n sending anything to the client.\n \n Multiple range_offset_limit lines may be specified, and they will \n be searched from top to bottom on each request until a match is found. \n The first match found will be used.  If no line matches a request, the \n default limit of 0 bytes will be used.\n \n 'size' is the limit specified as a number of units.\n \n 'units' specifies whether to use bytes, KB, MB, etc.\n If no units are specified bytes are assumed.\n \n A size of 0 causes Squid to never fetch more than the\n client requested. (default)\n \n A size of 'none' causes Squid to always fetch the object from the\n beginning so it may cache the result. (2.0 style)\n \n 'aclname' is the name of a defined ACL.\n \n NP: Using 'none' as the byte value here will override any quick_abort settings \n     that may otherwise apply to the range request. The range request will\n     be fully fetched from start to finish regardless of the client\n     actions. This affects bandwidth usage.\n Default:\n  none\n", "   TAG: minimum_expiry_time(seconds)\n The minimum caching time according to (Expires - Date)\n headers Squid honors if the object can't be revalidated.\n The default is 60 seconds.\n \n In reverse proxy environments it might be desirable to honor\n shorter object lifetimes. It is most likely better to make\n your server return a meaningful Last-Modified header however.\n \n In ESI environments where page fragments often have short\n lifetimes, this will often be best set to 0.\n Default:\n  minimum_expiry_time 60 seconds\n", "   TAG: store_avg_object_size(bytes)\n Average object size, used to estimate number of objects your\n cache can hold.  The default is 13 KB.\n \n This is used to pre-seed the cache index memory allocation to\n reduce expensive reallocate operations while handling clients\n traffic. Too-large values may result in memory allocation during\n peak traffic, too-small values will result in wasted memory.\n \n Check the cache manager 'info' report metrics for the real\n object sizes seen by your Squid before tuning this.\n Default:\n  store_avg_object_size 13 KB\n", "   TAG: store_objects_per_bucket\n Target number of objects per bucket in the store hash table.\n Lowering this value increases the total number of buckets and\n also the storage maintenance rate.  The default is 20.\n Default:\n  store_objects_per_bucket 20\n", "   TAG: request_header_max_size(KB)\n This specifies the maximum size for HTTP headers in a request.\n Request headers are usually relatively small (about 512 bytes).\n Placing a limit on the request header size will catch certain\n bugs (for example with persistent connections) and possibly\n buffer-overflow or denial-of-service attacks.\n Default:\n  request_header_max_size 64 KB\n", "   TAG: reply_header_max_size(KB)\n This specifies the maximum size for HTTP headers in a reply.\n Reply headers are usually relatively small (about 512 bytes).\n Placing a limit on the reply header size will catch certain\n bugs (for example with persistent connections) and possibly\n buffer-overflow or denial-of-service attacks.\n Default:\n  reply_header_max_size 64 KB\n", "   TAG: request_body_max_size(bytes)\n This specifies the maximum size for an HTTP request body.\n In other words, the maximum size of a PUT/POST request.\n A user who attempts to send a request with a body larger\n than this limit receives an \"Invalid Request\" error message.\n If you set this parameter to a zero (the default), there will\n be no limit imposed.\n \n See also client_request_buffer_max_size for an alternative\n limitation on client uploads which can be configured.\n Default:\n  No limit.\n", "   TAG: client_request_buffer_max_size(bytes)\n This specifies the maximum buffer size of a client request.\n It prevents squid eating too much memory when somebody uploads\n a large file.\n Default:\n  client_request_buffer_max_size 512 KB\n", "   TAG: broken_posts\n A list of ACL elements which, if matched, causes Squid to send\n an extra CRLF pair after the body of a PUT/POST request.\n \n Some HTTP servers has broken implementations of PUT/POST,\n and rely on an extra CRLF pair sent by some WWW clients.\n \n Quote from RFC2616 section 4.1 on this matter:\n \n   Note: certain buggy HTTP/1.0 client implementations generate an\n   extra CRLF's after a POST request. To restate what is explicitly\n   forbidden by the BNF, an HTTP/1.1 client must not preface or follow\n   a request with an extra CRLF.\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n \n Example:\n  acl buggy_server url_regex ^http://....\n  broken_posts allow buggy_server\n Default:\n  Obey RFC 2616.\n", "   TAG: adaptation_uses_indirect_clienton|off\n Controls whether the indirect client IP address (instead of the direct\n client IP address) is passed to adaptation services.\n \n See also: follow_x_forwarded_for adaptation_send_client_ip\n Default:\n  adaptation_uses_indirect_client on\n", "   TAG: viaon|off\n If set (default), Squid will include a Via header in requests and\n replies as required by RFC2616.\n Default:\n  via on\n", "   TAG: ie_refreshon|off\n Microsoft Internet Explorer up until version 5.5 Service\n Pack 1 has an issue with transparent proxies, wherein it\n is impossible to force a refresh.  Turning this on provides\n a partial fix to the problem, by causing all IMS-REFRESH\n requests from older IE versions to check the origin server\n for fresh content.  This reduces hit ratio by some amount\n (~10% in my experience), but allows users to actually get\n fresh content when they want it.  Note because Squid\n cannot tell if the user is using 5.5 or 5.5SP1, the behavior\n of 5.5 is unchanged from old versions of Squid (i.e. a\n forced refresh is impossible).  Newer versions of IE will,\n hopefully, continue to have the new behavior and will be\n handled based on that assumption.  This option defaults to\n the old Squid behavior, which is better for hit ratios but\n worse for clients using IE, if they need to be able to\n force fresh content.\n Default:\n  ie_refresh off\n", "   TAG: vary_ignore_expireon|off\n Many HTTP servers supporting Vary gives such objects\n immediate expiry time with no cache-control header\n when requested by a HTTP/1.0 client. This option\n enables Squid to ignore such expiry times until\n HTTP/1.1 is fully implemented.\n \n WARNING: If turned on this may eventually cause some\n varying objects not intended for caching to get cached.\n Default:\n  vary_ignore_expire off\n", "   TAG: request_entities\n Squid defaults to deny GET and HEAD requests with request entities,\n as the meaning of such requests are undefined in the HTTP standard\n even if not explicitly forbidden.\n \n Set this directive to on if you have clients which insists\n on sending request entities in GET or HEAD requests. But be warned\n that there is server software (both proxies and web servers) which\n can fail to properly process this kind of request which may make you\n vulnerable to cache pollution attacks if enabled.\n Default:\n  request_entities off\n", "   TAG: request_header_access\n Usage: request_header_access header_name allow|deny [!]aclname ...\n \n WARNING: Doing this VIOLATES the HTTP standard.  Enabling\n this feature could make you liable for problems which it\n causes.\n \n This option replaces the old 'anonymize_headers' and the\n older 'http_anonymizer' option with something that is much\n more configurable. A list of ACLs for each header name allows\n removal of specific header fields under specific conditions.\n \n This option only applies to outgoing HTTP request headers (i.e.,\n headers sent by Squid to the next HTTP hop such as a cache peer\n or an origin server). The option has no effect during cache hit\n detection. The equivalent adaptation vectoring point in ICAP\n terminology is post-cache REQMOD.\n \n The option is applied to individual outgoing request header\n fields. For each request header field F, Squid uses the first\n qualifying sets of request_header_access rules:\n \n     1. Rules with header_name equal to F's name.\n     2. Rules with header_name 'Other', provided F's name is not\n        on the hard-coded list of commonly used HTTP header names.\n     3. Rules with header_name 'All'.\n \n Within that qualifying rule set, rule ACLs are checked as usual.\n If ACLs of an \"allow\" rule match, the header field is allowed to\n go through as is. If ACLs of a \"deny\" rule match, the header is\n removed and request_header_replace is then checked to identify\n if the removed header has a replacement. If no rules within the\n set have matching ACLs, the header field is left as is.\n \n For example, to achieve the same behavior as the old\n 'http_anonymizer standard' option, you should use:\n \n request_header_access From deny all\n request_header_access Referer deny all\n request_header_access User-Agent deny all\n \n Or, to reproduce the old 'http_anonymizer paranoid' feature\n you should use:\n \n request_header_access Authorization allow all\n request_header_access Proxy-Authorization allow all\n request_header_access Cache-Control allow all\n request_header_access Content-Length allow all\n request_header_access Content-Type allow all\n request_header_access Date allow all\n request_header_access Host allow all\n request_header_access If-Modified-Since allow all\n request_header_access Pragma allow all\n request_header_access Accept allow all\n request_header_access Accept-Charset allow all\n request_header_access Accept-Encoding allow all\n request_header_access Accept-Language allow all\n request_header_access Connection allow all\n request_header_access All deny all\n \n HTTP reply headers are controlled with the reply_header_access directive.\n \n By default, all headers are allowed (no anonymizing is performed).\n Default:\n  No limits.\n", "   TAG: reply_header_access\n Usage: reply_header_access header_name allow|deny [!]aclname ...\n \n WARNING: Doing this VIOLATES the HTTP standard.  Enabling\n this feature could make you liable for problems which it\n causes.\n \n This option only applies to reply headers, i.e., from the\n server to the client.\n \n This is the same as request_header_access, but in the other\n direction. Please see request_header_access for detailed\n documentation.\n \n For example, to achieve the same behavior as the old\n 'http_anonymizer standard' option, you should use:\n \n reply_header_access Server deny all\n reply_header_access WWW-Authenticate deny all\n reply_header_access Link deny all\n \n Or, to reproduce the old 'http_anonymizer paranoid' feature\n you should use:\n \n reply_header_access Allow allow all\n reply_header_access WWW-Authenticate allow all\n reply_header_access Proxy-Authenticate allow all\n reply_header_access Cache-Control allow all\n reply_header_access Content-Encoding allow all\n reply_header_access Content-Length allow all\n reply_header_access Content-Type allow all\n reply_header_access Date allow all\n reply_header_access Expires allow all\n reply_header_access Last-Modified allow all\n reply_header_access Location allow all\n reply_header_access Pragma allow all\n reply_header_access Content-Language allow all\n reply_header_access Retry-After allow all\n reply_header_access Title allow all\n reply_header_access Content-Disposition allow all\n reply_header_access Connection allow all\n reply_header_access All deny all\n \n HTTP request headers are controlled with the request_header_access directive.\n \n By default, all headers are allowed (no anonymizing is\n performed).\n Default:\n  No limits.\n", "   TAG: request_header_replace\n Usage:   request_header_replace header_name message\n Example: request_header_replace User-Agent Nutscrape/1.0 (CP/M; 8-bit)\n \n This option allows you to change the contents of headers\n denied with request_header_access above, by replacing them\n with some fixed string.\n \n This only applies to request headers, not reply headers.\n \n By default, headers are removed if denied.\n Default:\n  none\n", "   TAG: reply_header_replace\n         Usage:   reply_header_replace header_name message\n         Example: reply_header_replace Server Foo/1.0\n \n         This option allows you to change the contents of headers\n         denied with reply_header_access above, by replacing them\n         with some fixed string.\n \n         This only applies to reply headers, not request headers.\n \n         By default, headers are removed if denied.\n Default:\n  none\n", "   TAG: request_header_add\n Usage:   request_header_add field-name field-value acl1 [acl2] ...\n Example: request_header_add X-Client-CA \"CA=%ssl::>cert_issuer\" all\n \n This option adds header fields to outgoing HTTP requests (i.e.,\n request headers sent by Squid to the next HTTP hop such as a\n cache peer or an origin server). The option has no effect during\n cache hit detection. The equivalent adaptation vectoring point\n in ICAP terminology is post-cache REQMOD.\n \n Field-name is a token specifying an HTTP header name. If a\n standard HTTP header name is used, Squid does not check whether\n the new header conflicts with any existing headers or violates\n HTTP rules. If the request to be modified already contains a\n field with the same name, the old field is preserved but the\n header field values are not merged.\n \n Field-value is either a token or a quoted string. If quoted\n string format is used, then the surrounding quotes are removed\n while escape sequences and %macros are processed.\n \n In theory, all of the logformat codes can be used as %macros.\n However, unlike logging (which happens at the very end of\n transaction lifetime), the transaction may not yet have enough\n information to expand a macro when the new header value is needed.\n And some information may already be available to Squid but not yet\n committed where the macro expansion code can access it (report\n such instances!). The macro will be expanded into a single dash\n ('-') in such cases. Not all macros have been tested.\n \n One or more Squid ACLs may be specified to restrict header\n injection to matching requests. As always in squid.conf, all\n ACLs in an option ACL list must be satisfied for the insertion\n to happen. The request_header_add option supports fast ACLs\n only.\n Default:\n  none\n", "   TAG: note\n This option used to log custom information about the master\n transaction. For example, an admin may configure Squid to log\n which \"user group\" the transaction belongs to, where \"user group\"\n will be determined based on a set of ACLs and not [just]\n authentication information.\n Values of key/value pairs can be logged using %{key}note macros:\n \n     note key value acl ...\n     logformat myFormat ... %{key}note ...\n Default:\n  none\n", "   TAG: relaxed_header_parseron|off|warn\n In the default \"on\" setting Squid accepts certain forms\n of non-compliant HTTP messages where it is unambiguous\n what the sending application intended even if the message\n is not correctly formatted. The messages is then normalized\n to the correct form when forwarded by Squid.\n \n If set to \"warn\" then a warning will be emitted in cache.log\n each time such HTTP error is encountered.\n \n If set to \"off\" then such HTTP errors will cause the request\n or response to be rejected.\n Default:\n  relaxed_header_parser on\n", "   TAG: collapsed_forwarding(on|off)\n        This option controls whether Squid is allowed to merge multiple\n        potentially cachable requests for the same URI before Squid knows\n        whether the response is going to be cachable.\n \n        This feature is disabled by default: Enabling collapsed forwarding\n        needlessly delays forwarding requests that look cachable (when they are\n        collapsed) but then need to be forwarded individually anyway because\n        they end up being for uncachable content. However, in some cases, such\n        as accelleration of highly cachable content with periodic or groupped\n        expiration times, the gains from collapsing [large volumes of\n        simultenous refresh requests] outweigh losses from such delays.\n Default:\n  collapsed_forwarding off\n", "   TAG: forward_timeouttime-units\n This parameter specifies how long Squid should at most attempt in\n finding a forwarding path for the request before giving up.\n Default:\n  forward_timeout 4 minutes\n", "   TAG: connect_timeouttime-units\n This parameter specifies how long to wait for the TCP connect to\n the requested server or peer to complete before Squid should\n attempt to find another path where to forward the request.\n Default:\n  connect_timeout 1 minute\n", "   TAG: peer_connect_timeouttime-units\n This parameter specifies how long to wait for a pending TCP\n connection to a peer cache.  The default is 30 seconds.   You\n may also set different timeout values for individual neighbors\n with the 'connect-timeout' option on a 'cache_peer' line.\n Default:\n  peer_connect_timeout 30 seconds\n", "   TAG: read_timeouttime-units\n Applied on peer server connections.\n \n After each successful read(), the timeout will be extended by this\n amount.  If no data is read again after this amount of time,\n the request is aborted and logged with ERR_READ_TIMEOUT.\n \n The default is 15 minutes.\n Default:\n  read_timeout 15 minutes\n", "   TAG: write_timeouttime-units\n This timeout is tracked for all connections that have data\n available for writing and are waiting for the socket to become\n ready. After each successful write, the timeout is extended by\n the configured amount. If Squid has data to write but the\n connection is not ready for the configured duration, the\n transaction associated with the connection is terminated. The\n default is 15 minutes.\n Default:\n  write_timeout 15 minutes\n", "   TAG: request_timeout\n How long to wait for complete HTTP request headers after initial\n connection establishment.\n Default:\n  request_timeout 5 minutes\n", "   TAG: client_idle_pconn_timeout\n How long to wait for the next HTTP request on a persistent\n client connection after the previous request completes.\n Default:\n  client_idle_pconn_timeout 2 minutes\n", "   TAG: ftp_client_idle_timeout\n How long to wait for an FTP request on a connection to Squid ftp_port.\n Many FTP clients do not deal with idle connection closures well,\n necessitating a longer default timeout than client_idle_pconn_timeout\n used for incoming HTTP requests.\n Default:\n  ftp_client_idle_timeout 30 minutes\n", "   TAG: client_lifetimetime-units\n The maximum amount of time a client (browser) is allowed to\n remain connected to the cache process.  This protects the Cache\n from having a lot of sockets (and hence file descriptors) tied up\n in a CLOSE_WAIT state from remote clients that go away without\n properly shutting down (either because of a network failure or\n because of a poor client implementation).  The default is one\n day, 1440 minutes.\n \n NOTE:  The default value is intended to be much larger than any\n client would ever need to be connected to your cache.  You\n should probably change client_lifetime only as a last resort.\n If you seem to have many client connections tying up\n filedescriptors, we recommend first tuning the read_timeout,\n request_timeout, persistent_request_timeout and quick_abort values.\n Default:\n  client_lifetime 1 day\n", "   TAG: half_closed_clients\n Some clients may shutdown the sending side of their TCP\n connections, while leaving their receiving sides open.Sometimes,\n Squid can not tell the difference between a half-closed and a\n fully-closed TCP connection.\n \n By default, Squid will immediately close client connections when\n read(2) returns \"no more data to read.\"\n \n Change this option to 'on' and Squid will keep open connections\n until a read(2) or write(2) on the socket returns an error.\n This may show some benefits for reverse proxies. But if not\n it is recommended to leave OFF.\n Default:\n  half_closed_clients off\n", "   TAG: server_idle_pconn_timeout\n Timeout for idle persistent connections to servers and other\n proxies.\n Default:\n  server_idle_pconn_timeout 1 minute\n", "   TAG: ident_timeout\n Maximum time to wait for IDENT lookups to complete.\n \n If this is too high, and you enabled IDENT lookups from untrusted\n users, you might be susceptible to denial-of-service by having\n many ident requests going at once.\n Default:\n  ident_timeout 10 seconds\n", "   TAG: shutdown_lifetimetime-units\n When SIGTERM or SIGHUP is received, the cache is put into\n \"shutdown pending\" mode until all active sockets are closed.\n This value is the lifetime to set for all open descriptors\n during shutdown mode.  Any active clients after this many\n seconds will receive a 'timeout' message.\n Default:\n  shutdown_lifetime 30 seconds\n", "   TAG: cache_mgr\n Email-address of local cache manager who will receive\n mail if the cache dies.  The default is \"webmaster\".\n Default:\n  cache_mgr webmaster\n", "   TAG: mail_from\n From: email-address for mail sent when the cache dies.\n The default is to use 'squid@unique_hostname'.\n \n See also: unique_hostname directive.\n Default:\n  none\n", "   TAG: mail_program\n Email program used to send mail if the cache dies.\n The default is \"mail\". The specified program must comply\n with the standard Unix mail syntax:\n   mail-program recipient < mailfile\n \n Optional command line options can be specified.\n Default:\n  mail_program mail\n", "   TAG: cache_effective_user\n If you start Squid as root, it will change its effective/real\n UID/GID to the user specified below.  The default is to change\n to UID of proxy.\n see also; cache_effective_group\n Default:\n  cache_effective_user proxy\n", "   TAG: cache_effective_group\n Squid sets the GID to the effective user's default group ID\n (taken from the password file) and supplementary group list\n from the groups membership.\n \n If you want Squid to run with a specific GID regardless of\n the group memberships of the effective user then set this\n to the group (or GID) you want Squid to run as. When set\n all other group privileges of the effective user are ignored\n and only this GID is effective. If Squid is not started as\n root the user starting Squid MUST be member of the specified\n group.\n \n This option is not recommended by the Squid Team.\n Our preference is for administrators to configure a secure\n user account for squid with UID/GID matching system policies.\n Default:\n  Use system group memberships of the cache_effective_user account\n", "   TAG: httpd_suppress_version_stringon|off\n Suppress Squid version string info in HTTP headers and HTML error pages.\n Default:\n  httpd_suppress_version_string off\n", "   TAG: visible_hostname\n If you want to present a special hostname in error messages, etc,\n define this.  Otherwise, the return value of gethostname()\n will be used. If you have multiple caches in a cluster and\n get errors about IP-forwarding you must set them to have individual\n names with this setting.\n Default:\n  Automatically detect the system host name\n", "   TAG: unique_hostname\n If you want to have multiple machines with the same\n 'visible_hostname' you must give each machine a different\n 'unique_hostname' so forwarding loops can be detected.\n Default:\n  Copy the value from visible_hostname\n", "   TAG: hostname_aliases\n A list of other DNS names your cache has.\n Default:\n  none\n", "   TAG: umask\n Minimum umask which should be enforced while the proxy\n is running, in addition to the umask set at startup.\n \n For a traditional octal representation of umasks, start\n         your value with 0.\n Default:\n  umask 027\n", "   TAG: announce_period\n This is how frequently to send cache announcements.\n \n To enable announcing your cache, just set an announce period.\n \n Example:\n announce_period 1 day\n Default:\n  Announcement messages disabled.\n", "   TAG: announce_host\n Set the hostname where announce registration messages will be sent.\n \n See also announce_port and announce_file\n Default:\n  announce_host tracker.ircache.net\n", "   TAG: announce_file\n The contents of this file will be included in the announce\n registration messages.\n Default:\n  none\n", "   TAG: announce_port\n Set the port where announce registration messages will be sent.\n \n See also announce_host and announce_file\n Default:\n  announce_port 3131\n", "   TAG: httpd_accel_surrogate_id\n Surrogates (http://www.esi.org/architecture_spec_1.0.html)\n need an identification token to allow control targeting. Because\n a farm of surrogates may all perform the same tasks, they may share\n an identification token.\n Default:\n  visible_hostname is used if no specific ID is set.\n", "   TAG: http_accel_surrogate_remoteon|off\n Remote surrogates (such as those in a CDN) honour the header\n \"Surrogate-Control: no-store-remote\".\n \n Set this to on to have squid behave as a remote surrogate.\n Default:\n  http_accel_surrogate_remote off\n", "   TAG: esi_parserlibxml2|expat|custom\n ESI markup is not strictly XML compatible. The custom ESI parser\n will give higher performance, but cannot handle non ASCII character\n encodings.\n Default:\n  esi_parser custom\n", "   TAG: delay_pools\n This represents the number of delay pools to be used.  For example,\n if you have one class 2 delay pool and one class 3 delays pool, you\n have a total of 2 delay pools.\n \n See also delay_parameters, delay_class, delay_access for pool\n configuration details.\n Default:\n  delay_pools 0\n", "   TAG: delay_class\n This defines the class of each delay pool.  There must be exactly one\n delay_class line for each delay pool.  For example, to define two\n delay pools, one of class 2 and one of class 3, the settings above\n and here would be:\n \n Example:\n     delay_pools 4        4 delay pools\n     delay_class 1 2      pool 1 is a class 2 pool\n     delay_class 2 3      pool 2 is a class 3 pool\n     delay_class 3 4      pool 3 is a class 4 pool\n     delay_class 4 5      pool 4 is a class 5 pool\n \n The delay pool classes are:\n \n class 1Everything is limited by a single aggregate\n bucket.\n \n class 2 Everything is limited by a single aggregate\n bucket as well as an \"individual\" bucket chosen\n from bits 25 through 32 of the IPv4 address.\n \n class 3Everything is limited by a single aggregate\n bucket as well as a \"network\" bucket chosen\n from bits 17 through 24 of the IP address and a\n \"individual\" bucket chosen from bits 17 through\n 32 of the IPv4 address.\n \n class 4Everything in a class 3 delay pool, with an\n additional limit on a per user basis. This\n only takes effect if the username is established\n in advance - by forcing authentication in your\n http_access rules.\n \n class 5Requests are grouped according their tag (see\n external_acl's tag= reply).\n \n \n Each pool also requires a delay_parameters directive to configure the pool size\n and speed limits used whenever the pool is applied to a request. Along with\n a set of delay_access directives to determine when it is used.\n \n NOTE: If an IP address is a.b.c.d\n -> bits 25 through 32 are \"d\"\n -> bits 17 through 24 are \"c\"\n -> bits 17 through 32 are \"c * 256 + d\"\n \n NOTE-2: Due to the use of bitmasks in class 2,3,4 pools they only apply to\n IPv4 traffic. Class 1 and 5 pools may be used with IPv6 traffic.\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n \n See also delay_parameters and delay_access.\n Default:\n  none\n", "   TAG: delay_access\n This is used to determine which delay pool a request falls into.\n \n delay_access is sorted per pool and the matching starts with pool 1,\n then pool 2, ..., and finally pool N. The first delay pool where the\n request is allowed is selected for the request. If it does not allow\n the request to any pool then the request is not delayed (default).\n \n For example, if you want some_big_clients in delay\n pool 1 and lotsa_little_clients in delay pool 2:\n \n delay_access 1 allow some_big_clients\n delay_access 1 deny all\n delay_access 2 allow lotsa_little_clients\n delay_access 2 deny all\n delay_access 3 allow authenticated_clients\n \n See also delay_parameters and delay_class.\n \n Default:\n  Deny using the pool, unless allow rules exist in squid.conf for the pool.\n", "   TAG: delay_parameters\n This defines the parameters for a delay pool.  Each delay pool has\n a number of \"buckets\" associated with it, as explained in the\n description of delay_class.\n \n For a class 1 delay pool, the syntax is:\n delay_class pool 1\n delay_parameters pool aggregate\n \n For a class 2 delay pool:\n delay_class pool 2\n delay_parameters pool aggregate individual\n \n For a class 3 delay pool:\n delay_class pool 3\n delay_parameters pool aggregate network individual\n \n For a class 4 delay pool:\n delay_class pool 4\n delay_parameters pool aggregate network individual user\n \n For a class 5 delay pool:\n delay_class pool 5\n delay_parameters pool tagrate\n \n The option variables are:\n \n poola pool number - ie, a number between 1 and the\n number specified in delay_pools as used in\n delay_class lines.\n \n aggregatethe speed limit parameters for the aggregate bucket\n (class 1, 2, 3).\n \n individualthe speed limit parameters for the individual\n buckets (class 2, 3).\n \n networkthe speed limit parameters for the network buckets\n (class 3).\n \n userthe speed limit parameters for the user buckets\n (class 4).\n \n tagratethe speed limit parameters for the tag buckets\n (class 5).\n \n A pair of delay parameters is written restore/maximum, where restore is\n the number of bytes (not bits - modem and network speeds are usually\n quoted in bits) per second placed into the bucket, and maximum is the\n maximum number of bytes which can be in the bucket at any time.\n \n There must be one delay_parameters line for each delay pool.\n \n \n For example, if delay pool number 1 is a class 2 delay pool as in the\n above example, and is being used to strictly limit each host to 64Kbit/sec\n (plus overheads), with no overall limit, the line is:\n \n delay_parameters 1 none 8000/8000\n \n Note that 8 x 8K Byte/sec -> 64K bit/sec.\n \n Note that the word 'none' is used to represent no limit.\n \n \n And, if delay pool number 2 is a class 3 delay pool as in the above\n example, and you want to limit it to a total of 256Kbit/sec (strict limit)\n with each 8-bit network permitted 64Kbit/sec (strict limit) and each\n individual host permitted 4800bit/sec with a bucket maximum size of 64Kbits\n to permit a decent web page to be downloaded at a decent speed\n (if the network is not being limited due to overuse) but slow down\n large downloads more significantly:\n \n delay_parameters 2 32000/32000 8000/8000 600/8000\n \n Note that 8 x  32K Byte/sec ->  256K bit/sec.\n   8 x   8K Byte/sec ->   64K bit/sec.\n   8 x 600  Byte/sec -> 4800  bit/sec.\n \n \n Finally, for a class 4 delay pool as in the example - each user will\n be limited to 128Kbits/sec no matter how many workstations they are logged into.:\n \n delay_parameters 4 32000/32000 8000/8000 600/64000 16000/16000\n \n \n See also delay_class and delay_access.\n \n Default:\n  none\n", "   TAG: delay_initial_bucket_level(percent, 0-100)\n The initial bucket percentage is used to determine how much is put\n in each bucket when squid starts, is reconfigured, or first notices\n a host accessing it (in class 2 and class 3, individual hosts and\n networks only have buckets associated with them once they have been\n \"seen\" by squid).\n Default:\n  delay_initial_bucket_level 50\n", "   TAG: client_delay_pools\n This option specifies the number of client delay pools used. It must\n preceed other client_delay_* options.\n \n Example:\n client_delay_pools 2\n \n See also client_delay_parameters and client_delay_access.\n Default:\n  client_delay_pools 0\n", "   TAG: client_delay_initial_bucket_level(percent, 0-no_limit)\n This option determines the initial bucket size as a percentage of\n max_bucket_size from client_delay_parameters. Buckets are created\n at the time of the \"first\" connection from the matching IP. Idle\n buckets are periodically deleted up.\n \n You can specify more than 100 percent but note that such \"oversized\"\n buckets are not refilled until their size goes down to max_bucket_size\n from client_delay_parameters.\n \n Example:\n client_delay_initial_bucket_level 50\n Default:\n  client_delay_initial_bucket_level 50\n", "   TAG: client_delay_parameters\n \n This option configures client-side bandwidth limits using the\n following format:\n \n     client_delay_parameters pool speed_limit max_bucket_size\n \n pool is an integer ID used for client_delay_access matching.\n \n speed_limit is bytes added to the bucket per second.\n \n max_bucket_size is the maximum size of a bucket, enforced after any\n speed_limit additions.\n \n Please see the delay_parameters option for more information and\n examples.\n \n Example:\n client_delay_parameters 1 1024 2048\n client_delay_parameters 2 51200 16384\n \n See also client_delay_access.\n \n Default:\n  none\n", "   TAG: client_delay_access\n This option determines the client-side delay pool for the\n request:\n \n     client_delay_access pool_ID allow|deny acl_name\n \n All client_delay_access options are checked in their pool ID\n order, starting with pool 1. The first checked pool with allowed\n request is selected for the request. If no ACL matches or there\n are no client_delay_access options, the request bandwidth is not\n limited.\n \n The ACL-selected pool is then used to find the\n client_delay_parameters for the request. Client-side pools are\n not used to aggregate clients. Clients are always aggregated\n based on their source IP addresses (one bucket per source IP).\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Additionally, only the client TCP connection details are available.\n ACLs testing HTTP properties will not work.\n \n Please see delay_access for more examples.\n \n Example:\n client_delay_access 1 allow low_rate_network\n client_delay_access 2 allow vips_network\n \n \n See also client_delay_parameters and client_delay_pools.\n Default:\n  Deny use of the pool, unless allow rules exist in squid.conf for the pool.\n", "   TAG: wccp_router\n Use this option to define your WCCP ``home'' router for\n Squid.\n \n wccp_router supports a single WCCP(v1) router\n \n wccp2_router supports multiple WCCPv2 routers\n \n only one of the two may be used at the same time and defines\n which version of WCCP to use.\n Default:\n  WCCP disabled.\n", "   TAG: wccp2_router\n Use this option to define your WCCP ``home'' router for\n Squid.\n \n wccp_router supports a single WCCP(v1) router\n \n wccp2_router supports multiple WCCPv2 routers\n \n only one of the two may be used at the same time and defines\n which version of WCCP to use.\n Default:\n  WCCPv2 disabled.\n", "   TAG: wccp_version\n This directive is only relevant if you need to set up WCCP(v1)\n to some very old and end-of-life Cisco routers. In all other\n setups it must be left unset or at the default setting.\n It defines an internal version in the WCCP(v1) protocol,\n with version 4 being the officially documented protocol.\n \n According to some users, Cisco IOS 11.2 and earlier only\n support WCCP version 3.  If you're using that or an earlier\n version of IOS, you may need to change this value to 3, otherwise\n do not specify this parameter.\n Default:\n  wccp_version 4\n", "   TAG: wccp2_rebuild_wait\n If this is enabled Squid will wait for the cache dir rebuild to finish\n before sending the first wccp2 HereIAm packet\n Default:\n  wccp2_rebuild_wait on\n", "   TAG: wccp2_forwarding_method\n WCCP2 allows the setting of forwarding methods between the\n router/switch and the cache.  Valid values are as follows:\n \n gre - GRE encapsulation (forward the packet in a GRE/WCCP tunnel)\n l2  - L2 redirect (forward the packet using Layer 2/MAC rewriting)\n \n Currently (as of IOS 12.4) cisco routers only support GRE.\n Cisco switches only support the L2 redirect assignment method.\n Default:\n  wccp2_forwarding_method gre\n", "   TAG: wccp2_return_method\n WCCP2 allows the setting of return methods between the\n router/switch and the cache for packets that the cache\n decides not to handle.  Valid values are as follows:\n \n gre - GRE encapsulation (forward the packet in a GRE/WCCP tunnel)\n l2  - L2 redirect (forward the packet using Layer 2/MAC rewriting)\n \n Currently (as of IOS 12.4) cisco routers only support GRE.\n Cisco switches only support the L2 redirect assignment.\n \n If the \"ip wccp redirect exclude in\" command has been\n enabled on the cache interface, then it is still safe for\n the proxy server to use a l2 redirect method even if this\n option is set to GRE.\n Default:\n  wccp2_return_method gre\n", "   TAG: wccp2_assignment_method\n WCCP2 allows the setting of methods to assign the WCCP hash\n Valid values are as follows:\n \n hash - Hash assignment\n mask - Mask assignment\n \n As a general rule, cisco routers support the hash assignment method\n and cisco switches support the mask assignment method.\n Default:\n  wccp2_assignment_method hash\n", "   TAG: wccp2_service\n WCCP2 allows for multiple traffic services. There are two\n types: \"standard\" and \"dynamic\". The standard type defines\n one service id - http (id 0). The dynamic service ids can be from\n 51 to 255 inclusive.  In order to use a dynamic service id\n one must define the type of traffic to be redirected; this is done\n using the wccp2_service_info option.\n \n The \"standard\" type does not require a wccp2_service_info option,\n just specifying the service id will suffice.\n \n MD5 service authentication can be enabled by adding\n \"password=<password>\" to the end of this service declaration.\n \n Examples:\n \n wccp2_service standard 0  for the 'web-cache' standard service\n wccp2_service dynamic 80  a dynamic service type which will be\n   fleshed out with subsequent options.\n wccp2_service standard 0 password=foo\n Default:\n  Use the 'web-cache' standard service.\n", "   TAG: wccp2_service_info\n Dynamic WCCPv2 services require further information to define the\n traffic you wish to have diverted.\n \n The format is:\n \n wccp2_service_info <id> protocol=<protocol> flags=<flag>,<flag>..\n     priority=<priority> ports=<port>,<port>..\n \n The relevant WCCPv2 flags:\n + src_ip_hash, dst_ip_hash\n + source_port_hash, dst_port_hash\n + src_ip_alt_hash, dst_ip_alt_hash\n + src_port_alt_hash, dst_port_alt_hash\n + ports_source\n \n The port list can be one to eight entries.\n \n Example:\n \n wccp2_service_info 80 protocol=tcp flags=src_ip_hash,ports_source\n     priority=240 ports=80\n \n Note: the service id must have been defined by a previous\n 'wccp2_service dynamic <id>' entry.\n Default:\n  none\n", "   TAG: wccp2_weight\n Each cache server gets assigned a set of the destination\n hash proportional to their weight.\n Default:\n  wccp2_weight 10000\n", "   TAG: wccp_address\n Use this option if you require WCCPv2 to use a specific\n interface address.\n \n The default behavior is to not bind to any specific address.\n Default:\n  Address selected by the operating system.\n", "   TAG: wccp2_address\n Use this option if you require WCCP to use a specific\n interface address.\n \n The default behavior is to not bind to any specific address.\n Default:\n  Address selected by the operating system.\n", "   TAG: client_persistent_connections\n Persistent connection support for clients.\n Squid uses persistent connections (when allowed). You can use\n this option to disable persistent connections with clients.\n Default:\n  client_persistent_connections on\n", "   TAG: server_persistent_connections\n Persistent connection support for servers.\n Squid uses persistent connections (when allowed). You can use\n this option to disable persistent connections with servers.\n Default:\n  server_persistent_connections on\n", "   TAG: persistent_connection_after_error\n With this directive the use of persistent connections after\n HTTP errors can be disabled. Useful if you have clients\n who fail to handle errors on persistent connections proper.\n Default:\n  persistent_connection_after_error on\n", "   TAG: detect_broken_pconn\n Some servers have been found to incorrectly signal the use\n of HTTP/1.0 persistent connections even on replies not\n compatible, causing significant delays. This server problem\n has mostly been seen on redirects.\n \n By enabling this directive Squid attempts to detect such\n broken replies and automatically assume the reply is finished\n after 10 seconds timeout.\n Default:\n  detect_broken_pconn off\n", "   TAG: digest_generation\n This controls whether the server will generate a Cache Digest\n of its contents.  By default, Cache Digest generation is\n enabled if Squid is compiled with --enable-cache-digests defined.\n Default:\n  digest_generation on\n", "   TAG: digest_bits_per_entry\n This is the number of bits of the server's Cache Digest which\n will be associated with the Digest entry for a given HTTP\n Method and URL (public key) combination.  The default is 5.\n Default:\n  digest_bits_per_entry 5\n", "   TAG: digest_rebuild_period(seconds)\n This is the wait time between Cache Digest rebuilds.\n Default:\n  digest_rebuild_period 1 hour\n", "   TAG: digest_rewrite_period(seconds)\n This is the wait time between Cache Digest writes to\n disk.\n Default:\n  digest_rewrite_period 1 hour\n", "   TAG: digest_swapout_chunk_size(bytes)\n This is the number of bytes of the Cache Digest to write to\n disk at a time.  It defaults to 4096 bytes (4KB), the Squid\n default swap page.\n Default:\n  digest_swapout_chunk_size 4096 bytes\n", "   TAG: digest_rebuild_chunk_percentage(percent, 0-100)\n This is the percentage of the Cache Digest to be scanned at a\n time.  By default it is set to 10% of the Cache Digest.\n Default:\n  digest_rebuild_chunk_percentage 10\n", "   TAG: snmp_port\n The port number where Squid listens for SNMP requests. To enable\n SNMP support set this to a suitable port number. Port number\n 3401 is often used for the Squid SNMP agent. By default it's\n set to \"0\" (disabled)\n \n Example:\n snmp_port 3401\n Default:\n  SNMP disabled.\n", "   TAG: snmp_access\n Allowing or denying access to the SNMP port.\n \n All access to the agent is denied by default.\n usage:\n \n snmp_access allow|deny [!]aclname ...\n \n This clause only supports fast acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n \n Example:\n  snmp_access allow snmppublic localhost\n  snmp_access deny all\n Default:\n  Deny, unless rules exist in squid.conf.\n", "   TAG: snmp_incoming_address\n Just like 'udp_incoming_address', but for the SNMP port.\n \n snmp_incoming_addressis used for the SNMP socket receiving\n messages from SNMP agents.\n \n The default snmp_incoming_address is to listen on all\n available network interfaces.\n Default:\n  Accept SNMP packets from all machine interfaces.\n", "   TAG: snmp_outgoing_address\n Just like 'udp_outgoing_address', but for the SNMP port.\n \n snmp_outgoing_addressis used for SNMP packets returned to SNMP\n agents.\n \n If snmp_outgoing_address is not set it will use the same socket\n as snmp_incoming_address. Only change this if you want to have\n SNMP replies sent using another address than where this Squid\n listens for SNMP queries.\n \n NOTE, snmp_incoming_address and snmp_outgoing_address can not have\n the same value since they both use the same port.\n Default:\n  Use snmp_incoming_address or an address selected by the operating system.\n", "   TAG: icp_port\n The port number where Squid sends and receives ICP queries to\n and from neighbor caches.  The standard UDP port for ICP is 3130.\n \n Example:\n icp_port 3130\n Default:\n  ICP disabled.\n", "   TAG: htcp_port\n The port number where Squid sends and receives HTCP queries to\n and from neighbor caches.  To turn it on you want to set it to\n 4827.\n \n Example:\n htcp_port 4827\n Default:\n  HTCP disabled.\n", "   TAG: log_icp_querieson|off\n If set, ICP queries are logged to access.log. You may wish\n do disable this if your ICP load is VERY high to speed things\n up or to simplify log analysis.\n Default:\n  log_icp_queries on\n", "   TAG: udp_incoming_address\n udp_incoming_addressis used for UDP packets received from other\n caches.\n \n The default behavior is to not bind to any specific address.\n \n Only change this if you want to have all UDP queries received on\n a specific interface/address.\n \n NOTE: udp_incoming_address is used by the ICP, HTCP, and DNS\n modules. Altering it will affect all of them in the same manner.\n \n see also; udp_outgoing_address\n \n NOTE, udp_incoming_address and udp_outgoing_address can not\n have the same value since they both use the same port.\n Default:\n  Accept packets from all machine interfaces.\n", "   TAG: udp_outgoing_address\n udp_outgoing_addressis used for UDP packets sent out to other\n caches.\n \n The default behavior is to not bind to any specific address.\n \n Instead it will use the same socket as udp_incoming_address.\n Only change this if you want to have UDP queries sent using another\n address than where this Squid listens for UDP queries from other\n caches.\n \n NOTE: udp_outgoing_address is used by the ICP, HTCP, and DNS\n modules. Altering it will affect all of them in the same manner.\n \n see also; udp_incoming_address\n \n NOTE, udp_incoming_address and udp_outgoing_address can not\n have the same value since they both use the same port.\n Default:\n  Use udp_incoming_address or an address selected by the operating system.\n", "   TAG: icp_hit_staleon|off\n If you want to return ICP_HIT for stale cache objects, set this\n option to 'on'.  If you have sibling relationships with caches\n in other administrative domains, this should be 'off'.  If you only\n have sibling relationships with caches under your control,\n it is probably okay to set this to 'on'.\n If set to 'on', your siblings should use the option \"allow-miss\"\n on their cache_peer lines for connecting to you.\n Default:\n  icp_hit_stale off\n", "   TAG: minimum_direct_hops\n If using the ICMP pinging stuff, do direct fetches for sites\n which are no more than this many hops away.\n Default:\n  minimum_direct_hops 4\n", "   TAG: minimum_direct_rtt(msec)\n If using the ICMP pinging stuff, do direct fetches for sites\n which are no more than this many rtt milliseconds away.\n Default:\n  minimum_direct_rtt 400\n", "   TAG: netdb_low\n The low water mark for the ICMP measurement database.\n \n Note: high watermark controlled by netdb_high directive.\n \n These watermarks are counts, not percents.  The defaults are\n (low) 900 and (high) 1000.  When the high water mark is\n reached, database entries will be deleted until the low\n mark is reached.\n Default:\n  netdb_low 900\n", "   TAG: netdb_high\n The high water mark for the ICMP measurement database.\n \n Note: low watermark controlled by netdb_low directive.\n \n These watermarks are counts, not percents.  The defaults are\n (low) 900 and (high) 1000.  When the high water mark is\n reached, database entries will be deleted until the low\n mark is reached.\n Default:\n  netdb_high 1000\n", "   TAG: netdb_ping_period\n The minimum period for measuring a site.  There will be at\n least this much delay between successive pings to the same\n network.  The default is five minutes.\n Default:\n  netdb_ping_period 5 minutes\n", "   TAG: query_icmpon|off\n If you want to ask your peers to include ICMP data in their ICP\n replies, enable this option.\n \n If your peer has configured Squid (during compilation) with\n '--enable-icmp' that peer will send ICMP pings to origin server\n sites of the URLs it receives.  If you enable this option the\n ICP replies from that peer will include the ICMP data (if available).\n Then, when choosing a parent cache, Squid will choose the parent with\n the minimal RTT to the origin server.  When this happens, the\n hierarchy field of the access.log will be\n \"CLOSEST_PARENT_MISS\".  This option is off by default.\n Default:\n  query_icmp off\n", "   TAG: test_reachabilityon|off\n When this is 'on', ICP MISS replies will be ICP_MISS_NOFETCH\n instead of ICP_MISS if the target host is NOT in the ICMP\n database, or has a zero RTT.\n Default:\n  test_reachability off\n", "   TAG: icp_query_timeout(msec)\n Normally Squid will automatically determine an optimal ICP\n query timeout value based on the round-trip-time of recent ICP\n queries.  If you want to override the value determined by\n Squid, set this 'icp_query_timeout' to a non-zero value.  This\n value is specified in MILLISECONDS, so, to use a 2-second\n timeout (the old default), you would write:\n \n icp_query_timeout 2000\n Default:\n  Dynamic detection.\n", "   TAG: maximum_icp_query_timeout(msec)\n Normally the ICP query timeout is determined dynamically.  But\n sometimes it can lead to very large values (say 5 seconds).\n Use this option to put an upper limit on the dynamic timeout\n value.  Do NOT use this option to always use a fixed (instead\n of a dynamic) timeout value. To set a fixed timeout see the\n 'icp_query_timeout' directive.\n Default:\n  maximum_icp_query_timeout 2000\n", "   TAG: minimum_icp_query_timeout(msec)\n Normally the ICP query timeout is determined dynamically.  But\n sometimes it can lead to very small timeouts, even lower than\n the normal latency variance on your link due to traffic.\n Use this option to put an lower limit on the dynamic timeout\n value.  Do NOT use this option to always use a fixed (instead\n of a dynamic) timeout value. To set a fixed timeout see the\n 'icp_query_timeout' directive.\n Default:\n  minimum_icp_query_timeout 5\n", "   TAG: background_ping_ratetime-units\n Controls how often the ICP pings are sent to siblings that\n have background-ping set.\n Default:\n  background_ping_rate 10 seconds\n", "   TAG: mcast_groups\n This tag specifies a list of multicast groups which your server\n should join to receive multicasted ICP queries.\n \n NOTE!  Be very careful what you put here!  Be sure you\n understand the difference between an ICP _query_ and an ICP\n _reply_.  This option is to be set only if you want to RECEIVE\n multicast queries.  Do NOT set this option to SEND multicast\n ICP (use cache_peer for that).  ICP replies are always sent via\n unicast, so this option does not affect whether or not you will\n receive replies from multicast group members.\n \n You must be very careful to NOT use a multicast address which\n is already in use by another group of caches.\n \n If you are unsure about multicast, please read the Multicast\n chapter in the Squid FAQ (http://www.squid-cache.org/FAQ/).\n \n Usage: mcast_groups 239.128.16.128 224.0.1.20\n \n By default, Squid doesn't listen on any multicast groups.\n Default:\n  none\n", "   TAG: mcast_miss_addr\n  Note: This option is only available if Squid is rebuilt with the\n        -DMULTICAST_MISS_STREAM define\n \n If you enable this option, every \"cache miss\" URL will\n be sent out on the specified multicast address.\n \n Do not enable this option unless you are are absolutely\n certain you understand what you are doing.\n Default:\n  disabled.\n", "   TAG: mcast_miss_ttl\n  Note: This option is only available if Squid is rebuilt with the\n        -DMULTICAST_MISS_STREAM define\n \n This is the time-to-live value for packets multicasted\n when multicasting off cache miss URLs is enabled.  By\n default this is set to 'site scope', i.e. 16.\n Default:\n  mcast_miss_ttl 16\n", "   TAG: mcast_miss_port\n  Note: This option is only available if Squid is rebuilt with the\n        -DMULTICAST_MISS_STREAM define\n \n This is the port number to be used in conjunction with\n 'mcast_miss_addr'.\n Default:\n  mcast_miss_port 3135\n", "   TAG: mcast_miss_encode_key\n  Note: This option is only available if Squid is rebuilt with the\n        -DMULTICAST_MISS_STREAM define\n \n The URLs that are sent in the multicast miss stream are\n encrypted.  This is the encryption key.\n Default:\n  mcast_miss_encode_key XXXXXXXXXXXXXXXX\n", "   TAG: mcast_icp_query_timeout(msec)\n For multicast peers, Squid regularly sends out ICP \"probes\" to\n count how many other peers are listening on the given multicast\n address.  This value specifies how long Squid should wait to\n count all the replies.  The default is 2000 msec, or 2\n seconds.\n Default:\n  mcast_icp_query_timeout 2000\n", "   TAG: icon_directory\n Where the icons are stored. These are normally kept in\n /usr/share/squid/icons\n Default:\n  icon_directory /usr/share/squid/icons\n", "   TAG: global_internal_static\n This directive controls is Squid should intercept all requests for\n /squid-internal-static/ no matter which host the URL is requesting\n (default on setting), or if nothing special should be done for\n such URLs (off setting). The purpose of this directive is to make\n icons etc work better in complex cache hierarchies where it may\n not always be possible for all corners in the cache mesh to reach\n the server generating a directory listing.\n Default:\n  global_internal_static on\n", "   TAG: short_icon_urls\n If this is enabled Squid will use short URLs for icons.\n If disabled it will revert to the old behavior of including\n it's own name and port in the URL.\n \n If you run a complex cache hierarchy with a mix of Squid and\n other proxies you may need to disable this directive.\n Default:\n  short_icon_urls on\n", "   TAG: error_directory\n If you wish to create your own versions of the default\n error files to customize them to suit your company copy\n the error/template files to another directory and point\n this tag at them.\n \n WARNING: This option will disable multi-language support\n          on error pages if used.\n \n The squid developers are interested in making squid available in\n a wide variety of languages. If you are making translations for a\n language that Squid does not currently provide please consider\n contributing your translation back to the project.\n http://wiki.squid-cache.org/Translations\n \n The squid developers working on translations are happy to supply drop-in\n translated error files in exchange for any new language contributions.\n Default:\n  Send error pages in the clients preferred language\n", "   TAG: error_default_language\n Set the default language which squid will send error pages in\n if no existing translation matches the clients language\n preferences.\n \n If unset (default) generic English will be used.\n \n The squid developers are interested in making squid available in\n a wide variety of languages. If you are interested in making\n translations for any language see the squid wiki for details.\n http://wiki.squid-cache.org/Translations\n Default:\n  Generate English language pages.\n", "   TAG: error_log_languages\n Log to cache.log what languages users are attempting to\n auto-negotiate for translations.\n \n Successful negotiations are not logged. Only failures\n have meaning to indicate that Squid may need an upgrade\n of its error page translations.\n Default:\n  error_log_languages on\n", "   TAG: err_page_stylesheet\n CSS Stylesheet to pattern the display of Squid default error pages.\n \n For information on CSS see http://www.w3.org/Style/CSS/\n Default:\n  err_page_stylesheet /etc/squid/errorpage.css\n", "   TAG: err_html_text\n HTML text to include in error messages.  Make this a \"mailto\"\n URL to your admin address, or maybe just a link to your\n organizations Web page.\n \n To include this in your error messages, you must rewrite\n the error template files (found in the \"errors\" directory).\n Wherever you want the 'err_html_text' line to appear,\n insert a %L tag in the error template file.\n Default:\n  none\n", "   TAG: email_err_dataon|off\n If enabled, information about the occurred error will be\n included in the mailto links of the ERR pages (if %W is set)\n so that the email body contains the data.\n Syntax is <A HREF=\"mailto:%w%W\">%w</A>\n Default:\n  email_err_data on\n", "   TAG: deny_info\n Usage:   deny_info err_page_name acl\n or       deny_info http://... acl\n or       deny_info TCP_RESET acl\n \n This can be used to return a ERR_ page for requests which\n do not pass the 'http_access' rules.  Squid remembers the last\n acl it evaluated in http_access, and if a 'deny_info' line exists\n for that ACL Squid returns a corresponding error page.\n \n The acl is typically the last acl on the http_access deny line which\n denied access. The exceptions to this rule are:\n - When Squid needs to request authentication credentials. It's then\n   the first authentication related acl encountered\n - When none of the http_access lines matches. It's then the last\n   acl processed on the last http_access line.\n - When the decision to deny access was made by an adaptation service,\n   the acl name is the corresponding eCAP or ICAP service_name.\n \n NP: If providing your own custom error pages with error_directory\n     you may also specify them by your custom file name:\n     Example: deny_info ERR_CUSTOM_ACCESS_DENIED bad_guys\n \n By defaut Squid will send \"403 Forbidden\". A different 4xx or 5xx\n may be specified by prefixing the file name with the code and a colon.\n e.g. 404:ERR_CUSTOM_ACCESS_DENIED\n \n Alternatively you can tell Squid to reset the TCP connection\n by specifying TCP_RESET.\n \n Or you can specify an error URL or URL pattern. The browsers will\n get redirected to the specified URL after formatting tags have\n been replaced. Redirect will be done with 302 or 307 according to\n HTTP/1.1 specs. A different 3xx code may be specified by prefixing\n the URL. e.g. 303:http://example.com/\n \n URL FORMAT TAGS:\n %a- username (if available. Password NOT included)\n %B- FTP path URL\n %e- Error number\n %E- Error description\n %h- Squid hostname\n %H- Request domain name\n %i- Client IP Address\n %M- Request Method\n %o- Message result from external ACL helper\n %p- Request Port number\n %P- Request Protocol name\n %R- Request URL path\n %T- Timestamp in RFC 1123 format\n %U- Full canonical URL from client\n   (HTTPS URLs terminate with *)\n %u- Full canonical URL from client\n %w- Admin email from squid.conf\n %x- Error name\n %%- Literal percent (%) code\n \n Default:\n  none\n", "   TAG: nonhierarchical_direct\n By default, Squid will send any non-hierarchical requests\n (not cacheable request type) direct to origin servers.\n \n When this is set to \"off\", Squid will prefer to send these\n requests to parents.\n \n Note that in most configurations, by turning this off you will only\n add latency to these request without any improvement in global hit\n ratio.\n \n This option only sets a preference. If the parent is unavailable a\n direct connection to the origin server may still be attempted. To\n completely prevent direct connections use never_direct.\n Default:\n  nonhierarchical_direct on\n", "   TAG: prefer_direct\n Normally Squid tries to use parents for most requests. If you for some\n reason like it to first try going direct and only use a parent if\n going direct fails set this to on.\n \n By combining nonhierarchical_direct off and prefer_direct on you\n can set up Squid to use a parent as a backup path if going direct\n fails.\n \n Note: If you want Squid to use parents for all requests see\n the never_direct directive. prefer_direct only modifies how Squid\n acts on cacheable requests.\n Default:\n  prefer_direct off\n", "   TAG: cache_miss_revalidateon|off\n RFC 7232 defines a conditional request mechanism to prevent\n response objects being unnecessarily transferred over the network.\n If that mechanism is used by the client and a cache MISS occurs\n it can prevent new cache entries being created.\n \n This option determines whether Squid on cache MISS will pass the\n client revalidation request to the server or tries to fetch new\n content for caching. It can be useful while the cache is mostly\n empty to more quickly have the cache populated by generating\n non-conditional GETs.\n \n When set to 'on' (default), Squid will pass all client If-* headers\n to the server. This permits server responses without a cacheable\n payload to be delivered and on MISS no new cache entry is created.\n \n When set to 'off' and if the request is cacheable, Squid will\n remove the clients If-Modified-Since and If-None-Match headers from\n the request sent to the server. This requests a 200 status response\n from the server to create a new cache entry with.\n Default:\n  cache_miss_revalidate on\n", "   TAG: always_direct\n Usage: always_direct allow|deny [!]aclname ...\n \n Here you can use ACL elements to specify requests which should\n ALWAYS be forwarded by Squid to the origin servers without using\n any peers.  For example, to always directly forward requests for\n local servers ignoring any parents or siblings you may have use\n something like:\n \n acl local-servers dstdomain my.domain.net\n always_direct allow local-servers\n \n To always forward FTP requests directly, use\n \n acl FTP proto FTP\n always_direct allow FTP\n \n NOTE: There is a similar, but opposite option named\n 'never_direct'.  You need to be aware that \"always_direct deny\n foo\" is NOT the same thing as \"never_direct allow foo\".  You\n may need to use a deny rule to exclude a more-specific case of\n some other rule.  Example:\n \n acl local-external dstdomain external.foo.net\n acl local-servers dstdomain  .foo.net\n always_direct deny local-external\n always_direct allow local-servers\n \n NOTE: If your goal is to make the client forward the request\n directly to the origin server bypassing Squid then this needs\n to be done in the client configuration. Squid configuration\n can only tell Squid how Squid should fetch the object.\n \n NOTE: This directive is not related to caching. The replies\n is cached as usual even if you use always_direct. To not cache\n the replies see the 'cache' directive.\n \n This clause supports both fast and slow acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Default:\n  Prevent any cache_peer being used for this request.\n", "   TAG: never_direct\n Usage: never_direct allow|deny [!]aclname ...\n \n never_direct is the opposite of always_direct.  Please read\n the description for always_direct if you have not already.\n \n With 'never_direct' you can use ACL elements to specify\n requests which should NEVER be forwarded directly to origin\n servers.  For example, to force the use of a proxy for all\n requests, except those in your local domain use something like:\n \n acl local-servers dstdomain .foo.net\n never_direct deny local-servers\n never_direct allow all\n \n or if Squid is inside a firewall and there are local intranet\n servers inside the firewall use something like:\n \n acl local-intranet dstdomain .foo.net\n acl local-external dstdomain external.foo.net\n always_direct deny local-external\n always_direct allow local-intranet\n never_direct allow all\n \n This clause supports both fast and slow acl types.\n See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.\n Default:\n  Allow DNS results to be used for this request.\n", "   TAG: incoming_udp_average\n Heavy voodoo here.  I can't even believe you are reading this.\n Are you crazy?  Don't even think about adjusting these unless\n you understand the algorithms in comm_select.c first!\n Default:\n  incoming_udp_average 6\n", "   TAG: incoming_tcp_average\n Heavy voodoo here.  I can't even believe you are reading this.\n Are you crazy?  Don't even think about adjusting these unless\n you understand the algorithms in comm_select.c first!\n Default:\n  incoming_tcp_average 4\n", "   TAG: incoming_dns_average\n Heavy voodoo here.  I can't even believe you are reading this.\n Are you crazy?  Don't even think about adjusting these unless\n you understand the algorithms in comm_select.c first!\n Default:\n  incoming_dns_average 4\n", "   TAG: min_udp_poll_cnt\n Heavy voodoo here.  I can't even believe you are reading this.\n Are you crazy?  Don't even think about adjusting these unless\n you understand the algorithms in comm_select.c first!\n Default:\n  min_udp_poll_cnt 8\n", "   TAG: min_dns_poll_cnt\n Heavy voodoo here.  I can't even believe you are reading this.\n Are you crazy?  Don't even think about adjusting these unless\n you understand the algorithms in comm_select.c first!\n Default:\n  min_dns_poll_cnt 8\n", "   TAG: min_tcp_poll_cnt\n Heavy voodoo here.  I can't even believe you are reading this.\n Are you crazy?  Don't even think about adjusting these unless\n you understand the algorithms in comm_select.c first!\n Default:\n  min_tcp_poll_cnt 8\n", "   TAG: accept_filter\n FreeBSD:\n \n The name of an accept(2) filter to install on Squid's\n listen socket(s).  This feature is perhaps specific to\n FreeBSD and requires support in the kernel.\n \n The 'httpready' filter delays delivering new connections\n to Squid until a full HTTP request has been received.\n See the accf_http(9) man page for details.\n \n The 'dataready' filter delays delivering new connections\n to Squid until there is some data to process.\n See the accf_dataready(9) man page for details.\n \n Linux:\n \n The 'data' filter delays delivering of new connections\n to Squid until there is some data to process by TCP_ACCEPT_DEFER.\n You may optionally specify a number of seconds to wait by\n 'data=N' where N is the number of seconds. Defaults to 30\n if not specified.  See the tcp(7) man page for details.\n EXAMPLE:\n   FreeBSD\n accept_filter httpready\n   Linux\n accept_filter data\n Default:\n  none\n", "   TAG: client_ip_max_connections\n Set an absolute limit on the number of connections a single\n client IP can use. Any more than this and Squid will begin to drop\n new connections from the client until it closes some links.\n \n Note that this is a global limit. It affects all HTTP, HTCP, Gopher and FTP\n connections from the client. For finer control use the ACL access controls.\n \n Requires client_db to be enabled (the default).\n \n WARNING: This may noticably slow down traffic received via external proxies\n or NAT devices and cause them to rebound error messages back to their clients.\n Default:\n  No limit.\n", "   TAG: tcp_recv_bufsize(bytes)\n Size of receive buffer to set for TCP sockets.  Probably just\n as easy to change your kernel's default.\n Omit from squid.conf to use the default buffer size.\n Default:\n  Use operating system TCP defaults.\n", "   TAG: icap_enableon|off\n If you want to enable the ICAP module support, set this to on.\n Default:\n  icap_enable off\n", "   TAG: icap_connect_timeout\n This parameter specifies how long to wait for the TCP connect to\n the requested ICAP server to complete before giving up and either\n terminating the HTTP transaction or bypassing the failure.\n \n The default for optional services is peer_connect_timeout.\n The default for essential services is connect_timeout.\n If this option is explicitly set, its value applies to all services.\n Default:\n  none\n", "   TAG: icap_io_timeouttime-units\n This parameter specifies how long to wait for an I/O activity on\n an established, active ICAP connection before giving up and\n either terminating the HTTP transaction or bypassing the\n failure.\n Default:\n  Use read_timeout.\n", "   TAG: icap_service_failure_limitlimit [in memory-depth time-units]\n The limit specifies the number of failures that Squid tolerates\n when establishing a new TCP connection with an ICAP service. If\n the number of failures exceeds the limit, the ICAP service is\n not used for new ICAP requests until it is time to refresh its\n OPTIONS.\n \n A negative value disables the limit. Without the limit, an ICAP\n service will not be considered down due to connectivity failures\n between ICAP OPTIONS requests.\n \n Squid forgets ICAP service failures older than the specified\n value of memory-depth. The memory fading algorithm \n is approximate because Squid does not remember individual \n errors but groups them instead, splitting the option\n value into ten time slots of equal length.\n \n When memory-depth is 0 and by default this option has no \n effect on service failure expiration.\n \n Squid always forgets failures when updating service settings\n using an ICAP OPTIONS transaction, regardless of this option\n setting.\n \n For example,\n   suspend service usage after 10 failures in 5 seconds:\n icap_service_failure_limit 10 in 5 seconds\n Default:\n  icap_service_failure_limit 10\n", "   TAG: icap_service_revival_delay\n The delay specifies the number of seconds to wait after an ICAP\n OPTIONS request failure before requesting the options again. The\n failed ICAP service is considered \"down\" until fresh OPTIONS are\n fetched.\n \n The actual delay cannot be smaller than the hardcoded minimum\n delay of 30 seconds.\n Default:\n  icap_service_revival_delay 180\n", "   TAG: icap_preview_enableon|off\n The ICAP Preview feature allows the ICAP server to handle the\n HTTP message by looking only at the beginning of the message body\n or even without receiving the body at all. In some environments, \n previews greatly speedup ICAP processing.\n \n During an ICAP OPTIONS transaction, the server may tellSquid what\n HTTP messages should be previewed and how big the preview should be.\n Squid will not use Preview if the server did not request one.\n \n To disable ICAP Preview for all ICAP services, regardless of\n individual ICAP server OPTIONS responses, set this option to \"off\".\n Example:\n icap_preview_enable off\n Default:\n  icap_preview_enable on\n", "   TAG: icap_preview_size\n The default size of preview data to be sent to the ICAP server.\n This value might be overwritten on a per server basis by OPTIONS requests.\n Default:\n  No preview sent.\n", "   TAG: icap_206_enableon|off\n 206 (Partial Content) responses is an ICAP extension that allows the\n ICAP agents to optionally combine adapted and original HTTP message\n content. The decision to combine is postponed until the end of the\n ICAP response. Squid supports Partial Content extension by default.\n \n Activation of the Partial Content extension is negotiated with each\n ICAP service during OPTIONS exchange. Most ICAP servers should handle\n negotation correctly even if they do not support the extension, but\n some might fail. To disable Partial Content support for all ICAP\n services and to avoid any negotiation, set this option to \"off\".\n \n Example:\n     icap_206_enable off\n Default:\n  icap_206_enable on\n", "   TAG: icap_default_options_ttl\n The default TTL value for ICAP OPTIONS responses that don't have\n an Options-TTL header.\n Default:\n  icap_default_options_ttl 60\n", "   TAG: icap_persistent_connectionson|off\n Whether or not Squid should use persistent connections to\n an ICAP server.\n Default:\n  icap_persistent_connections on\n", "   TAG: adaptation_send_client_ipon|off\n If enabled, Squid shares HTTP client IP information with adaptation\n services. For ICAP, Squid adds the X-Client-IP header to ICAP requests.\n For eCAP, Squid sets the libecap::metaClientIp transaction option.\n \n See also: adaptation_uses_indirect_client\n Default:\n  adaptation_send_client_ip off\n", "   TAG: adaptation_send_usernameon|off\n This sends authenticated HTTP client username (if available) to\n the adaptation service.\n \n For ICAP, the username value is encoded based on the\n icap_client_username_encode option and is sent using the header\n specified by the icap_client_username_header option.\n Default:\n  adaptation_send_username off\n", "   TAG: icap_client_username_header\n ICAP request header name to use for adaptation_send_username.\n Default:\n  icap_client_username_header X-Client-Username\n", "   TAG: icap_client_username_encodeon|off\n Whether to base64 encode the authenticated client username.\n Default:\n  icap_client_username_encode off\n", "   TAG: icap_service\n Defines a single ICAP service using the following format:\n \n icap_service id vectoring_point uri [option ...]\n \n id: ID\n an opaque identifier or name which is used to direct traffic to\n this specific service. Must be unique among all adaptation\n services in squid.conf.\n \n vectoring_point: reqmod_precache|reqmod_postcache|respmod_precache|respmod_postcache\n This specifies at which point of transaction processing the\n ICAP service should be activated. *_postcache vectoring points\n are not yet supported.\n \n uri: icap://servername:port/servicepath\n ICAP server and service location.\n \n ICAP does not allow a single service to handle both REQMOD and RESPMOD\n transactions. Squid does not enforce that requirement. You can specify\n services with the same service_url and different vectoring_points. You\n can even specify multiple identical services as long as their\n service_names differ.\n \n To activate a service, use the adaptation_access directive. To group\n services, use adaptation_service_chain and adaptation_service_set.\n \n Service options are separated by white space. ICAP services support\n the following name=value options:\n \n bypass=on|off|1|0\n If set to 'on' or '1', the ICAP service is treated as\n optional. If the service cannot be reached or malfunctions,\n Squid will try to ignore any errors and process the message as\n if the service was not enabled. No all ICAP errors can be\n bypassed.  If set to 0, the ICAP service is treated as\n essential and all ICAP errors will result in an error page\n returned to the HTTP client.\n \n Bypass is off by default: services are treated as essential.\n \n routing=on|off|1|0\n If set to 'on' or '1', the ICAP service is allowed to\n dynamically change the current message adaptation plan by\n returning a chain of services to be used next. The services\n are specified using the X-Next-Services ICAP response header\n value, formatted as a comma-separated list of service names.\n Each named service should be configured in squid.conf. Other\n services are ignored. An empty X-Next-Services value results\n in an empty plan which ends the current adaptation.\n \n Dynamic adaptation plan may cross or cover multiple supported\n vectoring points in their natural processing order.\n \n Routing is not allowed by default: the ICAP X-Next-Services\n response header is ignored.\n \n ipv6=on|off\n Only has effect on split-stack systems. The default on those systems\n is to use IPv4-only connections. When set to 'on' this option will\n make Squid use IPv6-only connections to contact this ICAP service.\n \n on-overload=block|bypass|wait|force\n If the service Max-Connections limit has been reached, do\n one of the following for each new ICAP transaction:\n   * block:  send an HTTP error response to the client\n   * bypass: ignore the \"over-connected\" ICAP service\n   * wait:   wait (in a FIFO queue) for an ICAP connection slot\n   * force:  proceed, ignoring the Max-Connections limit \n \n In SMP mode with N workers, each worker assumes the service\n connection limit is Max-Connections/N, even though not all\n workers may use a given service.\n \n The default value is \"bypass\" if service is bypassable,\n otherwise it is set to \"wait\".\n \n \n max-conn=number\n Use the given number as the Max-Connections limit, regardless\n of the Max-Connections value given by the service, if any.\n \n Older icap_service format without optional named parameters is\n deprecated but supported for backward compatibility.\n \n Example:\n icap_service svcBlocker reqmod_precache icap://icap1.mydomain.net:1344/reqmod bypass=0\n icap_service svcLogger reqmod_precache icap://icap2.mydomain.net:1344/respmod routing=on\n Default:\n  none\n", "   TAG: icap_class\n This deprecated option was documented to define an ICAP service\n chain, even though it actually defined a set of similar, redundant\n services, and the chains were not supported. \n \n To define a set of redundant services, please use the\n adaptation_service_set directive. For service chains, use\n adaptation_service_chain.\n Default:\n  none\n", "   TAG: icap_access\n This option is deprecated. Please use adaptation_access, which\n has the same ICAP functionality, but comes with better\n documentation, and eCAP support.\n Default:\n  none\n", "   TAG: ecap_enableon|off\n Controls whether eCAP support is enabled.\n Default:\n  ecap_enable off\n", "   TAG: ecap_service\n Defines a single eCAP service\n \n ecap_service id vectoring_point uri [option ...]\n \n         id: ID\n an opaque identifier or name which is used to direct traffic to\n this specific service. Must be unique among all adaptation\n services in squid.conf.\n \n vectoring_point: reqmod_precache|reqmod_postcache|respmod_precache|respmod_postcache\n This specifies at which point of transaction processing the\n eCAP service should be activated. *_postcache vectoring points\n are not yet supported.\n \n uri: ecap://vendor/service_name?custom&cgi=style&parameters=optional\n Squid uses the eCAP service URI to match this configuration\n line with one of the dynamically loaded services. Each loaded\n eCAP service must have a unique URI. Obtain the right URI from\n the service provider.\n \n To activate a service, use the adaptation_access directive. To group\n services, use adaptation_service_chain and adaptation_service_set.\n \n Service options are separated by white space. eCAP services support\n the following name=value options:\n \n bypass=on|off|1|0\n If set to 'on' or '1', the eCAP service is treated as optional.\n If the service cannot be reached or malfunctions, Squid will try\n to ignore any errors and process the message as if the service\n was not enabled. No all eCAP errors can be bypassed.\n If set to 'off' or '0', the eCAP service is treated as essential\n and all eCAP errors will result in an error page returned to the\n HTTP client.\n \n                 Bypass is off by default: services are treated as essential.\n \n routing=on|off|1|0\n If set to 'on' or '1', the eCAP service is allowed to\n dynamically change the current message adaptation plan by\n returning a chain of services to be used next.\n \n Dynamic adaptation plan may cross or cover multiple supported\n vectoring points in their natural processing order.\n \n Routing is not allowed by default.\n \n Older ecap_service format without optional named parameters is\n deprecated but supported for backward compatibility.\n \n \n Example:\n ecap_service s1 reqmod_precache ecap://filters.R.us/leakDetector?on_error=block bypass=off\n ecap_service s2 respmod_precache ecap://filters.R.us/virusFilter config=/etc/vf.cfg bypass=on\n Default:\n  none\n", "   TAG: loadable_modules\n Instructs Squid to load the specified dynamic module(s) or activate\n preloaded module(s).\n Example:\n loadable_modules /usr/lib/MinimalAdapter.so\n Default:\n  none\n", "   TAG: adaptation_service_set\n \n Configures an ordered set of similar, redundant services. This is\n useful when hot standby or backup adaptation servers are available.\n \n     adaptation_service_set set_name service_name1 service_name2 ...\n \n  The named services are used in the set declaration order. The first\n applicable adaptation service from the set is used first. The next\n applicable service is tried if and only if the transaction with the\n previous service fails and the message waiting to be adapted is still\n intact.\n \n When adaptation starts, broken services are ignored as if they were\n not a part of the set. A broken service is a down optional service.\n \n The services in a set must be attached to the same vectoring point\n (e.g., pre-cache) and use the same adaptation method (e.g., REQMOD).\n \n If all services in a set are optional then adaptation failures are\n bypassable. If all services in the set are essential, then a\n transaction failure with one service may still be retried using\n another service from the set, but when all services fail, the master\n transaction fails as well.\n \n A set may contain a mix of optional and essential services, but that\n is likely to lead to surprising results because broken services become\n ignored (see above), making previously bypassable failures fatal.\n Technically, it is the bypassability of the last failed service that\n matters.\n \n See also: adaptation_access adaptation_service_chain\n \n Example:\n adaptation_service_set svcBlocker urlFilterPrimary urlFilterBackup\n adaptation service_set svcLogger loggerLocal loggerRemote\n Default:\n  none\n", "   TAG: adaptation_service_chain\n \n Configures a list of complementary services that will be applied\n one-by-one, forming an adaptation chain or pipeline. This is useful\n when Squid must perform different adaptations on the same message.\n \n     adaptation_service_chain chain_name service_name1 svc_name2 ...\n \n  The named services are used in the chain declaration order. The first\n applicable adaptation service from the chain is used first. The next\n applicable service is applied to the successful adaptation results of\n the previous service in the chain.\n \n When adaptation starts, broken services are ignored as if they were\n not a part of the chain. A broken service is a down optional service.\n \n Request satisfaction terminates the adaptation chain because Squid\n does not currently allow declaration of RESPMOD services at the\n \"reqmod_precache\" vectoring point (see icap_service or ecap_service).\n \n The services in a chain must be attached to the same vectoring point\n (e.g., pre-cache) and use the same adaptation method (e.g., REQMOD).\n \n A chain may contain a mix of optional and essential services. If an\n essential adaptation fails (or the failure cannot be bypassed for\n other reasons), the master transaction fails. Otherwise, the failure\n is bypassed as if the failed adaptation service was not in the chain.\n \n See also: adaptation_access adaptation_service_set\n \n Example:\n adaptation_service_chain svcRequest requestLogger urlFilter leakDetector\n Default:\n  none\n", "   TAG: adaptation_access\n Sends an HTTP transaction to an ICAP or eCAP adaptationservice.\n \n adaptation_access service_name allow|deny [!]aclname...\n adaptation_access set_name     allow|deny [!]aclname...\n \n At each supported vectoring point, the adaptation_access\n statements are processed in the order they appear in this\n configuration file. Statements pointing to the following services\n are ignored (i.e., skipped without checking their ACL):\n \n     - services serving different vectoring points\n     - \"broken-but-bypassable\" services\n     - \"up\" services configured to ignore such transactions\n               (e.g., based on the ICAP Transfer-Ignore header).\n \n         When a set_name is used, all services in the set are checked\n using the same rules, to find the first applicable one. See\n adaptation_service_set for details.\n \n If an access list is checked and there is a match, the\n processing stops: For an \"allow\" rule, the corresponding\n adaptation service is used for the transaction. For a \"deny\"\n rule, no adaptation service is activated.\n \n It is currently not possible to apply more than one adaptation\n service at the same vectoring point to the same HTTP transaction.\n \n         See also: icap_service and ecap_service\n \n Example:\n adaptation_access service_1 allow all\n Default:\n  Allow, unless rules exist in squid.conf.\n", "   TAG: adaptation_service_iteration_limit\n Limits the number of iterations allowed when applying adaptation\n services to a message. If your longest adaptation set or chain\n may have more than 16 services, increase the limit beyond its\n default value of 16. If detecting infinite iteration loops sooner\n is critical, make the iteration limit match the actual number\n of services in your longest adaptation set or chain.\n \n Infinite adaptation loops are most likely with routing services.\n \n See also: icap_service routing=1\n Default:\n  adaptation_service_iteration_limit 16\n", "   TAG: adaptation_masterx_shared_names\n For each master transaction (i.e., the HTTP request and response\n sequence, including all related ICAP and eCAP exchanges), Squid\n maintains a table of metadata. The table entries are (name, value)\n pairs shared among eCAP and ICAP exchanges. The table is destroyed\n with the master transaction.\n \n This option specifies the table entry names that Squid must accept\n from and forward to the adaptation transactions.\n \n An ICAP REQMOD or RESPMOD transaction may set an entry in the \n shared table by returning an ICAP header field with a name \n specified in adaptation_masterx_shared_names.\n \n An eCAP REQMOD or RESPMOD transaction may set an entry in the\n shared table by implementing the libecap::visitEachOption() API\n to provide an option with a name specified in\n adaptation_masterx_shared_names.\n \n Squid will store and forward the set entry to subsequent adaptation\n transactions within the same master transaction scope.\n \n Only one shared entry name is supported at this time.\n \n Example:\n   share authentication information among ICAP services\n adaptation_masterx_shared_names X-Subscriber-ID\n Default:\n  none\n", "   TAG: adaptation_meta\n This option allows Squid administrator to add custom ICAP request\n headers or eCAP options to Squid ICAP requests or eCAP transactions.\n Use it to pass custom authentication tokens and other\n transaction-state related meta information to an ICAP/eCAP service.\n \n The addition of a meta header is ACL-driven:\n adaptation_meta name value [!]aclname ...\n \n Processing for a given header name stops after the first ACL list match.\n Thus, it is impossible to add two headers with the same name. If no ACL\n lists match for a given header name, no such header is added. For \n example:\n \n   do not debug transactions except for those that need debugging\n adaptation_meta X-Debug 1 needs_debugging\n \n   log all transactions except for those that must remain secret\n adaptation_meta X-Log 1 !keep_secret\n \n   mark transactions from users in the \"G 1\" group\n adaptation_meta X-Authenticated-Groups \"G 1\" authed_as_G1\n \n The \"value\" parameter may be a regular squid.conf token or a \"double\n quoted string\". Within the quoted string, use backslash (\\) to escape\n any character, which is currently only useful for escaping backslashes\n and double quotes. For example,\n     \"this string has one backslash (\\\\) and two \\\"quotes\\\"\"\n \n Used adaptation_meta header values may be logged via %note\n logformat code. If multiple adaptation_meta headers with the same name\n are used during master transaction lifetime, the header values are\n logged in the order they were used and duplicate values are ignored\n (only the first repeated value will be logged).\n Default:\n  none\n", "   TAG: icap_retry\n This ACL determines which retriable ICAP transactions are\n retried. Transactions that received a complete ICAP response\n and did not have to consume or produce HTTP bodies to receive\n that response are usually retriable.\n \n icap_retry allow|deny [!]aclname ...\n \n Squid automatically retries some ICAP I/O timeouts and errors\n due to persistent connection race conditions.\n \n See also: icap_retry_limit\n Default:\n  icap_retry deny all\n", "   TAG: icap_retry_limit\n Limits the number of retries allowed.\n \n Communication errors due to persistent connection race\n conditions are unavoidable, automatically retried, and do not\n count against this limit.\n \n See also: icap_retry\n Default:\n  No retries are allowed.\n", "   TAG: check_hostnames\n For security and stability reasons Squid can check\n hostnames for Internet standard RFC compliance. If you want\n Squid to perform these checks turn this directive on.\n Default:\n  check_hostnames off\n", "   TAG: allow_underscore\n Underscore characters is not strictly allowed in Internet hostnames\n but nevertheless used by many sites. Set this to off if you want\n Squid to be strict about the standard.\n This check is performed only when check_hostnames is set to on.\n Default:\n  allow_underscore on\n", "   TAG: dns_retransmit_interval\n Initial retransmit interval for DNS queries. The interval is\n doubled each time all configured DNS servers have been tried.\n Default:\n  dns_retransmit_interval 5 seconds\n", "   TAG: dns_timeout\n DNS Query timeout. If no response is received to a DNS query\n within this time all DNS servers for the queried domain\n are assumed to be unavailable.\n Default:\n  dns_timeout 30 seconds\n", "   TAG: dns_packet_max\n Maximum number of bytes packet size to advertise via EDNS.\n Set to \"none\" to disable EDNS large packet support.\n \n For legacy reasons DNS UDP replies will default to 512 bytes which\n is too small for many responses. EDNS provides a means for Squid to\n negotiate receiving larger responses back immediately without having\n to failover with repeat requests. Responses larger than this limit\n will retain the old behaviour of failover to TCP DNS.\n \n Squid has no real fixed limit internally, but allowing packet sizes\n over 1500 bytes requires network jumbogram support and is usually not\n necessary.\n \n WARNING: The RFC also indicates that some older resolvers will reply\n with failure of the whole request if the extension is added. Some\n resolvers have already been identified which will reply with mangled\n EDNS response on occasion. Usually in response to many-KB jumbogram\n sizes being advertised by Squid.\n Squid will currently treat these both as an unable-to-resolve domain\n even if it would be resolvable without EDNS.\n Default:\n  EDNS disabled\n", "   TAG: dns_defnameson|off\n Normally the RES_DEFNAMES resolver option is disabled\n (see res_init(3)).  This prevents caches in a hierarchy\n from interpreting single-component hostnames locally.  To allow\n Squid to handle single-component names, enable this option.\n Default:\n  Search for single-label domain names is disabled.\n", "   TAG: dns_multicast_localon|off\n When set to on, Squid sends multicast DNS lookups on the local\n network for domains ending in .local and .arpa.\n This enables local servers and devices to be contacted in an\n ad-hoc or zero-configuration network environment.\n Default:\n  Search for .local and .arpa names is disabled.\n", "   TAG: dns_nameservers\n Use this if you want to specify a list of DNS name servers\n (IP addresses) to use instead of those given in your\n /etc/resolv.conf file.\n \n On Windows platforms, if no value is specified here or in\n the /etc/resolv.conf file, the list of DNS name servers are\n taken from the Windows registry, both static and dynamic DHCP\n configurations are supported.\n \n Example: dns_nameservers 10.0.0.1 192.172.0.4\n Default:\n  Use operating system definitions\n", "   TAG: hosts_file\n Location of the host-local IP name-address associations\n database. Most Operating Systems have such a file on different\n default locations:\n - Un*X & Linux:    /etc/hosts\n - Windows NT/2000: %SystemRoot%\\system32\\drivers\\etc\\hosts\n    (%SystemRoot% value install default is c:\\winnt)\n - Windows XP/2003: %SystemRoot%\\system32\\drivers\\etc\\hosts\n    (%SystemRoot% value install default is c:\\windows)\n - Windows 9x/Me:   %windir%\\hosts\n    (%windir% value is usually c:\\windows)\n - Cygwin:   /etc/hosts\n \n The file contains newline-separated definitions, in the\n form ip_address_in_dotted_form name [name ...] names are\n whitespace-separated. Lines beginning with an hash ( )\n character are comments.\n \n The file is checked at startup and upon configuration.\n If set to 'none', it won't be checked.\n If append_domain is used, that domain will be added to\n domain-local (i.e. not containing any dot character) host\n definitions.\n Default:\n  hosts_file /etc/hosts\n", "   TAG: append_domain\n Appends local domain name to hostnames without any dots in\n them.  append_domain must begin with a period.\n \n Be warned there are now Internet names with no dots in\n them using only top-domain names, so setting this may\n cause some Internet sites to become unavailable.\n \n Example:\n  append_domain .yourdomain.com\n Default:\n  Use operating system definitions\n", "   TAG: ignore_unknown_nameservers\n By default Squid checks that DNS responses are received\n from the same IP addresses they are sent to.  If they\n don't match, Squid ignores the response and writes a warning\n message to cache.log.  You can allow responses from unknown\n nameservers by setting this option to 'off'.\n Default:\n  ignore_unknown_nameservers on\n", "   TAG: dns_v4_first\n With the IPv6 Internet being as fast or faster than IPv4 Internet\n for most networks Squid prefers to contact websites over IPv6.\n \n This option reverses the order of preference to make Squid contact\n dual-stack websites over IPv4 first. Squid will still perform both\n IPv6 and IPv4 DNS lookups before connecting.\n \n WARNING:\n   This option will restrict the situations under which IPv6\n   connectivity is used (and tested), potentially hiding network\n   problems which would otherwise be detected and warned about.\n Default:\n  dns_v4_first off\n", "   TAG: ipcache_size(number of entries)\n Maximum number of DNS IP cache entries.\n Default:\n  ipcache_size 1024\n", "   TAG: ipcache_low(percent)\n Default:\n  ipcache_low 90\n", "   TAG: ipcache_high(percent)\n The size, low-, and high-water marks for the IP cache.\n Default:\n  ipcache_high 95\n", "   TAG: fqdncache_size(number of entries)\n Maximum number of FQDN cache entries.\n Default:\n  fqdncache_size 1024\n", "   TAG: configuration_includes_quoted_valueson|off\n If set, Squid will recognize each \"quoted string\" after a configuration\n directive as a single parameter. The quotes are stripped before the\n parameter value is interpreted or used.\n See \"Values with spaces, quotes, and other special characters\"\n section for more details.\n Default:\n  configuration_includes_quoted_values off\n", "   TAG: memory_poolson|off\n If set, Squid will keep pools of allocated (but unused) memory\n available for future use.  If memory is a premium on your\n system and you believe your malloc library outperforms Squid\n routines, disable this.\n Default:\n  memory_pools on\n", "   TAG: memory_pools_limit(bytes)\n Used only with memory_pools on:\n memory_pools_limit 50 MB\n \n If set to a non-zero value, Squid will keep at most the specified\n limit of allocated (but unused) memory in memory pools. All free()\n requests that exceed this limit will be handled by your malloc\n library. Squid does not pre-allocate any memory, just safe-keeps\n objects that otherwise would be free()d. Thus, it is safe to set\n memory_pools_limit to a reasonably high value even if your\n configuration will use less memory.\n \n If set to none, Squid will keep all memory it can. That is, there\n will be no limit on the total amount of memory used for safe-keeping.\n \n To disable memory allocation optimization, do not set\n memory_pools_limit to 0 or none. Set memory_pools to \"off\" instead.\n \n An overhead for maintaining memory pools is not taken into account\n when the limit is checked. This overhead is close to four bytes per\n object kept. However, pools may actually _save_ memory because of\n reduced memory thrashing in your malloc library.\n Default:\n  memory_pools_limit 5 MB\n", "   TAG: forwarded_foron|off|transparent|truncate|delete\n If set to \"on\", Squid will append your client's IP address\n in the HTTP requests it forwards. By default it looks like:\n \n X-Forwarded-For: 192.1.2.3\n \n If set to \"off\", it will appear as\n \n X-Forwarded-For: unknown\n \n If set to \"transparent\", Squid will not alter the\n X-Forwarded-For header in any way.\n \n If set to \"delete\", Squid will delete the entire\n X-Forwarded-For header.\n \n If set to \"truncate\", Squid will remove all existing\n X-Forwarded-For entries, and place the client IP as the sole entry.\n Default:\n  forwarded_for on\n", "   TAG: cachemgr_passwd\n Specify passwords for cachemgr operations.\n \n Usage: cachemgr_passwd password action action ...\n \n Some valid actions are (see cache manager menu for a full list):\n 5min\n 60min\n asndb\n authenticator\n cbdata\n client_list\n comm_incoming\n config *\n counters\n delay\n digest_stats\n dns\n events\n filedescriptors\n fqdncache\n histograms\n http_headers\n info\n io\n ipcache\n mem\n menu\n netdb\n non_peers\n objects\n offline_toggle *\n pconn\n peer_select\n reconfigure *\n redirector\n refresh\n server_list\n shutdown *\n store_digest\n storedir\n utilization\n via_headers\n vm_objects\n \n * Indicates actions which will not be performed without a\n   valid password, others can be performed if not listed here.\n \n To disable an action, set the password to \"disable\".\n To allow performing an action without a password, set the\n password to \"none\".\n \n Use the keyword \"all\" to set the same password for all actions.\n \n Example:\n  cachemgr_passwd secret shutdown\n  cachemgr_passwd lesssssssecret info stats/objects\n  cachemgr_passwd disable all\n Default:\n  No password. Actions which require password are denied.\n", "   TAG: client_dbon|off\n If you want to disable collecting per-client statistics,\n turn off client_db here.\n Default:\n  client_db on\n", "   TAG: refresh_all_imson|off\n When you enable this option, squid will always check\n the origin server for an update when a client sends an\n If-Modified-Since request.  Many browsers use IMS\n requests when the user requests a reload, and this\n ensures those clients receive the latest version.\n \n By default (off), squid may return a Not Modified response\n based on the age of the cached version.\n Default:\n  refresh_all_ims off\n", "   TAG: reload_into_imson|off\n When you enable this option, client no-cache or ``reload''\n requests will be changed to If-Modified-Since requests.\n Doing this VIOLATES the HTTP standard.  Enabling this\n feature could make you liable for problems which it\n causes.\n \n see also refresh_pattern for a more selective approach.\n Default:\n  reload_into_ims off\n", "   TAG: connect_retries\n This sets the maximum number of connection attempts made for each\n TCP connection. The connect_retries attempts must all still\n complete within the connection timeout period.\n \n The default is not to re-try if the first connection attempt fails.\n The (not recommended) maximum is 10 tries.\n \n A warning message will be generated if it is set to a too-high\n value and the configured value will be over-ridden.\n \n Note: These re-tries are in addition to forward_max_tries\n which limit how many different addresses may be tried to find\n a useful server.\n Default:\n  Do not retry failed connections.\n", "   TAG: retry_on_error\n If set to ON Squid will automatically retry requests when\n receiving an error response with status 403 (Forbidden),\n 500 (Internal Error), 501 or 503 (Service not available).\n Status 502 and 504 (Gateway errors) are always retried.\n \n This is mainly useful if you are in a complex cache hierarchy to\n work around access control errors.\n \n NOTE: This retry will attempt to find another working destination.\n Which is different from the server which just failed.\n Default:\n  retry_on_error off\n", "   TAG: as_whois_server\n WHOIS server to query for AS numbers.  NOTE: AS numbers are\n queried only when Squid starts up, not for every request.\n Default:\n  as_whois_server whois.ra.net\n", "   TAG: offline_mode\n Enable this option and Squid will never try to validate cached\n objects.\n Default:\n  offline_mode off\n", "   TAG: uri_whitespace\n What to do with requests that have whitespace characters in the\n URI.  Options:\n \n strip:  The whitespace characters are stripped out of the URL.\n This is the behavior recommended by RFC2396 and RFC3986\n for tolerant handling of generic URI.\n NOTE: This is one difference between generic URI and HTTP URLs.\n \n deny:   The request is denied.  The user receives an \"Invalid\n Request\" message.\n This is the behaviour recommended by RFC2616 for safe\n handling of HTTP request URL.\n \n allow:  The request is allowed and the URI is not changed.  The\n whitespace characters remain in the URI.  Note the\n whitespace is passed to redirector processes if they\n are in use.\n Note this may be considered a violation of RFC2616\n request parsing where whitespace is prohibited in the\n URL field.\n \n encode:The request is allowed and the whitespace characters are\n encoded according to RFC1738.\n \n chop:The request is allowed and the URI is chopped at the\n first whitespace.\n \n \n NOTE the current Squid implementation of encode and chop violates\n RFC2616 by not using a 301 redirect after altering the URL.\n Default:\n  uri_whitespace strip\n", "   TAG: chroot\n Specifies a directory where Squid should do a chroot() while\n initializing.  This also causes Squid to fully drop root\n privileges after initializing.  This means, for example, if you\n use a HTTP port less than 1024 and try to reconfigure, you may\n get an error saying that Squid can not open the port.\n Default:\n  none\n", "   TAG: balance_on_multiple_ip\n Modern IP resolvers in squid sort lookup results by preferred access.\n By default squid will use these IP in order and only rotates to\n the next listed when the most preffered fails.\n \n Some load balancing servers based on round robin DNS have been\n found not to preserve user session state across requests\n to different IP addresses.\n \n Enabling this directive Squid rotates IP's per request.\n Default:\n  balance_on_multiple_ip off\n", "   TAG: pipeline_prefetch\n HTTP clients may send a pipeline of 1+N requests to Squid using a\n single connection, without waiting for Squid to respond to the first\n of those requests. This option limits the number of concurrent\n requests Squid will try to handle in parallel. If set to N, Squid\n will try to receive and process up to 1+N requests on the same\n connection concurrently.\n \n Defaults to 0 (off) for bandwidth management and access logging\n reasons.\n \n NOTE: pipelining requires persistent connections to clients.\n \n WARNING: pipelining breaks NTLM and Negotiate/Kerberos authentication.\n Default:\n  Do not pre-parse pipelined requests.\n", "   TAG: high_response_time_warning(msec)\n If the one-minute median response time exceeds this value,\n Squid prints a WARNING with debug level 0 to get the\n administrators attention.  The value is in milliseconds.\n Default:\n  disabled.\n", "   TAG: high_page_fault_warning\n If the one-minute average page fault rate exceeds this\n value, Squid prints a WARNING with debug level 0 to get\n the administrators attention.  The value is in page faults\n per second.\n Default:\n  disabled.\n", "   TAG: high_memory_warning\n  Note: This option is only available if Squid is rebuilt with the\n        GNU Malloc with mstats()\n \n If the memory usage (as determined by gnumalloc, if available and used)\n exceedsthis amount, Squid prints a WARNING with debug level 0 to get\n the administrators attention.\n Default:\n  disabled.\n", "   TAG: sleep_after_fork(microseconds)\n When this is set to a non-zero value, the main Squid process\n sleeps the specified number of microseconds after a fork()\n system call. This sleep may help the situation where your\n system reports fork() failures due to lack of (virtual)\n memory. Note, however, if you have a lot of child\n processes, these sleep delays will add up and your\n Squid will not service requests for some amount of time\n until all the child processes have been started.\n On Windows value less then 1000 (1 milliseconds) are\n rounded to 1000.\n Default:\n  sleep_after_fork 0\n", "   TAG: windows_ipaddrchangemonitoron|off\n  Note: This option is only available if Squid is rebuilt with the\n        MS Windows\n \n On Windows Squid by default will monitor IP address changes and will \n reconfigure itself after any detected event. This is very useful for\n proxies connected to internet with dial-up interfaces.\n In some cases (a Proxy server acting as VPN gateway is one) it could be\n desiderable to disable this behaviour setting this to 'off'.\n Note: after changing this, Squid service must be restarted.\n Default:\n  windows_ipaddrchangemonitor on\n", "   TAG: eui_lookup\n Whether to lookup the EUI or MAC address of a connected client.\n Default:\n  eui_lookup on\n", "   TAG: max_filedescriptors\n Reduce the maximum number of filedescriptors supported below\n the usual operating system defaults.\n \n Remove from squid.conf to inherit the current ulimit setting.\n \n Note: Changing this requires a restart of Squid. Also\n not all I/O types supports large values (eg on Windows).\n Default:\n  Use operating system limits set by ulimit.\n"]}