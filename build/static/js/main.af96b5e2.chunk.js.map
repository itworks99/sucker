{"version":3,"sources":["sucker.jsx","index.jsx"],"names":["Sucker","useState","activeAccordionIndex","setActiveAccordionIndex","activeRowIndex","setActiveRowIndex","helpEntryId","setHelpEntryId","openEditor","setOpenEditor","openImportWindow","setOpenImportWindow","dataJSON","setDataJSON","isLoaded","setIsLoaded","statusMessage","setStatusMessage","version","setVersion","openReloadConfirmation","setOpenReloadConfirmation","openWindow","setOpenWindow","elemContextRef","setContextRef","aboutScreenActive","setAboutScreenActive","configurationToImport","setConfigurationToImport","multilineEntryId","setMultilineEntryId","err","setError","componentRef","source","handleImportWindow","handleEntrySliderClick","e","is_enabled","target","value","handleHelpButtonClick","handleClick","titleProps","index","handleAboutWindow","handleContextRef","contextRef","closeDialogWindow","readValueFromComponent","entrynumber","displayMultilineEditor","focusOnComponent","current","focus","useEffect","loadConfigurationFile","httpRequestMethod","fetchUrl","body","endsWith","JSON","stringify","fetch","method","headers","Accept","then","response","json","error","greyColor","primaryAccentColor","initialSearchState","loading","results","modalWindowRenderer","onOpen","icon","HeaderContent","modalcontent","Modal","dimmer","open","closeOnEscape","onClose","Header","Icon","name","React","useReducer","state","action","type","query","Error","dispatch","timeoutRef","useRef","handleSearchChange","useCallback","data","clearTimeout","setTimeout","length","re","RegExp","replace","res","filter","result","test","title","message","output","undefined","tags","Dimmer","inverted","active","Loader","size","squid_version","forEach","tag","id","push","record","helpTitle","helpContent","help","Segment","Menu","fixed","fitted","Container","Item","as","header","onClick","color","Content","Subheader","Search","placeholder","minCharacters","onResultSelect","props","recordNumber","section_number","switchable","onSearchChange","resultRenderer","SearchSubheader","all_sections","toLowerCase","Dropdown","options","i","available_versions","key","text","versionDropdownOptions","inline","defaultValue","onChange","ver","innerText","Divider","Grid","centered","columns","Column","widescreen","computer","Message","ref","Accordion","styled","fluid","AccordionContent","getOptions","keys","Array","from","n","tagEntryKey","warningBuiltWithHover","warningMessageHover","tagComponentUnitLabel","AccordionIconColors","SectionContentsPopup","TableContentInSection","tagRepresentationComponent","createRef","reference","selection","switch_position","Button","secondary","compact","units","Label","basic","content","horizontal","Form","Field","Input","labelPosition","message_built","Popup","trigger","message_warning","defaultRecordChecked","Table","Row","Cell","width","Checkbox","defaultChecked","slider","align","circular","Title","position","textAlign","striped","Body","createAccordionSections","Sticky","context","scrollContext","scrolling","TextArea","rows","generatedSquidConfiguration","generateSquidConfiguration","Actions","negative","control","messageList","counter","z","onClickOutside","page","href","positive","rootNode","document","getElementById","ReactDOM","render"],"mappings":"2XA6Be,SAASA,IAAU,IAAD,EACyBC,mBAAS,GADlC,mBACxBC,EADwB,KACFC,EADE,OAEaF,mBAAS,GAFtB,mBAExBG,EAFwB,KAERC,EAFQ,OAGOJ,mBAAS,GAHhB,mBAGxBK,EAHwB,KAGXC,EAHW,OAIKN,oBAAS,GAJd,mBAIxBO,EAJwB,KAIZC,EAJY,OAKiBR,oBAAS,GAL1B,mBAKxBS,EALwB,KAKNC,EALM,OAMCV,mBAAS,IANV,mBAMxBW,EANwB,KAMdC,EANc,OAOCZ,oBAAS,GAPV,mBAOxBa,GAPwB,KAOdC,GAPc,QAQWd,mBAAS,IARpB,qBAQxBe,GARwB,MAQTC,GARS,SASDhB,mBAAS,IATR,qBASxBiB,GATwB,MASfC,GATe,SAU6BlB,oBAAS,GAVtC,qBAUxBmB,GAVwB,MAUAC,GAVA,SAWKpB,oBAAS,GAXd,qBAWxBqB,GAXwB,MAWZC,GAXY,SAYStB,qBAZT,qBAYxBuB,GAZwB,MAYRC,GAZQ,SAamBxB,qBAbnB,qBAaxByB,GAbwB,MAaLC,GAbK,SAc2B1B,qBAd3B,qBAcxB2B,GAdwB,MAcDC,GAdC,SAeiB5B,qBAfjB,qBAexB6B,GAfwB,MAeNC,GAfM,SAgBP9B,qBAhBO,qBAgBxB+B,GAhBwB,MAgBnBC,GAhBmB,MAkBzBC,GAAe,GAGfC,GAAS,GAEf,SAASC,KACPzB,GAAqBD,GAavB,SAAS2B,GAAuBC,GAC9B1B,EAAS2B,WAAWD,EAAEE,OAAOC,QAAU7B,EAAS2B,WAAWD,EAAEE,OAAOC,OAGtE,SAASC,GAAsBJ,EAAGG,GAChClC,EAAekC,EAAMA,OAGvB,IAAME,GAAc,SAACL,EAAGM,GAAgB,IAC9BC,EAAUD,EAAVC,MAER1C,EADiBD,IAAyB2C,GAAS,EAAIA,IAQzD,SAASC,KACPnB,IAAsBD,IAGxB,SAASqB,GAAiBC,GACxBvB,GAAcuB,GAwFhB,SAASC,KACP1B,IAAc,GAGhB,SAAS2B,GAAuBZ,EAAhC,GAA4D,IAAvBa,EAAsB,EAAtBA,YAAaV,EAAS,EAATA,MAChD7B,EAAS6B,MAAMU,GAAeV,EAOhC,SAASW,GAAuBd,GAC9BP,GAAoBO,EAAEE,OAAOC,OAC7BhC,GAAeD,GAOjB,SAAS6C,GAAiBf,EAA1B,GAA+C,IAAhBa,EAAe,EAAfA,YACXjB,GAAaiB,GACrBG,QAAQC,QA5GpBC,qBAAU,WACR,SAASC,EAAsBC,EAAmBC,GAChD,IAAIC,EAyBJ,OAfID,EAASE,SAAS,aACpBD,EAAOE,KAAKC,UAAU,CAAE7C,cAE1B8C,MAAML,EAAU,CACdM,OAAQP,EACRQ,QAdc,CACdC,OAAQ,mBACR,eAAgB,mBAChB,8BAA+B,IAC/B,+BACE,yCACF,iCACE,iJAQFP,SAECQ,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACLzD,EAAYyD,MAEbF,KAAKrD,IAAY,IAAO,SAACwD,GACxBtC,GAASsC,MAENlD,IAA0B,GASnC,MANgB,KAAZH,GACFuC,EAAsB,MAAO,8BAE7BA,EAAsB,UAAW,iCAG5B,WACL1C,IAAY,MAEb,CAACG,KAmFJ,IAAMsD,GAAY,OACZC,GAAqB,SAkBrBC,GAAqB,CACzBC,SAAS,EACTC,QAAS,GACTnC,MAAO,IAiBT,IAAMoC,GAAsB,SAACC,EAAQC,EAAMC,EAAeC,GACxD,OACE,eAACC,EAAA,EAAD,CACEC,OAAO,WACPC,KAAMN,EACNO,eAAa,EACbC,QAASrC,GAJX,UAME,eAACiC,EAAA,EAAMK,OAAP,WACE,cAACC,EAAA,EAAD,CAAMC,KAAMV,IACZ,mCAAGC,OAEJC,MA5OwB,OA+eLS,IAAMC,YA7RhC,SAAuBC,EAAOC,GAC5B,OAAQA,EAAOC,MACb,IAAK,cACH,OAAOpB,GACT,IAAK,eACH,OAAO,2BAAKkB,GAAZ,IAAmBjB,SAAS,EAAMlC,MAAOoD,EAAOE,QAClD,IAAK,gBACH,OAAO,2BAAKH,GAAZ,IAAmBjB,SAAS,EAAOC,QAASiB,EAAOjB,UAErD,QACE,MAAM,IAAIoB,SAmR0CtB,IA/e3B,qBA+exBkB,GA/ewB,MA+ejBK,GA/eiB,MAgfvBtB,GAA4BiB,GAA5BjB,QAASC,GAAmBgB,GAAnBhB,QAASnC,GAAUmD,GAAVnD,MAEpByD,GAAaR,IAAMS,SACnBC,GAAqBV,IAAMW,aAC/B,SAAC/D,EAAGgE,GACFC,aAAaL,GAAW5C,SACxB2C,GAAS,CAAEH,KAAM,eAAgBC,MAAOO,EAAK7D,QAM7CyD,GAAW5C,QAAUkD,YAAW,WAC9B,GAAIF,EAAK7D,MAAMgE,OAAS,EACtBR,GAAS,CAAEH,KAAM,oBADnB,CAIA,IAAMY,EAAK,IAAIC,OAAoBL,EAAK7D,MAR1BmE,QAAQ,sBAAuB,QAQG,KAE1CC,EAAM1E,GAAO2E,QADH,SAACC,GAAD,OAAYL,EAAGM,KAAKD,EAAOE,UAE3ChB,GAAS,CACPH,KAAM,gBACNlB,QAASiC,OAEV,OAEL,CAAC1E,KAWH,GARAuD,IAAMlC,WAAU,WACd,OAAO,WACL+C,aAAaL,GAAW5C,YAEzB,IAEHoC,IAAMlC,WAAU,cAAU,CAAClD,IAEvB0B,GACF,OAAO,0CAAaA,GAAIkF,WAG1B,IAAIC,GAAS,GAEb,IAAiB,IAAbrG,SAAwCsG,IAAlBxG,EAASyG,KACjCF,GACE,mCACE,cAACG,EAAA,EAAD,CAAQC,UAAQ,EAACC,QAAS1G,GAA1B,SACE,cAAC2G,EAAA,EAAD,CAAQF,UAAQ,EAACG,KAAK,UAAtB,6BAMD,CACW,KAAZxG,IACFC,GAAWP,EAAS+G,cAAc,IAEpC/G,EAASyG,KAAKO,SAAQ,SAACC,EAAKC,GAAN,OACpB3F,GAAO4F,KAAK,CACVd,MAAM,GAAD,OAAKY,GACVG,OAAQF,OAGZ,IAAMG,GAAYrH,EAASyG,KAAK/G,EAAc,GACxC4H,GAActH,EAASuH,KAAK7H,EAAc,GAEhD6G,GACE,qCACE,cAACiB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAMC,MAAM,MAAMf,UAAQ,EAACgB,OAAO,aAAlC,SACE,eAACC,EAAA,EAAD,WACE,cAACH,EAAA,EAAKI,KAAN,CAAWC,GAAG,IAAIC,QAAM,EAACC,QAAS9F,GAAlC,SACE,eAACyC,EAAA,EAAD,CAAQgC,UAAQ,EAACmB,GAAG,KAApB,UACE,cAAClD,EAAA,EAAD,CACE+B,UAAQ,EACR9B,KAAK,iBACLoD,MAAOpE,GACPiD,KAAK,QAEP,eAACnC,EAAA,EAAOuD,QAAR,qBAjkBU,SAkkBV,cAACvD,EAAA,EAAOwD,UAAR,8CAKJ,cAACV,EAAA,EAAKI,KAAN,CAAWC,GAAG,IAAd,SACE,cAACM,EAAA,EAAD,CACEC,YAAY,cACZC,cAAe,EACfvE,QAASA,GACTwE,eA5ZhB,SAAwBC,EAAxB,GAA4C,IACpCC,EADmC,EAAVtC,OACHiB,OAE5B7H,EAAwBS,EAAS0I,eAAeD,IAChDhJ,EAAkBgJ,GACwB,IAAtCzI,EAAS2I,WAAWF,IACVnH,GAAamH,GACf/F,QAAQC,SAsZNiG,eAAgBpD,GAChBqD,eA9Yc,SAAC,GAAuB,IAArBxC,EAAoB,EAApBA,MAAOe,EAAa,EAAbA,OAChC0B,EACJ,cAACnE,EAAA,EAAOwD,UAAR,UACGnI,EAAS+I,aAAa/I,EAAS0I,eAAetB,IAAS4B,gBAG5D,OACE,eAACrE,EAAA,EAAD,CAAqBmC,KAAK,OAA1B,UACGT,EACAyC,IAFU1B,IAwYDpD,QAASA,GACTnC,MAAOA,OAGX,cAAC4F,EAAA,EAAKI,KAAN,UACE,eAAClD,EAAA,EAAD,CAAQgC,UAAQ,EAACmB,GAAG,KAApB,0BACgB,IACd,cAACmB,EAAA,EAAD,CACEC,QAzUlB,WAEE,IADA,IAAMA,EAAU,GACPC,EAAI,EAAGA,EAAInJ,EAASoJ,mBAAmBvD,OAAQsD,GAAK,EAC3DD,EAAQ/B,KAAK,CACXkC,IAAKF,EACLG,KAAMtJ,EAASoJ,mBAAmBD,GAClCtH,MAAO7B,EAASoJ,mBAAmBD,KAGvC,OAAOD,EAgUkBK,GACTC,QAAM,EACNC,aAAcnJ,GACdoJ,SAzjBlB,SAAoChI,GAClC,IAAMiI,EAAMjI,EAAEE,OAAOgI,UACrBrJ,GAAWoJ,GACXlJ,IAA0B,WA0jBhB,cAACgH,EAAA,EAAKI,KAAN,CAAWC,GAAG,IAAIE,QAziB9B,WACErH,IAAc,IAwiBJ,SACE,eAACgE,EAAA,EAAD,CAAQgC,UAAQ,EAACmB,GAAG,KAApB,UACE,cAAClD,EAAA,EAAD,CAAMC,KAAK,UADb,YAKF,cAAC4C,EAAA,EAAKI,KAAN,CAAWC,GAAG,IAAIE,QAASxG,GAA3B,SACE,eAACmD,EAAA,EAAD,CAAQgC,UAAQ,EAACmB,GAAG,KAApB,UACE,cAAClD,EAAA,EAAD,CAAMC,KAAK,aADb,qBAQR,cAACgF,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CAAMC,UAAQ,EAACC,QAAS,EAAxB,UACE,cAACF,EAAA,EAAKG,OAAN,CAAaC,WAAY,EAAGC,SAAU,EAAtC,SA1XJ,eAACC,EAAA,EAAD,CAASnC,MAAOrE,GAAhB,UACE,qEACsC,4BAAItD,QAE1C,8BACE,4BAAIN,EAASyG,KAAKZ,SADpB,kBAC+C,IAC7C,4BAAI7F,EAAS+I,aAAalD,SAF5B,eAIA,4BAAIzF,KACJ,wCACA,8BACE,cAACwE,EAAA,EAAD,CAAMC,KAAK,SADb,yBAGA,8BACE,cAACD,EAAA,EAAD,CAAMC,KAAK,OAAOoD,MAAOrE,KAD3B,wCAIA,8BACE,cAACgB,EAAA,EAAD,CAAMC,KAAK,OAAOoD,MAAOpE,KAD3B,0CA4WE,cAACiG,EAAA,EAAKG,OAAN,CAAaC,WAAY,EAAGC,SAAU,EAAtC,SACE,qBAAKE,IAAK,kBAAMlI,IAAhB,SACE,cAACyF,EAAA,EAAD,UACE,cAAC0C,EAAA,EAAD,CAAWC,QAAM,EAACC,OAAK,EAAvB,SA3Vd,WACE,IAAMC,EAAmB,GACzB,SAASC,EAAWC,EAAM1D,GACxB,OAAO2D,MAAMC,KAAKF,GAAM,SAACtB,GAAD,MAAU,CAChCA,IAAI,GAAD,OAAKpC,EAAL,YAAYoC,GACfC,KAAK,GAAD,OAAKrC,EAAL,YAAYoC,GAChBxH,MAAM,GAAD,OAAKoF,EAAL,YAAYoC,OAGrB,GAAIrJ,EAQF,IAPA,IAAI8K,EAAI,EACJC,EAAc,EACdC,EAAwB,GACxBC,EAAsB,GACtBC,EAAwB,GACtBC,EAAsB,GAEnBhC,EAAI,EAAGA,EAAInJ,EAAS+I,aAAalD,OAAQsD,GAAK,EAAG,CACxD,IAAMiC,EAAuB,GACvBC,EAAwB,GAG9B,IAFAD,EAAqBjC,GAAK,GAEnBnJ,EAAS0I,eAAeoC,KAAO3B,GAAG,CACnCnJ,EAAS2B,WAAWmJ,GAAK,IAC3BK,EAAoBhC,GAAKtF,IAG3B,IAAIyH,EAA6B,GACjCF,EAAqBjC,IAArB,UAA8BnJ,EAASyG,KAAKqE,GAA5C,MAEAxJ,GAAawJ,GAAKhG,IAAMyG,YACxB,IAAMC,EAAYlK,GAAawJ,GAE/B,GAAK9K,EAAS2I,WAAWmC,GAyClB,GAA+B,IAA3B9K,EAAS2I,WAAWmC,GAAU,CACvC,IACM5B,EAAUwB,EAAW,CAAC,KAAM,OADtB1K,EAASyG,KAAKqE,IAE1BQ,EACE,mCACE,cAACrC,EAAA,EAAD,CACEoB,IAAKmB,EACLjJ,YAAawI,EACbP,OAAK,EACLiB,WAAS,EACTvC,QAASA,EACTO,aAAcP,EAAQlJ,EAAS0L,gBAAgBZ,IAAIjJ,MACnD6H,SAAUpH,YAIoB,IAA3BtC,EAAS2I,WAAWmC,KAC7BQ,EACE,mCACE,eAACK,EAAA,EAAD,CACEtB,IAAKmB,EACLI,WAAS,EACTC,SAAO,EACPhK,MAAOiJ,EACP9C,QAASxF,GALX,UAOGxC,EAASyG,KAAKqE,GAPjB,8BA1DFI,EADElL,EAAS8L,MAAMhB,GAEf,mCACE,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,QAASjM,EAAS8L,MAAMhB,GAAIoB,YAAU,MAI/B,GAG1BZ,EACE,mCACE,cAACa,EAAA,EAAD,UACE,cAACA,EAAA,EAAKC,MAAN,UACE,eAACC,EAAA,EAAD,CACE7B,OAAK,EACLH,IAAKmB,EACLjJ,YAAawI,EACbtB,aAAY,UAAKzJ,EAAS6B,MAAMiJ,GAApB,KACZpB,SAAUpH,GACVgK,cAAc,QACdpH,KAAK,OACLD,QAAM,EARR,UAUE,0BACCiG,EACD,cAACS,EAAA,EAAD,CACEK,OAAK,EACL9G,KAAK,QACL3C,YAAawI,EACb/C,QAASvF,GAJX,4BA8CZuI,EAAwB,GAEpBhL,EAASuM,cAAczB,KACzBE,EACE,mCACE,cAACwB,EAAA,EAAD,CACEC,QAAS,cAAC7H,EAAA,EAAD,CAAMqD,MA5Mb,OA4M+BpD,KAAK,iBACtCoH,QAAO,uDAAkDjM,EAASuM,cAAczB,SAMxFG,EAAsB,GAElBjL,EAAS0M,gBAAgB5B,KAC3BG,EACE,mCACE,cAACuB,EAAA,EAAD,CACEC,QAAS,cAAC7H,EAAA,EAAD,CAAMqD,MA1Nb,OA0N+BpD,KAAK,iBACtCoH,QAASjM,EAAS0M,gBAAgB5B,QAM1C,IAAI6B,GAAuB,EACvB3M,EAAS2B,WAAWmJ,GAAK,IAC3B6B,GAAuB,GAEzBtB,EAAsBP,GACpB,eAAC8B,EAAA,EAAMC,IAAP,CAAgCjG,OAAQpH,IAAmBsL,EAA3D,UACE,cAAC8B,EAAA,EAAME,KAAP,CAAYC,MAAO,EAAnB,SACE,cAACC,EAAA,EAAD,CACEnL,MAAOkJ,EACP7D,GAAE,uBAAmB6D,GAAe,GACpCkC,eAAgBN,EAChBO,QAAM,EACNlF,QAASvG,OAGb,cAACmL,EAAA,EAAME,KAAP,UAAaxB,IACb,eAACsB,EAAA,EAAME,KAAP,CAAYC,MAAO,EAAnB,UACG/B,EACAC,KAEH,cAAC2B,EAAA,EAAME,KAAP,CAAYC,MAAO,EAAGI,MAAM,OAA5B,SACE,cAACxB,EAAA,EAAD,CACE9J,MAAOkJ,EACPc,SAAO,EACPuB,UAAQ,EACRxG,OAAQ9F,GACRkH,QAASlG,GACTqC,KAAK,aAtBX,kBAA2B2G,IA2B7BA,GAAK,EAGPL,EAAiBtB,GACf,eAACvB,EAAA,EAAD,WACE,eAAC0C,EAAA,EAAU+C,MAAX,CACEzG,OAAQtH,IAAyB6J,EACjClH,MAAOkH,EACPnB,QAASjG,GAHX,UAKE,mCACE,cAACyK,EAAA,EAAD,CACEC,QAAS,cAAC7H,EAAA,EAAD,CAAMC,KAAK,aACpBiC,KAAK,OACLwG,SAAS,cACTvF,OAAO,wBACPkE,QACE,cAACnC,EAAA,EAAD,CAAMC,UAAQ,EAACC,QAAS,EAAxB,SACE,cAACF,EAAA,EAAKG,OAAN,CAAasD,UAAU,OAAvB,SACE,8BAAMnC,EAAqBjC,aAMrC,cAACvE,EAAA,EAAD,CAAMC,KAAK,OAAOoD,MAAOkD,EAAoBhC,KApB/C,OAsBGnJ,EAAS+I,aAAaI,MAEzB,cAACmB,EAAA,EAAUpC,QAAX,CAAmBtB,OAAQtH,IAAyB6J,EAApD,SACE,cAACyD,EAAA,EAAD,CAAOY,SAAO,EAAC3B,SAAO,EAACG,MAAM,OAA7B,SACE,cAACY,EAAA,EAAMa,KAAP,UAAapC,UA3BnB,sBAA+BlC,IAkCrC,OAAOsB,EAkJQiD,WAKT,cAAC5D,EAAA,EAAKG,OAAN,CAAaC,WAAY,EAAGC,SAAU,EAAtC,SACE,cAACwD,EAAA,EAAD,CAAQC,QAAShN,GAAgBiN,eAAa,EAA9C,SACE,eAACrG,EAAA,EAAD,CAASwE,OAAK,EAAClF,KAAK,QAApB,UACE,sBACA,cAACnC,EAAA,EAAD,UAAS0C,KACT,8BAAMC,eAKbrD,GACCvD,GACA,OACA,oBACA,qCACE,cAAC4D,EAAA,EAAM4D,QAAP,CAAe4F,WAAS,EAAxB,SACE,cAAC3B,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,MAAN,WACE,8BACE,wCADF,iKAG0D,IACxD,sDAJF,MAIkC,IAChC,gEALF,OAOA,cAAC2B,EAAA,EAAD,CAAUC,KAAM,GAAInM,MA7KpC,WAEE,IADA,IAAIoM,EAA8B,GACzB9E,EAAI,EAAGA,EAAInJ,EAAS0I,eAAe7C,OAAQsD,GAAK,EACnDnJ,EAAS2B,WAAWwH,KACtB8E,EAA2B,UAAMA,EAAN,aAAsCjO,EAAS6B,MAAMsH,KAEpF,OAAO8E,EAuKkCC,YAIjC,cAAC5J,EAAA,EAAM6J,QAAP,UACE,cAACxC,EAAA,EAAD,CAAQyC,UAAQ,EAACtH,KAAK,QAAQkB,QAAS3F,GAAvC,yBAML4B,GACCrE,EACA,QACA,kBAAMI,EAASyG,KAAKvF,MACpB,qCACE,cAACoD,EAAA,EAAM4D,QAAP,CAAe4F,WAAS,EAAxB,SACE,cAAC3B,EAAA,EAAD,UACE,cAACA,EAAA,EAAKC,MAAN,UACE,cAAC2B,EAAA,EAAD,CACEC,KAAM,GACNvE,aAAczJ,EAAS6B,MAAMX,IAC7BwI,SA7oBlB,SAA6BhI,GAC3B1B,EAAS6B,MAAMX,IAAoBQ,EAAEE,OAAOC,eAipBpC,eAACyC,EAAA,EAAM6J,QAAP,WACE,cAACxC,EAAA,EAAD,CAAQzG,KAAK,QAAQ0G,WAAS,EAA9B,+BAGA,cAACD,EAAA,EAAD,CAAQC,WAAS,EAAC5D,QAASxF,GAA3B,mCAMLyB,GACCnE,EACA,QACA,gCACA,qCACE,eAACwE,EAAA,EAAM4D,QAAP,CAAe4F,WAAS,EAAxB,UACE,8BACE,2CADF,+BAC+C,2CAAkB,IADjE,6DAE6D,IAC3D,sDAHF,MAGkC,IAChC,gEAJF,OAMA,8BACE,6CADF,oFAIA,cAAC3B,EAAA,EAAD,UACE,cAACA,EAAA,EAAK4B,SAAN,CACEM,QAAQ,WACR3E,SA9iBhB,SAAmChI,GACjCT,GAAyBS,EAAEE,OAAOC,eAijB1B,eAACyC,EAAA,EAAM6J,QAAP,WACE,cAACxC,EAAA,EAAD,CAAQC,WAAS,EAAC5D,QAASxG,GAA3B,mBAGA,cAACmK,EAAA,EAAD,CACEC,WAAS,EACT1G,KAAK,SACL7B,OAAO,OACP2E,QA9mBd,WACE5E,MAAM,+BAAgC,CACpCC,OAAQ,OACRL,KAAMhC,GACNsC,QAAS,CACP,8BAA+B,wBAC/B,+BACE,yCACF,+BACE,4CAGHE,KAAKrD,IAAY,IACjBqD,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACL,IAAI4C,EACAgI,EAAc,GACdC,EAAU,EACVC,EAAI,EACR,IAAKA,EAAI,EAAGA,EAAI9K,EAAKwD,GAAGrB,OAAQ2I,GAAK,EACnCxO,EAAS2B,WAAW6M,GAAK,EAE3B,IAAKA,EAAI,EAAGA,EAAI9K,EAAKwD,GAAGrB,OAAQ2I,GAAK,EAAG,CACtC,IAAMlB,EAAW5J,EAAKwD,GAAGsH,GACN,MAAf9K,EAAKwD,GAAGsH,GACVF,EAAW,UAAMA,EAAN,YAAqB5K,EAAK+C,KAAK+H,GAA/B,MAEXxO,EAAS2B,WAAW2L,GAAY,EAChCtN,EAAS6B,MAAMyL,GAAY5J,EAAK7B,MAAM2M,GACtCxO,EAAS2I,WAAW2E,GAAY5J,EAAKiF,WAAW6F,GAChDxO,EAAS0L,gBAAgB4B,GAAY5J,EAAKgI,gBAAgB8C,GAC1DD,GAAW,GAGK,KAAhBD,IACFA,EAAW,+FAA2FA,IAExGhI,EAAO,4BAAwB5C,EAAKwD,GAAGrB,OAAhC,+BAA6D0I,EAA7D,uBAAmFD,GAC1FvO,GAAoB,GACpBM,GAAiBiG,GACjBnG,IAAY,OAkkBN,2BAWN,eAACuG,EAAA,EAAD,CACEC,UAAQ,EACRC,OAAQ9F,GACR2N,eAAgBvM,GAChBwM,MAAI,EAJN,UAME,eAAC/J,EAAA,EAAD,CAAQmD,GAAG,KAAKG,MAAOpE,GAAvB,UACE,cAACe,EAAA,EAAD,CAAMC,KAAK,iBAAiBoD,MAAOpE,KADrC,YAIA,eAACc,EAAA,EAAD,CAAQmD,GAAG,KAAKG,MAAOrE,GAAvB,qBAzuBkB,SA4uBlB,eAACe,EAAA,EAAD,CAAQsD,MAAOrE,GAAf,UACE,yDAC2B,IACzB,mBAAG+K,KAAK,8BAAR,mBAFF,oBAIA,8BACE,cAAC/J,EAAA,EAAD,CAAMC,KAAK,WADb,UAEU,IACR,mBAAG8J,KAAK,sCAAR,iCAEF,2FACA,wDACyB,cAAC/J,EAAA,EAAD,CAAMqD,MAAM,OAAOpD,KAAK,mBAIpDZ,GACCzD,GACA,WACA,sDACA,qCACE,cAAC8D,EAAA,EAAM4D,QAAP,6KAKA,eAAC5D,EAAA,EAAM6J,QAAP,WACE,cAACxC,EAAA,EAAD,CAAQyC,UAAQ,EAACpG,QAhmB7B,WACEvH,IAA0B,IA+lBhB,gBAGA,cAACkL,EAAA,EAAD,CAAQiD,UAAQ,EAAhB,2BAOZ,OAAOrI,GCtyBT,IAAMsI,EAAWC,SAASC,eAAe,QAEzCC,IAASC,OAAO,cAAC7P,EAAD,IAAYyP,K","file":"static/js/main.af96b5e2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Accordion,\n  Button,\n  Checkbox,\n  Container,\n  Dimmer,\n  Divider,\n  Dropdown,\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Input,\n  Label,\n  Loader,\n  Menu,\n  Message,\n  Modal,\n  Popup,\n  Search,\n  Segment,\n  Sticky,\n  Table,\n  TextArea,\n} from \"semantic-ui-react\";\n\nconst suckerVersionString = \"0.3\";\n\nexport default function Sucker() {\n  const [activeAccordionIndex, setActiveAccordionIndex] = useState(1);\n  const [activeRowIndex, setActiveRowIndex] = useState(0);\n  const [helpEntryId, setHelpEntryId] = useState(0);\n  const [openEditor, setOpenEditor] = useState(false);\n  const [openImportWindow, setOpenImportWindow] = useState(false);\n  const [dataJSON, setDataJSON] = useState(\"\");\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [statusMessage, setStatusMessage] = useState(\"\");\n  const [version, setVersion] = useState(\"\");\n  const [openReloadConfirmation, setOpenReloadConfirmation] = useState(false);\n  const [openWindow, setOpenWindow] = useState(false);\n  const [elemContextRef, setContextRef] = useState();\n  const [aboutScreenActive, setAboutScreenActive] = useState();\n  const [configurationToImport, setConfigurationToImport] = useState();\n  const [multilineEntryId, setMultilineEntryId] = useState();\n  const [err, setError] = useState();\n\n  const componentRef = [];\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const source = [];\n\n  function handleImportWindow() {\n    setOpenImportWindow(!openImportWindow);\n  }\n\n  function handleMultilineEdit(e) {\n    dataJSON.value[multilineEntryId] = e.target.value;\n  }\n\n  function handleVersionDropdownClick(e) {\n    const ver = e.target.innerText;\n    setVersion(ver);\n    setOpenReloadConfirmation(true);\n  }\n\n  function handleEntrySliderClick(e) {\n    dataJSON.is_enabled[e.target.value] = !dataJSON.is_enabled[e.target.value];\n  }\n\n  function handleHelpButtonClick(e, value) {\n    setHelpEntryId(value.value);\n  }\n\n  const handleClick = (e, titleProps) => {\n    const { index } = titleProps;\n    const newIndex = activeAccordionIndex === index ? -1 : index;\n    setActiveAccordionIndex(newIndex);\n  };\n\n  function handleConfigPreview() {\n    setOpenWindow(true);\n  }\n\n  function handleAboutWindow() {\n    setAboutScreenActive(!aboutScreenActive);\n  }\n\n  function handleContextRef(contextRef) {\n    setContextRef(contextRef);\n  }\n\n  useEffect(() => {\n    function loadConfigurationFile(httpRequestMethod, fetchUrl) {\n      let body;\n      const headers = {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\":\n          \"GET, POST, OPTIONS, PUT, PATCH, DELETE\",\n        \"Access-Control-Request-Headers\":\n          \"X-Requested-With, Content-Type, Accept, access-control-allow-headers, X-CSRF-Token, access-control-allow-methods, access-control-allow-origin\",\n      };\n      if (fetchUrl.endsWith(\"version\")) {\n        body = JSON.stringify({ version });\n      }\n      fetch(fetchUrl, {\n        method: httpRequestMethod,\n        headers,\n        body,\n      })\n        .then((response) => response.json())\n        .then((json) => {\n          setDataJSON(json);\n        })\n        .then(setIsLoaded(true), (error) => {\n          setError(error);\n        });\n      return setOpenReloadConfirmation(false);\n    }\n\n    if (version === \"\") {\n      loadConfigurationFile(\"GET\", \"http://localhost:3000/json\");\n    } else {\n      loadConfigurationFile(\"OPTIONS\", \"http://localhost:3000/version\");\n    }\n\n    return function cleanup() {\n      setIsLoaded(false);\n    };\n  }, [version]);\n\n  function importConfiguration() {\n    fetch(\"http://localhost:3000/import\", {\n      method: \"POST\",\n      body: configurationToImport,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n        \"Access-Control-Allow-Methods\":\n          \"GET, POST, OPTIONS, PUT, PATCH, DELETE\",\n        \"Access-Control-Allow-Headers\":\n          \"X-Requested-With, Content-Type, Accept\",\n      },\n    })\n      .then(setIsLoaded(false))\n      .then((response) => response.json())\n      .then((json) => {\n        let message = \"\";\n        let messageList = \"\";\n        let counter = 0;\n        let z = 0;\n        for (z = 0; z < json.id.length; z += 1) {\n          dataJSON.is_enabled[z] = 0;\n        }\n        for (z = 0; z < json.id.length; z += 1) {\n          const position = json.id[z];\n          if (json.id[z] === 999) {\n            messageList = `${messageList} ${json.tags[z]};`;\n          } else {\n            dataJSON.is_enabled[position] = 1;\n            dataJSON.value[position] = json.value[z];\n            dataJSON.switchable[position] = json.switchable[z];\n            dataJSON.switch_position[position] = json.switch_position[z];\n            counter += 1;\n          }\n        }\n        if (messageList !== \"\") {\n          messageList = ` The following entries were skipped as they are not being present in current version:${messageList}`;\n        }\n        message = `Import completed: ${json.id.length} entries processed, ${counter} recognized.${messageList}`;\n        setOpenImportWindow(false);\n        setStatusMessage(message);\n        setIsLoaded(true);\n      });\n  }\n\n  function closeDialogWindow() {\n    setOpenWindow(false);\n  }\n\n  function readValueFromComponent(e, { entrynumber, value }) {\n    dataJSON.value[entrynumber] = value;\n  }\n\n  function readConfigurationToImport(e) {\n    setConfigurationToImport(e.target.value);\n  }\n\n  function displayMultilineEditor(e) {\n    setMultilineEntryId(e.target.value);\n    setOpenEditor(!openEditor);\n  }\n\n  function closeReloadConfirmationWindow() {\n    setOpenReloadConfirmation(false);\n  }\n\n  function focusOnComponent(e, { entrynumber }) {\n    const component = componentRef[entrynumber];\n    component.current.focus();\n  }\n\n  function focusTextInput(props, { result }) {\n    const recordNumber = result.record;\n    let component = \"\";\n    setActiveAccordionIndex(dataJSON.section_number[recordNumber]);\n    setActiveRowIndex(recordNumber);\n    if (dataJSON.switchable[recordNumber] !== 1) {\n      component = componentRef[recordNumber];\n      component.current.focus();\n    }\n  }\n\n  const greyColor = \"grey\";\n  const primaryAccentColor = \"purple\";\n  const pinkColor = \"pink\";\n  const blueColor = \"blue\";\n\n  const searchResultsRenderer = ({ title, record }) => {\n    const SearchSubheader = (\n      <Header.Subheader>\n        {dataJSON.all_sections[dataJSON.section_number[record]].toLowerCase()}\n      </Header.Subheader>\n    );\n    return (\n      <Header key={record} size=\"tiny\">\n        {title}\n        {SearchSubheader}\n      </Header>\n    );\n  };\n\n  const initialSearchState = {\n    loading: false,\n    results: [],\n    value: \"\",\n  };\n\n  function SearchReducer(state, action) {\n    switch (action.type) {\n      case \"CLEAN_QUERY\":\n        return initialSearchState;\n      case \"START_SEARCH\":\n        return { ...state, loading: true, value: action.query };\n      case \"FINISH_SEARCH\":\n        return { ...state, loading: false, results: action.results };\n\n      default:\n        throw new Error();\n    }\n  }\n\n  const modalWindowRenderer = (onOpen, icon, HeaderContent, modalcontent) => {\n    return (\n      <Modal\n        dimmer=\"inverted\"\n        open={onOpen}\n        closeOnEscape\n        onClose={closeDialogWindow}\n      >\n        <Modal.Header>\n          <Icon name={icon} />\n          <>{HeaderContent}</>\n        </Modal.Header>\n        {modalcontent}\n      </Modal>\n    );\n  };\n\n  const statusMessageBox = () => {\n    return (\n      <Message color={greyColor}>\n        <p>\n          Loaded configuration for Squid ver. <b>{version}</b>\n        </p>\n        <p>\n          <b>{dataJSON.tags.length}</b> unique tags in{\" \"}\n          <b>{dataJSON.all_sections.length}</b> sections\n        </p>\n        <p>{statusMessage}</p>\n        <p>Legend:</p>\n        <p>\n          <Icon name=\"tags\" /> - selected section\n        </p>\n        <p>\n          <Icon name=\"tags\" color={greyColor} /> - section without enabled\n          options\n        </p>\n        <p>\n          <Icon name=\"tags\" color={primaryAccentColor} /> - section with enabled\n          options\n        </p>\n      </Message>\n    );\n  };\n\n  function versionDropdownOptions() {\n    const options = [];\n    for (let i = 0; i < dataJSON.available_versions.length; i += 1) {\n      options.push({\n        key: i,\n        text: dataJSON.available_versions[i],\n        value: dataJSON.available_versions[i],\n      });\n    }\n    return options;\n  }\n\n  function createAccordionSections() {\n    const AccordionContent = [];\n    function getOptions(keys, tag) {\n      return Array.from(keys, (key) => ({\n        key: `${tag} ${key}`,\n        text: `${tag} ${key}`,\n        value: `${tag} ${key}`,\n      }));\n    }\n    if (dataJSON) {\n      let n = 0;\n      let tagEntryKey = 0;\n      let warningBuiltWithHover = \"\";\n      let warningMessageHover = \"\";\n      let tagComponentUnitLabel = \"\";\n      const AccordionIconColors = [];\n\n      for (let i = 0; i < dataJSON.all_sections.length; i += 1) {\n        const SectionContentsPopup = [];\n        const TableContentInSection = [];\n        SectionContentsPopup[i] = \"\";\n\n        while (dataJSON.section_number[n] === i) {\n          if (dataJSON.is_enabled[n] > 0) {\n            AccordionIconColors[i] = primaryAccentColor;\n          }\n\n          let tagRepresentationComponent = \"\";\n          SectionContentsPopup[i] += `${dataJSON.tags[n]}\\n`;\n\n          componentRef[n] = React.createRef();\n          const reference = componentRef[n];\n\n          if (!dataJSON.switchable[n]) {\n            if (dataJSON.units[n]) {\n              tagComponentUnitLabel = (\n                <>\n                  <Label basic content={dataJSON.units[n]} horizontal />\n                </>\n              );\n            } else {\n              tagComponentUnitLabel = \"\";\n            }\n            // Regular tag\n            tagRepresentationComponent = (\n              <>\n                <Form>\n                  <Form.Field>\n                    <Input\n                      fluid\n                      ref={reference}\n                      entrynumber={tagEntryKey}\n                      defaultValue={`${dataJSON.value[n]} `}\n                      onChange={readValueFromComponent}\n                      labelPosition=\"right\"\n                      type=\"text\"\n                      action\n                    >\n                      <input />\n                      {tagComponentUnitLabel}\n                      <Button\n                        basic\n                        type=\"reset\"\n                        entrynumber={tagEntryKey}\n                        onClick={focusOnComponent}\n                      >\n                        Reset\n                      </Button>\n                    </Input>\n                  </Form.Field>\n                </Form>\n              </>\n            );\n            // Tag with on/off selection\n          } else if (dataJSON.switchable[n] === 1) {\n            const tag = dataJSON.tags[n];\n            const options = getOptions([\"on\", \"off\"], tag);\n            tagRepresentationComponent = (\n              <>\n                <Dropdown\n                  ref={reference}\n                  entrynumber={tagEntryKey}\n                  fluid\n                  selection\n                  options={options}\n                  defaultValue={options[dataJSON.switch_position[n]].value}\n                  onChange={readValueFromComponent}\n                />\n              </>\n            );\n          } else if (dataJSON.switchable[n] === 2) {\n            tagRepresentationComponent = (\n              <>\n                <Button\n                  ref={reference}\n                  secondary\n                  compact\n                  value={n}\n                  onClick={displayMultilineEditor}\n                >\n                  {dataJSON.tags[n]} - Click to edit\n                </Button>\n              </>\n            );\n          }\n\n          warningBuiltWithHover = \"\";\n\n          if (dataJSON.message_built[n]) {\n            warningBuiltWithHover = (\n              <>\n                <Popup\n                  trigger={<Icon color={blueColor} name=\"warning sign\" />}\n                  content={`Only available if Squid is compiled with the ${dataJSON.message_built[n]}`}\n                />\n              </>\n            );\n          }\n\n          warningMessageHover = \"\";\n\n          if (dataJSON.message_warning[n]) {\n            warningMessageHover = (\n              <>\n                <Popup\n                  trigger={<Icon color={pinkColor} name=\"warning sign\" />}\n                  content={dataJSON.message_warning[n]}\n                />\n              </>\n            );\n          }\n\n          let defaultRecordChecked = false;\n          if (dataJSON.is_enabled[n] > 0) {\n            defaultRecordChecked = true;\n          }\n          TableContentInSection[n] = (\n            <Table.Row key={`tableKey${n}`} active={activeRowIndex === n}>\n              <Table.Cell width={1}>\n                <Checkbox\n                  value={tagEntryKey}\n                  id={`checkboxEntry${(tagEntryKey += 1)}`}\n                  defaultChecked={defaultRecordChecked}\n                  slider\n                  onClick={handleEntrySliderClick}\n                />\n              </Table.Cell>\n              <Table.Cell>{tagRepresentationComponent}</Table.Cell>\n              <Table.Cell width={2}>\n                {warningBuiltWithHover}\n                {warningMessageHover}\n              </Table.Cell>\n              <Table.Cell width={1} align=\"left\">\n                <Button\n                  value={tagEntryKey}\n                  compact\n                  circular\n                  active={aboutScreenActive}\n                  onClick={handleHelpButtonClick}\n                  icon=\"help\"\n                />\n              </Table.Cell>\n            </Table.Row>\n          );\n          n += 1;\n        }\n\n        AccordionContent[i] = (\n          <Container key={`containerKey${i}`}>\n            <Accordion.Title\n              active={activeAccordionIndex === i}\n              index={i}\n              onClick={handleClick}\n            >\n              <>\n                <Popup\n                  trigger={<Icon name=\"dropdown\" />}\n                  size=\"tiny\"\n                  position=\"left center\"\n                  header=\"Tags in this section:\"\n                  content={\n                    <Grid centered columns={1}>\n                      <Grid.Column textAlign=\"left\">\n                        <pre>{SectionContentsPopup[i]}</pre>\n                      </Grid.Column>\n                    </Grid>\n                  }\n                />\n              </>\n              <Icon name=\"tags\" color={AccordionIconColors[i]} />\n              &nbsp;\n              {dataJSON.all_sections[i]}\n            </Accordion.Title>\n            <Accordion.Content active={activeAccordionIndex === i}>\n              <Table striped compact basic=\"very\">\n                <Table.Body>{TableContentInSection}</Table.Body>\n              </Table>\n            </Accordion.Content>\n          </Container>\n        );\n      }\n    }\n    return AccordionContent;\n  }\n\n  function generateSquidConfiguration() {\n    let generatedSquidConfiguration = \"\";\n    for (let i = 0; i < dataJSON.section_number.length; i += 1) {\n      if (dataJSON.is_enabled[i])\n        generatedSquidConfiguration = `${generatedSquidConfiguration}\\n${dataJSON.value[i]}`;\n    }\n    return generatedSquidConfiguration;\n  }\n\n  // Handle search box\n  const [state, dispatch] = React.useReducer(SearchReducer, initialSearchState);\n  const { loading, results, value } = state;\n\n  const timeoutRef = React.useRef();\n  const handleSearchChange = React.useCallback(\n    (e, data) => {\n      clearTimeout(timeoutRef.current);\n      dispatch({ type: \"START_SEARCH\", query: data.value });\n\n      function escapeRegExp(string) {\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n      }\n\n      timeoutRef.current = setTimeout(() => {\n        if (data.value.length < 1) {\n          dispatch({ type: \"CLEAN_QUERY\" });\n          return;\n        }\n        const re = new RegExp(escapeRegExp(data.value), \"i\");\n        const isMatch = (result) => re.test(result.title);\n        const res = source.filter(isMatch);\n        dispatch({\n          type: \"FINISH_SEARCH\",\n          results: res,\n        });\n      }, 300);\n    },\n    [source]\n  );\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timeoutRef.current);\n    };\n  }, []);\n\n  React.useEffect(() => {}, [helpEntryId]);\n\n  if (err) {\n    return <div>Error: {err.message}</div>;\n  }\n\n  let output = \"\";\n\n  if (isLoaded === false || dataJSON.tags === undefined) {\n    output = (\n      <>\n        <Dimmer inverted active={!isLoaded}>\n          <Loader inverted size=\"massive\">\n            Loading\n          </Loader>\n        </Dimmer>\n      </>\n    );\n  } else {\n    if (version === \"\") {\n      setVersion(dataJSON.squid_version[0]);\n    }\n    dataJSON.tags.forEach((tag, id) =>\n      source.push({\n        title: `${tag}`,\n        record: id,\n      })\n    );\n    const helpTitle = dataJSON.tags[helpEntryId - 1];\n    const helpContent = dataJSON.help[helpEntryId - 1];\n\n    output = (\n      <>\n        <Segment>\n          <Menu fixed=\"top\" inverted fitted=\"vertically\">\n            <Container>\n              <Menu.Item as=\"a\" header onClick={handleAboutWindow}>\n                <Header inverted as=\"h3\">\n                  <Icon\n                    inverted\n                    name=\"circle outline\"\n                    color={primaryAccentColor}\n                    size=\"big\"\n                  />\n                  <Header.Content>Sucker {suckerVersionString}</Header.Content>\n                  <Header.Subheader>\n                    Squid configuration editor\n                  </Header.Subheader>\n                </Header>\n              </Menu.Item>\n              <Menu.Item as=\"a\">\n                <Search\n                  placeholder=\"Search tags\"\n                  minCharacters={2}\n                  loading={loading}\n                  onResultSelect={focusTextInput}\n                  onSearchChange={handleSearchChange}\n                  resultRenderer={searchResultsRenderer}\n                  results={results}\n                  value={value}\n                />\n              </Menu.Item>\n              <Menu.Item>\n                <Header inverted as=\"h5\">\n                  Squid version{\" \"}\n                  <Dropdown\n                    options={versionDropdownOptions()}\n                    inline\n                    defaultValue={version}\n                    onChange={handleVersionDropdownClick}\n                  />\n                </Header>\n              </Menu.Item>\n              <Menu.Item as=\"a\" onClick={handleConfigPreview}>\n                <Header inverted as=\"h5\">\n                  <Icon name=\"magic\" />\n                  Show\n                </Header>\n              </Menu.Item>\n              <Menu.Item as=\"a\" onClick={handleImportWindow}>\n                <Header inverted as=\"h5\">\n                  <Icon name=\"download\" />\n                  Import\n                </Header>\n              </Menu.Item>\n            </Container>\n          </Menu>\n        </Segment>\n        <Divider />\n        <Grid centered columns={3}>\n          <Grid.Column widescreen={4} computer={2}>\n            {statusMessageBox()}\n          </Grid.Column>\n          <Grid.Column widescreen={6} computer={7}>\n            <div ref={() => handleContextRef}>\n              <Container>\n                <Accordion styled fluid>\n                  {createAccordionSections()}\n                </Accordion>\n              </Container>\n            </div>\n          </Grid.Column>\n          <Grid.Column widescreen={6} computer={7}>\n            <Sticky context={elemContextRef} scrollContext>\n              <Segment basic size=\"small\">\n                <p />\n                <Header>{helpTitle}</Header>\n                <pre>{helpContent}</pre>\n              </Segment>\n            </Sticky>\n          </Grid.Column>\n        </Grid>\n        {modalWindowRenderer(\n          openWindow,\n          \"copy\",\n          \"New configuration\",\n          <>\n            <Modal.Content scrolling>\n              <Form>\n                <Form.Field>\n                  <p>\n                    <b>To use:</b> copy configuration from the text area below\n                    and save it as squid.conf in the location of the original\n                    configuration file. By default, this file is located at{\" \"}\n                    <b>/etc/squid/squid.conf</b> or{\" \"}\n                    <b>/usr/local/squid/etc/squid.conf</b>.\n                  </p>\n                  <TextArea rows={20} value={generateSquidConfiguration()} />\n                </Form.Field>\n              </Form>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button negative size=\"large\" onClick={closeDialogWindow}>\n                close\n              </Button>\n            </Modal.Actions>\n          </>\n        )}\n        {modalWindowRenderer(\n          openEditor,\n          \"edit\",\n          () => dataJSON.tags[multilineEntryId],\n          <>\n            <Modal.Content scrolling>\n              <Form>\n                <Form.Field>\n                  <TextArea\n                    rows={20}\n                    defaultValue={dataJSON.value[multilineEntryId]}\n                    onChange={handleMultilineEdit}\n                  />\n                </Form.Field>\n              </Form>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button type=\"reset\" secondary>\n                Revert to default\n              </Button>\n              <Button secondary onClick={displayMultilineEditor}>\n                Save and close\n              </Button>\n            </Modal.Actions>\n          </>\n        )}\n        {modalWindowRenderer(\n          openImportWindow,\n          \"paste\",\n          \"Import existing configuration\",\n          <>\n            <Modal.Content scrolling>\n              <p>\n                <b>To import:</b> copy and paste contents of <b>squid.conf</b>{\" \"}\n                into the window below. By default, this file is located at{\" \"}\n                <b>/etc/squid/squid.conf</b> or{\" \"}\n                <b>/usr/local/squid/etc/squid.conf</b>.\n              </p>\n              <p>\n                <b>Please note:</b> lines that begin with &apos;#&apos; (i.e.\n                commented out) are not going to be processed.\n              </p>\n              <Form>\n                <Form.TextArea\n                  control=\"textarea\"\n                  onChange={readConfigurationToImport}\n                />\n              </Form>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button secondary onClick={handleImportWindow}>\n                Close\n              </Button>\n              <Button\n                secondary\n                type=\"submit\"\n                method=\"post\"\n                onClick={importConfiguration}\n              >\n                Import\n              </Button>\n            </Modal.Actions>\n          </>\n        )}\n        <Dimmer\n          inverted\n          active={aboutScreenActive}\n          onClickOutside={handleAboutWindow}\n          page\n        >\n          <Header as=\"h1\" color={primaryAccentColor}>\n            <Icon name=\"circle outline\" color={primaryAccentColor} />\n            Sucker\n          </Header>\n          <Header as=\"h2\" color={greyColor}>\n            version {suckerVersionString}\n          </Header>\n          <Header color={greyColor}>\n            <p>\n              configuration editor for{\" \"}\n              <a href=\"http://www.squid-cache.org/\">Squid</a> caching proxy\n            </p>\n            <p>\n              <Icon name=\"github\" />\n              Github:{\" \"}\n              <a href=\"https://github.com/itworks99/sucker\">itworks99/sucker</a>\n            </p>\n            <p>Built with Bottle, Gunicorn, Python, React and Semantic-UI</p>\n            <p>\n              Created in Sydney with <Icon color=\"pink\" name=\"heart\" />\n            </p>\n          </Header>\n        </Dimmer>\n        {modalWindowRenderer(\n          openReloadConfirmation,\n          \"question\",\n          \"Confirm reload of the Squid base configuration file\",\n          <>\n            <Modal.Content>\n              This action will reload base configuration file with the version\n              requested. Please note that any unsaved changes are going to be\n              lost. Do you want to proceed?\n            </Modal.Content>\n            <Modal.Actions>\n              <Button negative onClick={closeReloadConfirmationWindow}>\n                no\n              </Button>\n              <Button positive>yes</Button>\n            </Modal.Actions>\n          </>\n        )}\n      </>\n    );\n  }\n  return output;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\n// eslint-disable-next-line import/no-unresolved\nimport Sucker from \"./sucker\";\n\nconst rootNode = document.getElementById(\"root\");\n\nReactDOM.render(<Sucker />, rootNode);\n"],"sourceRoot":""}