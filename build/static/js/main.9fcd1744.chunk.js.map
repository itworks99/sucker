{"version":3,"sources":["sucker.jsx","serviceWorker.js","index.js"],"names":["Sucker","props","state","callLoadConfigurationFile","httpRequestMethod","loadConfigurationFile","importConfiguration","dataJSON","fetch","method","body","configurationToImport","headers","then","setState","isLoaded","response","json","importedDataJSON","importCompleted","message","messageList","counter","z","id","length","is_enabled","position","tags","value","switchable","switch_position","openImportWindow","statusMessage","closeConfigShow","closeOnEscape","closeOnDimmerClick","open","confirm","confirmClose","close","handleContextRef","contextRef","handleOpen","active","handleClose","handleEditorClose","openEditor","handleConfigPreview","handleHideClick","visible","resetComponent","isLoading","results","handleClick","_e","titleProps","index","newIndex","activeIndex","helpEntryId","handleHelpButtonClick","e","target","helpTextIsVisible","handleEntrySliderClick","handleVersionDropdownClick","version","openReloadConfirmation","readValueFromComponent","entrynumber","readConfigurationToImport","handleMultilineEdit","multilineEntryId","displayMultilineEditor","handleImportWindow","closeReloadConfirmationWindow","focusOnComponent","componentRef","current","focus","focusTextInput","_props","result","recordNumber","record","section_number","activeRowIndex","handleSearchChange","searchIterateOverArray","i","source","_","times","title","setTimeout","re","RegExp","escapeRegExp","filter","test","bind","AccordeonIconColors","this","error","Accept","JSON","stringify","color","content","Popup","trigger","Icon","name","activeAccordeonIndex","openMultilineEntryEditor","openConfigPreview","handleShowHelpClick","warningIconPopup","greyColor","primaryAccentColor","pinkColor","searchResultsRenderer","Header","key","size","subheader","all_sections","toLowerCase","modalWindowRenderer","onOpen","icon","headercontent","modalcontent","Modal","dimmer","onClose","Content","scrolling","Form","Fragment","Segment","Menu","fixed","inverted","fitted","Container","Item","as","header","onClick","Subheader","Search","placeholder","minCharacters","loading","onResultSelect","onSearchChange","resultRenderer","Dropdown","options","available_versions","push","text","versionDropdownOptions","inline","defaultValue","squid_version","onChange","Divider","Grid","centered","columns","Column","widescreen","computer","Message","ref","Accordion","styled","fluid","AccordionContent","n","tagEntryKey","helpKey","warningBuiltWithHover","warningMessageHover","tagComponentUnitLabel","SectionContentsPopup","TableContentInSection","tagRepresentationComponent","React","createRef","selection","Button","secondary","compact","units","Label","basic","horizontal","Field","Input","labelPosition","type","action","message_built","message_warning","defaultRecordChecked","Table","Row","Cell","width","Checkbox","defaultChecked","slider","allign","Title","textAlign","striped","Body","createSections","Sticky","context","offset","help","TextArea","autoHeight","generatedSquidConfiguration","generateSquidConfiguration","negative","control","Dimmer","onClickOutside","page","href","positive","Loader","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9fcd1744.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport React from \"react\";\nimport {\n  Accordion,\n  Button,\n  Checkbox,\n  Container,\n  Dimmer,\n  Divider,\n  Dropdown,\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Input,\n  Label,\n  Loader,\n  Menu,\n  Message,\n  Modal,\n  Popup,\n  Search,\n  Segment,\n  Sticky,\n  Table,\n  TextArea\n} from \"semantic-ui-react\";\n\nconst suckerVersionString = \"ver.0.2a\";\n\nclass Sucker extends React.Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n    this.state = { activeIndex: 0 };\n    this.state = { activeRowIndex: 0 };\n    this.state = { visible: false };\n    this.state = { helpEntryId: 0 };\n    this.state = { confirm: false };\n    this.state = { openEditor: false };\n    this.state = { openImportWindow: false };\n    this.state = { dataJSON: \"\" };\n    this.state = { isLoaded: false };\n    this.state = { configurationToImport: \"\" };\n    this.state = { statusMessage: \"\" };\n    this.state = { version: \"\" };\n    this.state = { openReloadConfirmation: false };\n    this.state = { httpRequestMethod: \"\" };\n    this.state = { closeOnEscape: false };\n    this.state = { closeOnDimmerClick: false };\n\n    this.componentRef = [];\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleConfigPreview = this.handleConfigPreview.bind(this);\n    this.handleMultilineEdit = this.handleMultilineEdit.bind(this);\n    this.handleHelpButtonClick = this.handleHelpButtonClick.bind(this);\n    this.handleEntrySliderClick = this.handleEntrySliderClick.bind(this);\n    this.readValueFromComponent = this.readValueFromComponent.bind(this);\n    this.displayMultilineEditor = this.displayMultilineEditor.bind(this);\n    this.handleImportWindow = this.handleImportWindow.bind(this);\n    this.readConfigurationToImport = this.readConfigurationToImport.bind(this);\n    this.importConfiguration = this.importConfiguration.bind(this);\n    this.focusOnComponent = this.focusOnComponent.bind(this);\n    this.AccordeonIconColors = {};\n    this.loadConfigurationFile = this.loadConfigurationFile.bind(this);\n    this.callLoadConfigurationFile = this.callLoadConfigurationFile.bind(this);\n  }\n\n  componentDidMount() {\n    this.httpRequestMethod = \"GET\";\n    this.loadConfigurationFile();\n  }\n\n  callLoadConfigurationFile = () => {\n    this.httpRequestMethod = \"OPTIONS\";\n    this.loadConfigurationFile();\n  };\n\n  loadConfigurationFile() {\n    this.setState({ isLoaded: false });\n    if (this.httpRequestMethod === \"GET\") {\n      fetch(\"http://localhost:3000/json\", {\n        method: this.httpRequestMethod\n      })\n        .then(response => response.json())\n        .then(\n          json => {\n            this.setState({\n              dataJSON: json,\n              isLoaded: true\n            });\n          },\n          error => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        );\n    } else {\n      fetch(\"http://localhost:3000/version\", {\n        method: this.httpRequestMethod,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\":\n            \"GET, POST, OPTIONS, PUT, PATCH, DELETE\",\n          \"Access-Control-Request-Headers\":\n            \"X-Requested-With, Content-Type, Accept, access-control-allow-headers, X-CSRF-Token, access-control-allow-methods, access-control-allow-origin\"\n        },\n        body: JSON.stringify({\n          version: this.version\n        })\n      })\n        .then(response => response.json())\n        .then(\n          json => {\n            this.setState({\n              dataJSON: json,\n              isLoaded: true\n            });\n          },\n          error => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        );\n      this.setState({ openReloadConfirmation: false });\n    }\n    return;\n  }\n\n  importConfiguration = () => {\n    const { dataJSON } = this.state;\n    fetch(\"http://localhost:3000/import\", {\n      method: \"POST\",\n      body: this.configurationToImport,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n        \"Access-Control-Allow-Methods\":\n          \"GET, POST, OPTIONS, PUT, PATCH, DELETE\",\n        \"Access-Control-Allow-Headers\": \"X-Requested-With, Content-Type, Accept\"\n      }\n    })\n      .then(this.setState({ isLoaded: false }))\n      .then(response => response.json())\n      .then(json => {\n        this.setState({\n          importedDataJSON: json,\n          importCompleted: true\n        });\n        var message = \"\";\n        var messageList = \"\";\n        var counter = 0;\n        for (var z = 0; z < json.id.length; z++) {\n          dataJSON.is_enabled[z] = 0;\n        }\n        for (z = 0; z < json.id.length; z++) {\n          var position = json.id[z];\n          if (json.id[z] === 999) {\n            messageList = messageList + \" \" + json.tags[z] + \";\";\n          } else {\n            dataJSON.is_enabled[position] = 1;\n            dataJSON.value[position] = json.value[z];\n            dataJSON.switchable[position] = json.switchable[z];\n            dataJSON.switch_position[position] = json.switch_position[z];\n            counter++;\n          }\n        }\n        if (messageList !== \"\") {\n          messageList =\n            \" The following entries were skipped as they are not being present in current version:\" +\n            messageList;\n        }\n        message =\n          \"Import completed: \" +\n          json.id.length +\n          \" entries processed, \" +\n          counter +\n          \" recognized.\" +\n          messageList;\n        this.setState({\n          openImportWindow: false,\n          statusMessage: message,\n          isLoaded: true\n        });\n      });\n  };\n\n  closeConfigShow = (closeOnEscape, closeOnDimmerClick) => () => {\n    this.setState({ closeOnEscape, closeOnDimmerClick, open: true });\n  };\n\n  confirm = () => this.setState({ confirm: true });\n  confirmClose = () => this.setState({ confirm: false });\n  open = () => this.setState({ open: true });\n  close = () => this.setState({ open: false });\n\n  handleContextRef = contextRef => this.setState({ contextRef });\n\n  handleOpen = () => this.setState({ active: true });\n  handleClose = () => this.setState({ active: false });\n\n  handleEditorClose = () => this.setState({ openEditor: false });\n  handleConfigPreview = () => this.setState({ open: true });\n  handleHideClick = () => this.setState({ visible: false });\n\n  resetComponent = () =>\n    this.setState({ isLoading: false, results: [], value: \"\" });\n\n  handleClick = (_e, titleProps) => {\n    const { index } = titleProps;\n    const { activeIndex } = this.state;\n    const newIndex = activeIndex === index ? -1 : index;\n    this.setState({ activeIndex: newIndex });\n    this.setState({ helpEntryId: 0 });\n  };\n\n  handleHelpButtonClick = e => {\n    this.setState({ helpEntryId: e.target.value });\n    this.setState({ helpTextIsVisible: true });\n  };\n\n  handleEntrySliderClick = e => {\n    const { dataJSON } = this.state;\n    dataJSON.is_enabled[e.target.value] = !dataJSON.is_enabled[e.target.value];\n  };\n\n  handleVersionDropdownClick = (_e, { value }) => {\n    this.version = value;\n    this.setState({ openReloadConfirmation: true });\n  };\n\n  readValueFromComponent = (_e, { entrynumber, value }) => {\n    const { dataJSON } = this.state;\n    dataJSON.value[entrynumber] = value;\n  };\n\n  readConfigurationToImport = e => {\n    this.configurationToImport = e.target.value;\n  };\n\n  handleMultilineEdit = e => {\n    const { dataJSON } = this.state;\n    dataJSON.value[this.multilineEntryId] = e.target.value;\n  };\n\n  displayMultilineEditor = (_e, { value }) => {\n    this.multilineEntryId = value;\n    this.setState(props => ({ openEditor: !props.openEditor }));\n  };\n\n  handleImportWindow = () => {\n    this.setState({ openImportWindow: !this.state.openImportWindow });\n  };\n\n  closeReloadConfirmationWindow = () =>\n    this.setState({ openReloadConfirmation: false });\n\n  focusOnComponent = (_e, { entrynumber }) => {\n    var component = this.componentRef[entrynumber];\n    component.current.focus();\n  };\n\n  focusTextInput = (_props, { result }) => {\n    const { dataJSON } = this.state;\n    var recordNumber = result.record;\n    var component = \"\";\n    this.setState(() => ({\n      activeIndex: dataJSON.section_number[recordNumber]\n    }));\n    this.setState(() => ({ activeRowIndex: recordNumber }));\n    if (dataJSON.switchable[recordNumber] !== 1) {\n      component = this.componentRef[recordNumber];\n      component.current.focus();\n    }\n  };\n\n  warningIconPopup(color, content) {\n    var warningMessageIcon = (\n      <Popup\n        trigger={<Icon color={color} name=\"warning sign\" />}\n        content={content}\n      />\n    );\n    return warningMessageIcon;\n  }\n\n  handleSearchChange = (_e, { value }) => {\n    function searchIterateOverArray() {\n      var i = 1;\n      return (i = i + 1);\n    }\n    const { dataJSON } = this.state;\n    const source = _.times(\n      dataJSON.tags.length,\n      (i = searchIterateOverArray) => ({\n        title: this.state.dataJSON.tags[i],\n        record: i\n      })\n    );\n\n    this.setState({ isLoading: true, value });\n    setTimeout(() => {\n      if (this.state.value.length < 1) return this.resetComponent();\n      const re = new RegExp(_.escapeRegExp(this.state.value), \"i\");\n      const isMatch = result => re.test(result.title);\n      this.setState({\n        isLoading: false,\n        results: _.filter(source, isMatch)\n      });\n    }, 300);\n  };\n\n  render() {\n    const {\n      activeIndex: activeAccordeonIndex,\n      activeRowIndex,\n      active,\n      openEditor: openMultilineEntryEditor,\n      open: openConfigPreview,\n      openImportWindow,\n      closeOnEscape,\n      dataJSON,\n      isLoaded,\n      error,\n      contextRef,\n      isLoading,\n      value,\n      results,\n      statusMessage,\n      openReloadConfirmation\n    } = this.state;\n    const handleClick = this.handleClick;\n    const handleShowHelpClick = this.handleHelpButtonClick;\n    const handleEntrySliderClick = this.handleEntrySliderClick;\n    const readValueFromComponent = this.readValueFromComponent;\n    const displayMultilineEditor = this.displayMultilineEditor;\n    const warningIconPopup = this.warningIconPopup;\n    const componentRef = this.componentRef;\n    const focusOnComponent = this.focusOnComponent;\n\n    const blackColor = \"black\";\n    const greyColor = \"grey\";\n    const primaryAccentColor = \"purple\";\n    const pinkColor = \"pink\";\n\n    const searchResultsRenderer = ({ title, record }) => {\n      return (\n        <Header\n          key={record}\n          size=\"tiny\"\n          content={title}\n          subheader={dataJSON.all_sections[\n            dataJSON.section_number[record]\n          ].toLowerCase()}\n        />\n      );\n    };\n\n    const searchFieldRenderer = () => {\n      return (\n        <Search\n          placeholder=\"Search tags\"\n          minCharacters={3}\n          loading={isLoading}\n          onResultSelect={this.focusTextInput}\n          onSearchChange={this.handleSearchChange}\n          resultRenderer={searchResultsRenderer}\n          results={results}\n          value={value}\n          {...this.props}\n        />\n      );\n    };\n\n    const modalWindowRenderer = (onOpen, icon, headercontent, modalcontent) => {\n      return (\n        <Modal\n          dimmer=\"inverted\"\n          open={onOpen}\n          closeOnEscape={closeOnEscape}\n          onClose={this.close}\n        >\n          <Header icon={icon} content={headercontent} />\n          <Modal.Content scrolling>\n            <Form>{modalcontent}</Form>\n          </Modal.Content>\n        </Modal>\n      );\n    };\n\n    const statusMessageBox = () => {\n      return (\n        <Message>\n          <p>\n            Loaded configuration for Squid ver.{\" \"}\n            <b>{dataJSON.squid_version[0]}</b>\n          </p>\n          <p>\n            <b>{dataJSON.tags.length}</b> unique tags in{\" \"}\n            <b>{dataJSON.all_sections.length}</b> sections\n          </p>\n          <p>{statusMessage}</p>\n        </Message>\n      );\n    };\n\n    function versionDropdownOptions() {\n      var options = [];\n      for (var i = 0; i < dataJSON.available_versions.length; i++) {\n        options.push({\n          key: i,\n          text: dataJSON.available_versions[i],\n          value: dataJSON.available_versions[i]\n        });\n      }\n      return options;\n    }\n\n    function createSections() {\n      var AccordionContent = [];\n      var n = 0;\n      var tagEntryKey = 0;\n      var helpKey = 1000;\n      var warningBuiltWithHover = \"\";\n      var warningMessageHover = \"\";\n      var tagComponentUnitLabel = \"\";\n      var AccordeonIconColors = [];\n\n      for (var i = 0; i < dataJSON.all_sections.length; i++) {\n        var SectionContentsPopup = [];\n        var TableContentInSection = [];\n\n        SectionContentsPopup[i] = \"\";\n\n        while (dataJSON.section_number[n] === i) {\n          if (dataJSON.is_enabled[n] > 0) {\n            AccordeonIconColors[i] = primaryAccentColor;\n          }\n\n          var tagRepresentationComponent = \"\";\n          SectionContentsPopup[i] += dataJSON.tags[n] + \"\\n\";\n\n          componentRef[n] = React.createRef();\n\n          if (!dataJSON.switchable[n]) {\n            if (dataJSON.units[n]) {\n              tagComponentUnitLabel = (\n                <Label basic content={dataJSON.units[n]} horizontal />\n              );\n            } else {\n              tagComponentUnitLabel = \"\";\n            }\n            // Regular tag\n            tagRepresentationComponent = (\n              <Form.Field>\n                <Input\n                  fluid\n                  ref={componentRef[n]}\n                  entrynumber={tagEntryKey}\n                  defaultValue={dataJSON.value[n] + \" \"}\n                  onChange={readValueFromComponent}\n                  labelPosition=\"right\"\n                  type=\"text\"\n                  action\n                >\n                  <input />\n                  {tagComponentUnitLabel}\n                  <Button\n                    basic\n                    type=\"reset\"\n                    entrynumber={tagEntryKey}\n                    onClick={focusOnComponent}\n                  >\n                    Reset\n                  </Button>\n                </Input>\n              </Form.Field>\n            );\n            // Tag with on/off selection\n          } else if (dataJSON.switchable[n] === 1) {\n            var options = [\n              {\n                key: \"off\",\n                text: dataJSON.tags[n] + \" off\",\n                value: dataJSON.tags[n] + \" off\"\n              },\n              {\n                key: \"on\",\n                text: dataJSON.tags[n] + \" on\",\n                value: dataJSON.tags[n] + \" on\"\n              }\n            ];\n\n            tagRepresentationComponent = (\n              <Dropdown\n                ref={componentRef[n]}\n                entrynumber={tagEntryKey}\n                fluid\n                selection\n                options={options}\n                defaultValue={options[dataJSON.switch_position[n]].value}\n                onChange={readValueFromComponent}\n              />\n            );\n          } else if (dataJSON.switchable[n] === 2) {\n            tagRepresentationComponent = (\n              <Button\n                ref={componentRef[n]}\n                secondary\n                compact\n                value={n}\n                onClick={displayMultilineEditor}\n              >\n                {dataJSON.tags[n]} - Click to edit\n              </Button>\n            );\n          }\n\n          if (dataJSON.message_built[n]) {\n            warningBuiltWithHover = warningIconPopup(\n              primaryAccentColor,\n              \"Only available if Squid is compiled with the \" +\n              dataJSON.message_built[n]\n            );\n          } else {\n            warningBuiltWithHover = \"\";\n          }\n\n          if (dataJSON.message_warning[n]) {\n            warningMessageHover = warningIconPopup(\n              pinkColor,\n              dataJSON.message_warning[n]\n            );\n          } else {\n            warningMessageHover = \"\";\n          }\n\n          var defaultRecordChecked = false;\n          if (dataJSON.is_enabled[n] > 0) {\n            defaultRecordChecked = true;\n          }\n          TableContentInSection[n] = (\n            <Table.Row key={\"tableKey\" + n} active={activeRowIndex === n}>\n              <Table.Cell width={1}>\n                <Checkbox\n                  value={tagEntryKey}\n                  id={\"checkboxEntry\" + tagEntryKey++}\n                  defaultChecked={defaultRecordChecked}\n                  slider\n                  onClick={handleEntrySliderClick}\n                />\n              </Table.Cell>\n              <Table.Cell>\n                <Form>{tagRepresentationComponent}</Form>\n              </Table.Cell>\n              <Table.Cell width={2}>\n                {warningBuiltWithHover}\n                {warningMessageHover}\n              </Table.Cell>\n              <Table.Cell width={1} allign=\"left\">\n                <Button\n                  value={helpKey++}\n                  compact\n                  basic\n                  color={greyColor}\n                  active={active}\n                  onClick={handleShowHelpClick}\n                >\n                  Help\n                </Button>\n              </Table.Cell>\n            </Table.Row>\n          );\n          n++;\n        }\n\n        AccordionContent[i] = (\n          <Container key={\"containerKey\" + i}>\n            <Accordion.Title\n              active={activeAccordeonIndex === i}\n              index={i}\n              onClick={handleClick}\n            >\n              <Popup\n                trigger={<Icon name=\"dropdown\" />}\n                size=\"tiny\"\n                position=\"left center\"\n                header=\"Tags in this section:\"\n                content={\n                  <Grid centered columns={1}>\n                    <Grid.Column textAlign=\"left\">\n                      <pre>{SectionContentsPopup[i]}</pre>\n                    </Grid.Column>\n                  </Grid>\n                }\n              />\n              <Icon name=\"tags\" color={AccordeonIconColors[i]} />\n              &nbsp;\n              {dataJSON.all_sections[i]}\n            </Accordion.Title>\n            <Accordion.Content active={activeAccordeonIndex === i}>\n              <Table striped compact basic=\"very\">\n                <Table.Body>{TableContentInSection}</Table.Body>\n              </Table>\n            </Accordion.Content>\n          </Container>\n        );\n      }\n      return AccordionContent;\n    }\n\n    function generateSquidConfiguration() {\n      var generatedSquidConfiguration = \"\";\n      for (var i = 0; i < dataJSON.section_number.length; i++) {\n        if (dataJSON.is_enabled[i])\n          generatedSquidConfiguration =\n            generatedSquidConfiguration + \"\\n\" + dataJSON.value[i];\n      }\n      return generatedSquidConfiguration;\n    }\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return (\n        <React.Fragment>\n          <Dimmer inverted active={!isLoaded}>\n            <Loader inverted size=\"massive\">\n              Loading\n            </Loader>\n          </Dimmer>\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <Segment>\n            <Menu fixed=\"top\" inverted fitted=\"vertically\" color={blackColor}>\n              <Container>\n                <Menu.Item as=\"a\" header onClick={this.handleOpen}>\n                  <Header as=\"h3\" inverted>\n                    <Icon\n                      inverted\n                      name=\"circle outline\"\n                      color={primaryAccentColor}\n                      size=\"big\"\n                    />\n                    <Header.Content>\n                      Sucker\n                      <Header.Subheader>\n                        Squid configuration editor\n                      </Header.Subheader>\n                    </Header.Content>\n                  </Header>\n                </Menu.Item>\n                <Menu.Item as=\"a\">{searchFieldRenderer()}</Menu.Item>\n                <Menu.Item>\n                  <Header as=\"h5\" inverted>\n                    Squid version{\" \"}\n                    <Dropdown\n                      options={versionDropdownOptions()}\n                      inline\n                      defaultValue={dataJSON.squid_version[0]}\n                      onChange={this.handleVersionDropdownClick}\n                    />\n                  </Header>\n                </Menu.Item>\n                <Menu.Item as=\"a\" onClick={this.handleConfigPreview}>\n                  <Header as=\"h5\" inverted>\n                    <Icon inverted name=\"magic\" size=\"large\" />\n                    Show\n                  </Header>\n                </Menu.Item>\n                <Menu.Item as=\"a\" onClick={this.handleImportWindow}>\n                  <Header as=\"h5\" inverted>\n                    <Icon inverted name=\"download\" size=\"large\" />\n                    Import\n                  </Header>\n                </Menu.Item>\n              </Container>\n            </Menu>\n          </Segment>\n          <Divider />\n          <Grid centered columns={3}>\n            <Grid.Column widescreen={5} computer={2}>\n              {statusMessageBox()}\n            </Grid.Column>\n            <Grid.Column widescreen={6} computer={7}>\n              <div ref={this.handleContextRef}>\n                <Container>\n                  <Accordion styled fluid>\n                    {createSections()}\n                  </Accordion>\n                </Container>\n              </div>\n            </Grid.Column>\n            <Grid.Column widescreen={5} computer={7}>\n              <Sticky context={contextRef} offset={75}>\n                <Segment basic size=\"small\">\n                  <Header\n                    content={dataJSON.tags[this.state.helpEntryId - 1000]}\n                  />\n                  <pre>{dataJSON.help[this.state.helpEntryId - 1000]}</pre>\n                </Segment>\n              </Sticky>\n            </Grid.Column>\n          </Grid>\n          {modalWindowRenderer(\n            openConfigPreview,\n            \"copy\",\n            \"New configuration\",\n            <React.Fragment>\n              <Form.Field>\n                <p>\n                  <b>To use:</b> copy configuration from the text area below and\n                  save it as squid.conf in the location of the original\n                  configuration file. By default, this file is located at{\" \"}\n                  <b>/etc/squid/squid.conf</b> or{\" \"}\n                  <b>/usr/local/squid/etc/squid.conf</b>.\n                </p>\n                <TextArea autoHeight value={generateSquidConfiguration()} />\n              </Form.Field>\n              <Button negative size=\"large\" onClick={this.close}>\n                close\n              </Button>\n            </React.Fragment>\n          )}\n          {modalWindowRenderer(\n            openMultilineEntryEditor,\n            \"edit\",\n            dataJSON.tags[this.multilineEntryId],\n            <React.Fragment>\n              <Form.Field>\n                <TextArea\n                  autoHeight\n                  defaultValue={dataJSON.value[this.multilineEntryId]}\n                  onChange={this.handleMultilineEdit}\n                />\n              </Form.Field>\n              <Button type=\"reset\" secondary>\n                Revert to default\n              </Button>\n              <Button secondary onClick={this.displayMultilineEditor}>\n                Save and close\n              </Button>\n            </React.Fragment>\n          )}\n          {modalWindowRenderer(\n            openImportWindow,\n            \"paste\",\n            \"Import existing configuration\",\n            <React.Fragment>\n              <p>\n                <b>To import:</b> copy and paste contents of <b>squid.conf</b>{\" \"}\n                into the window below. By default, this file is located at{\" \"}\n                <b>/etc/squid/squid.conf</b> or{\" \"}\n                <b>/usr/local/squid/etc/squid.conf</b>.\n              </p>\n              <p>\n                <b>Please note:</b> lines that begin with '#' (i.e. commented\n                out) are not going to be processed.\n              </p>\n              <Form.TextArea\n                control=\"textarea\"\n                onChange={this.readConfigurationToImport}\n              />\n              <Button secondary onClick={this.handleImportWindow}>\n                Close\n              </Button>\n              <Button\n                secondary\n                type=\"submit\"\n                method=\"post\"\n                onClick={this.importConfiguration}\n              >\n                Import\n              </Button>\n            </React.Fragment>\n          )}\n          <Dimmer\n            inverted\n            active={active}\n            onClickOutside={this.handleClose}\n            page\n          >\n            <Header as=\"h1\" icon color={primaryAccentColor}>\n              <Icon name=\"circle outline\" color={primaryAccentColor} />\n              Sucker\n              <Header.Subheader>{suckerVersionString}</Header.Subheader>\n            </Header>\n            <Header color={greyColor}>\n              <p>\n                configuration editor for{\" \"}\n                <a href=\"http://www.squid-cache.org/\">Squid</a> caching proxy\n              </p>\n              <p>\n                <Icon name=\"github\" />\n                Github:{\" \"}\n                <a href=\"https://github.com/itworks99/sucker\">\n                  itworks99/sucker\n                </a>\n              </p>\n              <p>Built with Bottle, Gunicorn, Python, React and Semantic-UI</p>\n              <p>\n                Created in Sydney with <Icon color=\"pink\" name=\"heart\" />\n              </p>\n            </Header>\n          </Dimmer>\n          {modalWindowRenderer(\n            openReloadConfirmation,\n            \"question\",\n            \"Confirm reload of the Squid base configuration file\",\n            <React.Fragment>\n              <p>\n                This action will reload base configuration file with the version\n                requested. Plese note that any unsaved changes are going to be\n                lost. Do you want to proceed?\n              </p>\n              <Button negative onClick={this.closeReloadConfirmationWindow}>\n                no\n              </Button>\n              <Button positive onClick={this.callLoadConfigurationFile}>\n                yes\n              </Button>\n            </React.Fragment>\n          )}\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Sucker;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport Sucker from './sucker.jsx';\nimport * as serviceWorker from './serviceWorker.js';\n\nReactDOM.render( < Sucker / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}