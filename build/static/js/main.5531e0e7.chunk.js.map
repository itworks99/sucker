{"version":3,"sources":["sucker.jsx","serviceWorker.js","index.js"],"names":["Sucker","React","Component","constructor","props","super","state","callLoadConfigurationFile","this","httpRequestMethod","loadConfigurationFile","importConfiguration","dataJSON","fetch","method","body","configurationToImport","headers","then","setState","isLoaded","response","json","importedDataJSON","importCompleted","message","messageList","counter","z","id","length","is_enabled","position","tags","value","switchable","switch_position","openImportWindow","statusMessage","closeConfigShow","closeOnEscape","closeOnDimmerClick","open","confirm","confirmClose","close","handleContextRef","contextRef","handleOpen","active","handleClose","handleEditorClose","openEditor","handleConfigPreview","handleHideClick","visible","resetComponent","isLoading","results","handleClick","_e","titleProps","index","newIndex","activeIndex","helpEntryId","handleHelpButtonClick","e","target","helpTextIsVisible","handleEntrySliderClick","handleVersionDropdownClick","version","openReloadConfirmation","readValueFromComponent","entrynumber","readConfigurationToImport","handleMultilineEdit","multilineEntryId","displayMultilineEditor","handleImportWindow","closeReloadConfirmationWindow","focusOnComponent","componentRef","current","focus","focusTextInput","_props","result","recordNumber","record","section_number","activeRowIndex","handleSearchChange","searchIterateOverArray","i","source","_","times","title","setTimeout","re","RegExp","escapeRegExp","filter","test","bind","AccordeonIconColors","componentDidMount","error","Accept","JSON","stringify","warningIconPopup","color","content","Popup","trigger","Icon","name","render","activeAccordeonIndex","openMultilineEntryEditor","openConfigPreview","handleShowHelpClick","searchResultsRenderer","Header","key","size","subheader","all_sections","toLowerCase","searchFieldRenderer","Search","placeholder","minCharacters","loading","onResultSelect","onSearchChange","resultRenderer","modalWindowRenderer","onOpen","icon","headercontent","modalcontent","Modal","dimmer","onClose","Content","scrolling","Form","Fragment","Segment","Menu","fixed","inverted","fitted","Container","Item","as","header","onClick","Subheader","Dropdown","options","available_versions","push","text","versionDropdownOptions","inline","defaultValue","squid_version","onChange","Divider","Grid","centered","columns","Column","widescreen","computer","Message","ref","Accordion","styled","fluid","AccordionContent","n","tagEntryKey","helpKey","warningBuiltWithHover","warningMessageHover","tagComponentUnitLabel","SectionContentsPopup","TableContentInSection","tagRepresentationComponent","createRef","selection","Button","secondary","compact","units","Label","basic","horizontal","Field","Input","labelPosition","type","action","message_built","message_warning","defaultRecordChecked","Table","Row","Cell","width","Checkbox","defaultChecked","slider","allign","Title","textAlign","striped","Body","createSections","Sticky","context","offset","help","TextArea","autoHeight","generatedSquidConfiguration","generateSquidConfiguration","negative","control","Dimmer","onClickOutside","page","href","positive","Loader","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4ZA8BA,MAAMA,UAAeC,IAAMC,UAGzBC,YAAYC,GACVC,MAAMD,GADW,KAFnBE,MAAQ,GAEW,KA2CnBC,0BAA4B,KAC1BC,KAAKC,kBAAoB,UACzBD,KAAKE,yBA7CY,KAyGnBC,oBAAsB,KAAO,MACnBC,EAAaJ,KAAKF,MAAlBM,SACRC,MAAM,+BAAgC,CACpCC,OAAQ,OACRC,KAAMP,KAAKQ,sBACXC,QAAS,CACP,8BAA+B,wBAC/B,+BACE,yCACF,+BACE,4CAGHC,KAAKV,KAAKW,SAAS,CAAEC,UAAU,KAC/BF,KAAMG,GAAaA,EAASC,QAC5BJ,KAAMI,IACLd,KAAKW,SAAS,CACZI,iBAAkBD,EAClBE,iBAAiB,IAKnB,IAHA,IAAIC,EACAC,EAAc,GACdC,EAAU,EACLC,EAAI,EAAGA,EAAIN,EAAKO,GAAGC,OAAQF,IAClChB,EAASmB,WAAWH,GAAK,EAE3B,IAAKA,EAAI,EAAGA,EAAIN,EAAKO,GAAGC,OAAQF,IAAK,CACnC,IAAII,EAAWV,EAAKO,GAAGD,GACJ,MAAfN,EAAKO,GAAGD,GACVF,EAAcA,EAAc,IAAMJ,EAAKW,KAAKL,GAAK,KAEjDhB,EAASmB,WAAWC,GAAY,EAChCpB,EAASsB,MAAMF,GAAYV,EAAKY,MAAMN,GACtChB,EAASuB,WAAWH,GAAYV,EAAKa,WAAWP,GAChDhB,EAASwB,gBAAgBJ,GAAYV,EAAKc,gBAAgBR,GAC1DD,KAGgB,KAAhBD,IACFA,EACE,wFACAA,GAEJD,EACE,qBACAH,EAAKO,GAAGC,OACR,uBACAH,EACA,eACAD,EACFlB,KAAKW,SAAS,CACZkB,kBAAkB,EAClBC,cAAeb,EACfL,UAAU,OA9JC,KAmKnBmB,gBAAkB,CAACC,EAAeC,IAAuB,KACvDjC,KAAKW,SAAS,CAAEqB,gBAAeC,qBAAoBC,MAAM,KApKxC,KAuKnBC,QAAU,IAAMnC,KAAKW,SAAS,CAAEwB,SAAS,IAvKtB,KAwKnBC,aAAe,IAAMpC,KAAKW,SAAS,CAAEwB,SAAS,IAxK3B,KAyKnBD,KAAO,IAAMlC,KAAKW,SAAS,CAAEuB,MAAM,IAzKhB,KA0KnBG,MAAQ,IAAMrC,KAAKW,SAAS,CAAEuB,MAAM,IA1KjB,KA4KnBI,iBAAoBC,GAAevC,KAAKW,SAAS,CAAE4B,eA5KhC,KA8KnBC,WAAa,IAAMxC,KAAKW,SAAS,CAAE8B,QAAQ,IA9KxB,KA+KnBC,YAAc,IAAM1C,KAAKW,SAAS,CAAE8B,QAAQ,IA/KzB,KAiLnBE,kBAAoB,IAAM3C,KAAKW,SAAS,CAAEiC,YAAY,IAjLnC,KAkLnBC,oBAAsB,IAAM7C,KAAKW,SAAS,CAAEuB,MAAM,IAlL/B,KAmLnBY,gBAAkB,IAAM9C,KAAKW,SAAS,CAAEoC,SAAS,IAnL9B,KAqLnBC,eAAiB,IACfhD,KAAKW,SAAS,CAAEsC,WAAW,EAAOC,QAAS,GAAIxB,MAAO,KAtLrC,KAwLnByB,YAAc,CAACC,EAAIC,KAAgB,MACzBC,EAAUD,EAAVC,MAEFC,EADkBvD,KAAKF,MAArB0D,cACyBF,GAAS,EAAIA,EAC9CtD,KAAKW,SAAS,CAAE6C,YAAaD,IAC7BvD,KAAKW,SAAS,CAAE8C,YAAa,KA7LZ,KAgMnBC,sBAAyBC,IACvB3D,KAAKW,SAAS,CAAE8C,YAAaE,EAAEC,OAAOlC,QACtC1B,KAAKW,SAAS,CAAEkD,mBAAmB,KAlMlB,KAqMnBC,uBAA0BH,IAAO,MACvBvD,EAAaJ,KAAKF,MAAlBM,SACRA,EAASmB,WAAWoC,EAAEC,OAAOlC,QAAUtB,EAASmB,WAAWoC,EAAEC,OAAOlC,QAvMnD,KA0MnBqC,2BAA6B,CAACX,GAAM1B,YAClC1B,KAAKgE,QAAUtC,EACf1B,KAAKW,SAAS,CAAEsD,wBAAwB,KA5MvB,KA+MnBC,uBAAyB,CAACd,GAAMe,cAAazC,YACtB1B,KAAKF,MAAlBM,SACCsB,MAAMyC,GAAezC,GAjNb,KAoNnB0C,0BAA6BT,IAC3B3D,KAAKQ,sBAAwBmD,EAAEC,OAAOlC,OArNrB,KAwNnB2C,oBAAuBV,IACA3D,KAAKF,MAAlBM,SACCsB,MAAM1B,KAAKsE,kBAAoBX,EAAEC,OAAOlC,OA1NhC,KA6NnB6C,uBAAyB,CAACnB,GAAM1B,YAC9B1B,KAAKsE,iBAAmB5C,EACxB1B,KAAKW,SAAUf,IAAD,CAAcgD,YAAahD,EAAMgD,eA/N9B,KAkOnB4B,mBAAqB,KACnBxE,KAAKW,SAAS,CAAEkB,kBAAmB7B,KAAKF,MAAM+B,oBAnO7B,KAsOnB4C,8BAAgC,IAC9BzE,KAAKW,SAAS,CAAEsD,wBAAwB,IAvOvB,KAyOnBS,iBAAmB,CAACtB,GAAMe,kBACRnE,KAAK2E,aAAaR,GACxBS,QAAQC,SA3OD,KA8OnBC,eAAiB,CAACC,GAAUC,aAAc,MAChC5E,EAAaJ,KAAKF,MAAlBM,SACR,IAAI6E,EAAeD,EAAOE,OAE1BlF,KAAKW,SAAS,MACZ6C,YAAapD,EAAS+E,eAAeF,MAEvCjF,KAAKW,SAAS,MAASyE,eAAgBH,KACG,IAAtC7E,EAASuB,WAAWsD,IACVjF,KAAK2E,aAAaM,GACpBL,QAAQC,SAxPH,KAsQnBQ,mBAAqB,CAACjC,GAAM1B,YAC1B,SAAS4D,IACP,IAAIC,EAAI,EACR,OAAYA,EAAI,EAHoB,MAK9BnF,EAAaJ,KAAKF,MAAlBM,SACFoF,EAASC,IAAEC,MACftF,EAASqB,KAAKH,OACd,CAACiE,EAAID,KAAL,CACEK,MAAO3F,KAAKF,MAAMM,SAASqB,KAAK8D,GAChCL,OAAQK,KAIZvF,KAAKW,SAAS,CAAEsC,WAAW,EAAMvB,UACjCkE,WAAW,KACT,GAAI5F,KAAKF,MAAM4B,MAAMJ,OAAS,EAAG,OAAOtB,KAAKgD,iBAC7C,MAAM6C,EAAK,IAAIC,OAAOL,IAAEM,aAAa/F,KAAKF,MAAM4B,OAAQ,KAExD1B,KAAKW,SAAS,CACZsC,WAAW,EACXC,QAASuC,IAAEO,OAAOR,EAHHR,GAAWa,EAAGI,KAAKjB,EAAOW,WAK1C,MA3RH3F,KAAKF,MAAQ,CAAE4B,MAAO,IACtB1B,KAAKF,MAAQ,CAAE0D,YAAa,GAC5BxD,KAAKF,MAAQ,CAAEsF,eAAgB,GAC/BpF,KAAKF,MAAQ,CAAEiD,SAAS,GACxB/C,KAAKF,MAAQ,CAAE2D,YAAa,GAC5BzD,KAAKF,MAAQ,CAAEqC,SAAS,GACxBnC,KAAKF,MAAQ,CAAE8C,YAAY,GAC3B5C,KAAKF,MAAQ,CAAE+B,kBAAkB,GACjC7B,KAAKF,MAAQ,CAAEM,SAAU,IACzBJ,KAAKF,MAAQ,CAAEc,UAAU,GACzBZ,KAAKF,MAAQ,CAAEU,sBAAuB,IACtCR,KAAKF,MAAQ,CAAEgC,cAAe,IAC9B9B,KAAKF,MAAQ,CAAEkE,QAAS,IACxBhE,KAAKF,MAAQ,CAAEmE,wBAAwB,GACvCjE,KAAKF,MAAQ,CAAEG,kBAAmB,IAClCD,KAAKF,MAAQ,CAAEkC,eAAe,GAC9BhC,KAAKF,MAAQ,CAAEmC,oBAAoB,GAEnCjC,KAAK2E,aAAe,GAEpB3E,KAAKmD,YAAcnD,KAAKmD,YAAY+C,KAAKlG,MACzCA,KAAK6C,oBAAsB7C,KAAK6C,oBAAoBqD,KAAKlG,MACzDA,KAAKqE,oBAAsBrE,KAAKqE,oBAAoB6B,KAAKlG,MACzDA,KAAK0D,sBAAwB1D,KAAK0D,sBAAsBwC,KAAKlG,MAC7DA,KAAK8D,uBAAyB9D,KAAK8D,uBAAuBoC,KAAKlG,MAC/DA,KAAKkE,uBAAyBlE,KAAKkE,uBAAuBgC,KAAKlG,MAC/DA,KAAKuE,uBAAyBvE,KAAKuE,uBAAuB2B,KAAKlG,MAC/DA,KAAKwE,mBAAqBxE,KAAKwE,mBAAmB0B,KAAKlG,MACvDA,KAAKoE,0BAA4BpE,KAAKoE,0BAA0B8B,KAAKlG,MACrEA,KAAKG,oBAAsBH,KAAKG,oBAAoB+F,KAAKlG,MACzDA,KAAK0E,iBAAmB1E,KAAK0E,iBAAiBwB,KAAKlG,MACnDA,KAAKmG,oBAAsB,GAC3BnG,KAAKE,sBAAwBF,KAAKE,sBAAsBgG,KAAKlG,MAC7DA,KAAKD,0BAA4BC,KAAKD,0BAA0BmG,KAAKlG,MAGvEoG,oBACEpG,KAAKC,kBAAoB,MACzBD,KAAKE,wBAQPA,wBACEF,KAAKW,SAAS,CAAEC,UAAU,IACK,QAA3BZ,KAAKC,kBACPI,MAAM,6BAA8B,CAClCC,OAAQN,KAAKC,oBAEZS,KAAMG,GAAaA,EAASC,QAC5BJ,KACEI,IACCd,KAAKW,SAAS,CACZP,SAAUU,EACVF,UAAU,KAGbyF,IACCrG,KAAKW,SAAS,CACZC,UAAU,EACVyF,aAKRhG,MAAM,gCAAiC,CACrCC,OAAQN,KAAKC,kBACbQ,QAAS,CACP6F,OAAQ,mBACR,eAAgB,mBAChB,8BAA+B,IAC/B,+BACE,yCACF,iCACE,iJAEJ/F,KAAMgG,KAAKC,UAAU,CACnBxC,QAAShE,KAAKgE,YAGftD,KAAMG,GAAaA,EAASC,QAC5BJ,KACEI,IACCd,KAAKW,SAAS,CACZP,SAAUU,EACVF,UAAU,KAGbyF,IACCrG,KAAKW,SAAS,CACZC,UAAU,EACVyF,YAIRrG,KAAKW,SAAS,CAAEsD,wBAAwB,KAwJ5CwC,iBAAiBC,EAAOC,GAOtB,OALE,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAMJ,MAAOA,EAAOK,KAAK,iBAClCJ,QAASA,IAgCfK,SAAU,MAAD,EAkBHhH,KAAKF,MAhBMmH,EAFR,EAELzD,YACA4B,EAHK,EAGLA,eACA3C,EAJK,EAILA,OACYyE,EALP,EAKLtE,WACMuE,EAND,EAMLjF,KACAL,EAPK,EAOLA,iBACAG,EARK,EAQLA,cACA5B,EATK,EASLA,SACAQ,EAVK,EAULA,SACAyF,EAXK,EAWLA,MACA9D,EAZK,EAYLA,WACAU,EAbK,EAaLA,UACAvB,EAdK,EAcLA,MACAwB,EAfK,EAeLA,QACApB,EAhBK,EAgBLA,cACAmC,EAjBK,EAiBLA,uBAEId,EAAcnD,KAAKmD,YACnBiE,EAAsBpH,KAAK0D,sBAC3BI,EAAyB9D,KAAK8D,uBAC9BI,EAAyBlE,KAAKkE,uBAC9BK,EAAyBvE,KAAKuE,uBAC9BkC,EAAmBzG,KAAKyG,iBACxB9B,EAAe3E,KAAK2E,aACpBD,EAAmB1E,KAAK0E,iBAOxB2C,EAAwB,EAAG1B,QAAOT,YAEpC,kBAACoC,EAAA,EAAD,CACEC,IAAKrC,EACLsC,KAAK,OACLb,QAAShB,EACT8B,UAAWrH,EAASsH,aAClBtH,EAAS+E,eAAeD,IACxByC,gBAKFC,EAAsB,IAExB,kBAACC,EAAA,EAAD,eACEC,YAAY,cACZC,cAAe,EACfC,QAAS/E,EACTgF,eAAgBjI,KAAK8E,eACrBoD,eAAgBlI,KAAKqF,mBACrB8C,eAAgBd,EAChBnE,QAASA,EACTxB,MAAOA,GACH1B,KAAKJ,QAKTwI,EAAsB,CAACC,EAAQC,EAAMC,EAAeC,IAEtD,kBAACC,EAAA,EAAD,CACEC,OAAO,WACPxG,KAAMmG,EACNrG,cAAeA,EACf2G,QAAS3I,KAAKqC,OAEd,kBAACiF,EAAA,EAAD,CAAQgB,KAAMA,EAAM3B,QAAS4B,IAC7B,kBAACE,EAAA,EAAMG,QAAP,CAAeC,WAAS,GACtB,kBAACC,EAAA,EAAD,KAAON,KA6Of,OAAInC,EACK,uCAAaA,EAAMpF,SAChBL,EAYR,kBAAC,IAAMmI,SAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,MAAM,MAAMC,UAAQ,EAACC,OAAO,aAAa1C,MAzSpC,SA0ST,kBAAC2C,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAKK,KAAN,CAAWC,GAAG,IAAIC,QAAM,EAACC,QAASzJ,KAAKwC,YACrC,kBAAC8E,EAAA,EAAD,CAAQiC,GAAG,KAAKJ,UAAQ,GACtB,kBAACrC,EAAA,EAAD,CACEqC,UAAQ,EACRpC,KAAK,iBACLL,MA9SS,SA+STc,KAAK,QAEP,kBAACF,EAAA,EAAOsB,QAAR,cAEE,kBAACtB,EAAA,EAAOoC,UAAR,sCAMN,kBAACT,EAAA,EAAKK,KAAN,CAAWC,GAAG,KAAK3B,KACnB,kBAACqB,EAAA,EAAKK,KAAN,KACE,kBAAChC,EAAA,EAAD,CAAQiC,GAAG,KAAKJ,UAAQ,GAAxB,gBACgB,IACd,kBAACQ,EAAA,EAAD,CACEC,QA9PlB,WAEE,IADA,IAAIA,EAAU,GACLrE,EAAI,EAAGA,EAAInF,EAASyJ,mBAAmBvI,OAAQiE,IACtDqE,EAAQE,KAAK,CACXvC,IAAKhC,EACLwE,KAAM3J,EAASyJ,mBAAmBtE,GAClC7D,MAAOtB,EAASyJ,mBAAmBtE,KAGvC,OAAOqE,EAqPkBI,GACTC,QAAM,EACNC,aAAc9J,EAAS+J,cAAc,GACrCC,SAAUpK,KAAK+D,+BAIrB,kBAACkF,EAAA,EAAKK,KAAN,CAAWC,GAAG,IAAIE,QAASzJ,KAAK6C,qBAC9B,kBAACyE,EAAA,EAAD,CAAQiC,GAAG,KAAKJ,UAAQ,GACtB,kBAACrC,EAAA,EAAD,CAAMqC,UAAQ,EAACpC,KAAK,QAAQS,KAAK,UADnC,SAKF,kBAACyB,EAAA,EAAKK,KAAN,CAAWC,GAAG,IAAIE,QAASzJ,KAAKwE,oBAC9B,kBAAC8C,EAAA,EAAD,CAAQiC,GAAG,KAAKJ,UAAQ,GACtB,kBAACrC,EAAA,EAAD,CAAMqC,UAAQ,EAACpC,KAAK,WAAWS,KAAK,UADtC,cAQR,kBAAC6C,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMC,UAAQ,EAACC,QAAS,GACtB,kBAACF,EAAA,EAAKG,OAAN,CAAaC,WAAY,EAAGC,SAAU,GApS1C,kBAACC,EAAA,EAAD,KACE,iEACsC,IACpC,2BAAIxK,EAAS+J,cAAc,KAE7B,2BACE,2BAAI/J,EAASqB,KAAKH,QADpB,kBAC+C,IAC7C,2BAAIlB,EAASsH,aAAapG,QAF5B,aAIA,2BAAIQ,KA8RF,kBAACwI,EAAA,EAAKG,OAAN,CAAaC,WAAY,EAAGC,SAAU,GACpC,yBAAKE,IAAK7K,KAAKsC,kBACb,kBAAC+G,EAAA,EAAD,KACE,kBAACyB,EAAA,EAAD,CAAWC,QAAM,EAACC,OAAK,GAhRrC,WAUE,IATA,IAAIC,EAAmB,GACnBC,EAAI,EACJC,EAAc,EACdC,EAAU,IACVC,EAAwB,GACxBC,EAAsB,GACtBC,EAAwB,GACxBpF,EAAsB,GAEjBZ,EAAI,EAAGA,EAAInF,EAASsH,aAAapG,OAAQiE,IAAK,CACrD,IAAIiG,EAAuB,GACvBC,EAAwB,GAI5B,IAFAD,EAAqBjG,GAAK,GAEnBnF,EAAS+E,eAAe+F,KAAO3F,GAAG,CACnCnF,EAASmB,WAAW2J,GAAK,IAC3B/E,EAAoBZ,GA9FD,UAiGrB,IAAImG,EAA6B,GAKjC,GAJAF,EAAqBjG,IAAMnF,EAASqB,KAAKyJ,GAAK,KAE9CvG,EAAauG,GAAKzL,IAAMkM,YAEnBvL,EAASuB,WAAWuJ,GAmClB,GAA+B,IAA3B9K,EAASuB,WAAWuJ,GAAU,CACvC,IAAItB,EAAU,CACZ,CACErC,IAAK,MACLwC,KAAM3J,EAASqB,KAAKyJ,GAAK,OACzBxJ,MAAOtB,EAASqB,KAAKyJ,GAAK,QAE5B,CACE3D,IAAK,KACLwC,KAAM3J,EAASqB,KAAKyJ,GAAK,MACzBxJ,MAAOtB,EAASqB,KAAKyJ,GAAK,QAI9BQ,EACE,kBAAC/B,EAAA,EAAD,CACEkB,IAAKlG,EAAauG,GAClB/G,YAAagH,EACbH,OAAK,EACLY,WAAS,EACThC,QAASA,EACTM,aAAcN,EAAQxJ,EAASwB,gBAAgBsJ,IAAIxJ,MACnD0I,SAAUlG,SAGsB,IAA3B9D,EAASuB,WAAWuJ,KAC7BQ,EACE,kBAACG,EAAA,EAAD,CACEhB,IAAKlG,EAAauG,GAClBY,WAAS,EACTC,SAAO,EACPrK,MAAOwJ,EACPzB,QAASlF,GAERnE,EAASqB,KAAKyJ,GAPjB,0BA5DAK,EADEnL,EAAS4L,MAAMd,GAEf,kBAACe,EAAA,EAAD,CAAOC,OAAK,EAACvF,QAASvG,EAAS4L,MAAMd,GAAIiB,YAAU,IAG7B,GAG1BT,EACE,kBAAC5C,EAAA,EAAKsD,MAAN,KACE,kBAACC,EAAA,EAAD,CACErB,OAAK,EACLH,IAAKlG,EAAauG,GAClB/G,YAAagH,EACbjB,aAAc9J,EAASsB,MAAMwJ,GAAK,IAClCd,SAAUlG,EACVoI,cAAc,QACdC,KAAK,OACLC,QAAM,GAEN,gCACCjB,EACD,kBAACM,EAAA,EAAD,CACEK,OAAK,EACLK,KAAK,QACLpI,YAAagH,EACb1B,QAAS/E,GAJX,WAoDN2G,EADEjL,EAASqM,cAAcvB,GACDzE,EAjLL,SAmLjB,gDACErG,EAASqM,cAAcvB,IAGH,GAIxBI,EADElL,EAASsM,gBAAgBxB,GACLzE,EA1LZ,OA4LRrG,EAASsM,gBAAgBxB,IAGL,GAGxB,IAAIyB,GAAuB,EACvBvM,EAASmB,WAAW2J,GAAK,IAC3ByB,GAAuB,GAEzBlB,EAAsBP,GACpB,kBAAC0B,EAAA,EAAMC,IAAP,CAAWtF,IAAK,WAAa2D,EAAGzI,OAAQ2C,IAAmB8F,GACzD,kBAAC0B,EAAA,EAAME,KAAP,CAAYC,MAAO,GACjB,kBAACC,EAAA,EAAD,CACEtL,MAAOyJ,EACP9J,GAAI,gBAAkB8J,IACtB8B,eAAgBN,EAChBO,QAAM,EACNzD,QAAS3F,KAGb,kBAAC8I,EAAA,EAAME,KAAP,KACE,kBAAChE,EAAA,EAAD,KAAO4C,IAET,kBAACkB,EAAA,EAAME,KAAP,CAAYC,MAAO,GAChB1B,EACAC,GAEH,kBAACsB,EAAA,EAAME,KAAP,CAAYC,MAAO,EAAGI,OAAO,QAC3B,kBAACtB,EAAA,EAAD,CACEnK,MAAO0J,IACPW,SAAO,EACPG,OAAK,EACLxF,MA/NI,OAgOJjE,OAAQA,EACRgH,QAASrC,GANX,UAaN8D,IAGFD,EAAiB1F,GACf,kBAAC8D,EAAA,EAAD,CAAW9B,IAAK,eAAiBhC,GAC/B,kBAACuF,EAAA,EAAUsC,MAAX,CACE3K,OAAQwE,IAAyB1B,EACjCjC,MAAOiC,EACPkE,QAAStG,GAET,kBAACyD,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAMC,KAAK,aACpBS,KAAK,OACLhG,SAAS,cACTgI,OAAO,wBACP7C,QACE,kBAAC2D,EAAA,EAAD,CAAMC,UAAQ,EAACC,QAAS,GACtB,kBAACF,EAAA,EAAKG,OAAN,CAAa4C,UAAU,QACrB,6BAAM7B,EAAqBjG,QAKnC,kBAACuB,EAAA,EAAD,CAAMC,KAAK,OAAOL,MAAOP,EAAoBZ,KAlB/C,OAoBGnF,EAASsH,aAAanC,IAEzB,kBAACuF,EAAA,EAAUlC,QAAX,CAAmBnG,OAAQwE,IAAyB1B,GAClD,kBAACqH,EAAA,EAAD,CAAOU,SAAO,EAACvB,SAAO,EAACG,MAAM,QAC3B,kBAACU,EAAA,EAAMW,KAAP,KAAa9B,MAMvB,OAAOR,EAmFQuC,OAKT,kBAAClD,EAAA,EAAKG,OAAN,CAAaC,WAAY,EAAGC,SAAU,GACpC,kBAAC8C,EAAA,EAAD,CAAQC,QAASnL,EAAYoL,OAAQ,IACnC,kBAAC3E,EAAA,EAAD,CAASkD,OAAK,EAAC1E,KAAK,SAClB,kBAACF,EAAA,EAAD,CACEX,QAASvG,EAASqB,KAAKzB,KAAKF,MAAM2D,YAAc,OAElD,6BAAMrD,EAASwN,KAAK5N,KAAKF,MAAM2D,YAAc,UAKpD2E,EACCjB,EACA,OACA,oBACA,kBAAC,IAAM4B,SAAP,KACE,kBAACD,EAAA,EAAKsD,MAAN,KACE,2BACE,sCADF,iKAG0D,IACxD,oDAJF,MAIkC,IAChC,8DALF,KAOA,kBAACyB,EAAA,EAAD,CAAUC,YAAU,EAACpM,MA7GjC,WAEE,IADA,IAAIqM,EAA8B,GACzBxI,EAAI,EAAGA,EAAInF,EAAS+E,eAAe7D,OAAQiE,IAC9CnF,EAASmB,WAAWgE,KACtBwI,EACEA,EAA8B,KAAO3N,EAASsB,MAAM6D,IAE1D,OAAOwI,EAsG+BC,MAE9B,kBAACnC,EAAA,EAAD,CAAQoC,UAAQ,EAACzG,KAAK,QAAQiC,QAASzJ,KAAKqC,OAA5C,WAKH+F,EACClB,EACA,OACA9G,EAASqB,KAAKzB,KAAKsE,kBACnB,kBAAC,IAAMyE,SAAP,KACE,kBAACD,EAAA,EAAKsD,MAAN,KACE,kBAACyB,EAAA,EAAD,CACEC,YAAU,EACV5D,aAAc9J,EAASsB,MAAM1B,KAAKsE,kBAClC8F,SAAUpK,KAAKqE,uBAGnB,kBAACwH,EAAA,EAAD,CAAQU,KAAK,QAAQT,WAAS,GAA9B,qBAGA,kBAACD,EAAA,EAAD,CAAQC,WAAS,EAACrC,QAASzJ,KAAKuE,wBAAhC,oBAKH6D,EACCvG,EACA,QACA,gCACA,kBAAC,IAAMkH,SAAP,KACE,2BACE,yCADF,+BAC+C,yCAAkB,IADjE,6DAE6D,IAC3D,oDAHF,MAGkC,IAChC,8DAJF,KAMA,2BACE,2CADF,kFAIA,kBAACD,EAAA,EAAK+E,SAAN,CACEK,QAAQ,WACR9D,SAAUpK,KAAKoE,4BAEjB,kBAACyH,EAAA,EAAD,CAAQC,WAAS,EAACrC,QAASzJ,KAAKwE,oBAAhC,SAGA,kBAACqH,EAAA,EAAD,CACEC,WAAS,EACTS,KAAK,SACLjM,OAAO,OACPmJ,QAASzJ,KAAKG,qBAJhB,YAUJ,kBAACgO,EAAA,EAAD,CACEhF,UAAQ,EACR1G,OAAQA,EACR2L,eAAgBpO,KAAK0C,YACrB2L,MAAI,GAEJ,kBAAC/G,EAAA,EAAD,CAAQiC,GAAG,KAAKjB,MAAI,EAAC5B,MA3bF,UA4bjB,kBAACI,EAAA,EAAD,CAAMC,KAAK,iBAAiBL,MA5bX,WA2bnB,SAGE,kBAACY,EAAA,EAAOoC,UAAR,KAjwBc,aAmwBhB,kBAACpC,EAAA,EAAD,CAAQZ,MAjcE,QAkcR,sDAC2B,IACzB,uBAAG4H,KAAK,+BAAR,SAFF,kBAIA,2BACE,kBAACxH,EAAA,EAAD,CAAMC,KAAK,WADb,UAEU,IACR,uBAAGuH,KAAK,uCAAR,qBAIF,yFACA,qDACyB,kBAACxH,EAAA,EAAD,CAAMJ,MAAM,OAAOK,KAAK,aAIpDqB,EACCnE,EACA,WACA,sDACA,kBAAC,IAAM8E,SAAP,KACE,4LAKA,kBAAC8C,EAAA,EAAD,CAAQoC,UAAQ,EAACxE,QAASzJ,KAAKyE,+BAA/B,MAGA,kBAACoH,EAAA,EAAD,CAAQ0C,UAAQ,EAAC9E,QAASzJ,KAAKD,2BAA/B,UApMN,kBAAC,IAAMgJ,SAAP,KACE,kBAACoF,EAAA,EAAD,CAAQhF,UAAQ,EAAC1G,QAAS7B,GACxB,kBAAC4N,EAAA,EAAD,CAAQrF,UAAQ,EAAC3B,KAAK,WAAtB,cA6MGhI,QC7zBKiP,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS9H,OAAQ,kBAAE,EAAF,MAAe+H,SAASC,eAAe,SD2HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzO,MAAK,SAAA0O,GACjCA,EAAaC,kB","file":"static/js/main.5531e0e7.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport React from \"react\";\nimport {\n  Accordion,\n  Button,\n  Checkbox,\n  Container,\n  Dimmer,\n  Divider,\n  Dropdown,\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Input,\n  Label,\n  Loader,\n  Menu,\n  Message,\n  Modal,\n  Popup,\n  Search,\n  Segment,\n  Sticky,\n  Table,\n  TextArea,\n} from \"semantic-ui-react\";\n\nconst suckerVersionString = \"ver.0.2a\";\n\nclass Sucker extends React.Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n    this.state = { activeIndex: 0 };\n    this.state = { activeRowIndex: 0 };\n    this.state = { visible: false };\n    this.state = { helpEntryId: 0 };\n    this.state = { confirm: false };\n    this.state = { openEditor: false };\n    this.state = { openImportWindow: false };\n    this.state = { dataJSON: \"\" };\n    this.state = { isLoaded: false };\n    this.state = { configurationToImport: \"\" };\n    this.state = { statusMessage: \"\" };\n    this.state = { version: \"\" };\n    this.state = { openReloadConfirmation: false };\n    this.state = { httpRequestMethod: \"\" };\n    this.state = { closeOnEscape: false };\n    this.state = { closeOnDimmerClick: false };\n\n    this.componentRef = [];\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleConfigPreview = this.handleConfigPreview.bind(this);\n    this.handleMultilineEdit = this.handleMultilineEdit.bind(this);\n    this.handleHelpButtonClick = this.handleHelpButtonClick.bind(this);\n    this.handleEntrySliderClick = this.handleEntrySliderClick.bind(this);\n    this.readValueFromComponent = this.readValueFromComponent.bind(this);\n    this.displayMultilineEditor = this.displayMultilineEditor.bind(this);\n    this.handleImportWindow = this.handleImportWindow.bind(this);\n    this.readConfigurationToImport = this.readConfigurationToImport.bind(this);\n    this.importConfiguration = this.importConfiguration.bind(this);\n    this.focusOnComponent = this.focusOnComponent.bind(this);\n    this.AccordeonIconColors = {};\n    this.loadConfigurationFile = this.loadConfigurationFile.bind(this);\n    this.callLoadConfigurationFile = this.callLoadConfigurationFile.bind(this);\n  }\n\n  componentDidMount() {\n    this.httpRequestMethod = \"GET\";\n    this.loadConfigurationFile();\n  }\n\n  callLoadConfigurationFile = () => {\n    this.httpRequestMethod = \"OPTIONS\";\n    this.loadConfigurationFile();\n  };\n\n  loadConfigurationFile() {\n    this.setState({ isLoaded: false });\n    if (this.httpRequestMethod === \"GET\") {\n      fetch(\"http://localhost:3000/json\", {\n        method: this.httpRequestMethod,\n      })\n        .then((response) => response.json())\n        .then(\n          (json) => {\n            this.setState({\n              dataJSON: json,\n              isLoaded: true,\n            });\n          },\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error,\n            });\n          }\n        );\n    } else {\n      fetch(\"http://localhost:3000/version\", {\n        method: this.httpRequestMethod,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\":\n            \"GET, POST, OPTIONS, PUT, PATCH, DELETE\",\n          \"Access-Control-Request-Headers\":\n            \"X-Requested-With, Content-Type, Accept, access-control-allow-headers, X-CSRF-Token, access-control-allow-methods, access-control-allow-origin\",\n        },\n        body: JSON.stringify({\n          version: this.version,\n        }),\n      })\n        .then((response) => response.json())\n        .then(\n          (json) => {\n            this.setState({\n              dataJSON: json,\n              isLoaded: true,\n            });\n          },\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error,\n            });\n          }\n        );\n      this.setState({ openReloadConfirmation: false });\n    }\n    return;\n  }\n\n  importConfiguration = () => {\n    const { dataJSON } = this.state;\n    fetch(\"http://localhost:3000/import\", {\n      method: \"POST\",\n      body: this.configurationToImport,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n        \"Access-Control-Allow-Methods\":\n          \"GET, POST, OPTIONS, PUT, PATCH, DELETE\",\n        \"Access-Control-Allow-Headers\":\n          \"X-Requested-With, Content-Type, Accept\",\n      },\n    })\n      .then(this.setState({ isLoaded: false }))\n      .then((response) => response.json())\n      .then((json) => {\n        this.setState({\n          importedDataJSON: json,\n          importCompleted: true,\n        });\n        var message = \"\";\n        var messageList = \"\";\n        var counter = 0;\n        for (var z = 0; z < json.id.length; z++) {\n          dataJSON.is_enabled[z] = 0;\n        }\n        for (z = 0; z < json.id.length; z++) {\n          var position = json.id[z];\n          if (json.id[z] === 999) {\n            messageList = messageList + \" \" + json.tags[z] + \";\";\n          } else {\n            dataJSON.is_enabled[position] = 1;\n            dataJSON.value[position] = json.value[z];\n            dataJSON.switchable[position] = json.switchable[z];\n            dataJSON.switch_position[position] = json.switch_position[z];\n            counter++;\n          }\n        }\n        if (messageList !== \"\") {\n          messageList =\n            \" The following entries were skipped as they are not being present in current version:\" +\n            messageList;\n        }\n        message =\n          \"Import completed: \" +\n          json.id.length +\n          \" entries processed, \" +\n          counter +\n          \" recognized.\" +\n          messageList;\n        this.setState({\n          openImportWindow: false,\n          statusMessage: message,\n          isLoaded: true,\n        });\n      });\n  };\n\n  closeConfigShow = (closeOnEscape, closeOnDimmerClick) => () => {\n    this.setState({ closeOnEscape, closeOnDimmerClick, open: true });\n  };\n\n  confirm = () => this.setState({ confirm: true });\n  confirmClose = () => this.setState({ confirm: false });\n  open = () => this.setState({ open: true });\n  close = () => this.setState({ open: false });\n\n  handleContextRef = (contextRef) => this.setState({ contextRef });\n\n  handleOpen = () => this.setState({ active: true });\n  handleClose = () => this.setState({ active: false });\n\n  handleEditorClose = () => this.setState({ openEditor: false });\n  handleConfigPreview = () => this.setState({ open: true });\n  handleHideClick = () => this.setState({ visible: false });\n\n  resetComponent = () =>\n    this.setState({ isLoading: false, results: [], value: \"\" });\n\n  handleClick = (_e, titleProps) => {\n    const { index } = titleProps;\n    const { activeIndex } = this.state;\n    const newIndex = activeIndex === index ? -1 : index;\n    this.setState({ activeIndex: newIndex });\n    this.setState({ helpEntryId: 0 });\n  };\n\n  handleHelpButtonClick = (e) => {\n    this.setState({ helpEntryId: e.target.value });\n    this.setState({ helpTextIsVisible: true });\n  };\n\n  handleEntrySliderClick = (e) => {\n    const { dataJSON } = this.state;\n    dataJSON.is_enabled[e.target.value] = !dataJSON.is_enabled[e.target.value];\n  };\n\n  handleVersionDropdownClick = (_e, { value }) => {\n    this.version = value;\n    this.setState({ openReloadConfirmation: true });\n  };\n\n  readValueFromComponent = (_e, { entrynumber, value }) => {\n    const { dataJSON } = this.state;\n    dataJSON.value[entrynumber] = value;\n  };\n\n  readConfigurationToImport = (e) => {\n    this.configurationToImport = e.target.value;\n  };\n\n  handleMultilineEdit = (e) => {\n    const { dataJSON } = this.state;\n    dataJSON.value[this.multilineEntryId] = e.target.value;\n  };\n\n  displayMultilineEditor = (_e, { value }) => {\n    this.multilineEntryId = value;\n    this.setState((props) => ({ openEditor: !props.openEditor }));\n  };\n\n  handleImportWindow = () => {\n    this.setState({ openImportWindow: !this.state.openImportWindow });\n  };\n\n  closeReloadConfirmationWindow = () =>\n    this.setState({ openReloadConfirmation: false });\n\n  focusOnComponent = (_e, { entrynumber }) => {\n    var component = this.componentRef[entrynumber];\n    component.current.focus();\n  };\n\n  focusTextInput = (_props, { result }) => {\n    const { dataJSON } = this.state;\n    var recordNumber = result.record;\n    var component = \"\";\n    this.setState(() => ({\n      activeIndex: dataJSON.section_number[recordNumber],\n    }));\n    this.setState(() => ({ activeRowIndex: recordNumber }));\n    if (dataJSON.switchable[recordNumber] !== 1) {\n      component = this.componentRef[recordNumber];\n      component.current.focus();\n    }\n  };\n\n  warningIconPopup(color, content) {\n    var warningMessageIcon = (\n      <Popup\n        trigger={<Icon color={color} name=\"warning sign\" />}\n        content={content}\n      />\n    );\n    return warningMessageIcon;\n  }\n\n  handleSearchChange = (_e, { value }) => {\n    function searchIterateOverArray() {\n      var i = 1;\n      return (i = i + 1);\n    }\n    const { dataJSON } = this.state;\n    const source = _.times(\n      dataJSON.tags.length,\n      (i = searchIterateOverArray) => ({\n        title: this.state.dataJSON.tags[i],\n        record: i,\n      })\n    );\n\n    this.setState({ isLoading: true, value });\n    setTimeout(() => {\n      if (this.state.value.length < 1) return this.resetComponent();\n      const re = new RegExp(_.escapeRegExp(this.state.value), \"i\");\n      const isMatch = (result) => re.test(result.title);\n      this.setState({\n        isLoading: false,\n        results: _.filter(source, isMatch),\n      });\n    }, 300);\n  };\n\n  render() {\n    const {\n      activeIndex: activeAccordeonIndex,\n      activeRowIndex,\n      active,\n      openEditor: openMultilineEntryEditor,\n      open: openConfigPreview,\n      openImportWindow,\n      closeOnEscape,\n      dataJSON,\n      isLoaded,\n      error,\n      contextRef,\n      isLoading,\n      value,\n      results,\n      statusMessage,\n      openReloadConfirmation,\n    } = this.state;\n    const handleClick = this.handleClick;\n    const handleShowHelpClick = this.handleHelpButtonClick;\n    const handleEntrySliderClick = this.handleEntrySliderClick;\n    const readValueFromComponent = this.readValueFromComponent;\n    const displayMultilineEditor = this.displayMultilineEditor;\n    const warningIconPopup = this.warningIconPopup;\n    const componentRef = this.componentRef;\n    const focusOnComponent = this.focusOnComponent;\n\n    const blackColor = \"black\";\n    const greyColor = \"grey\";\n    const primaryAccentColor = \"purple\";\n    const pinkColor = \"pink\";\n\n    const searchResultsRenderer = ({ title, record }) => {\n      return (\n        <Header\n          key={record}\n          size=\"tiny\"\n          content={title}\n          subheader={dataJSON.all_sections[\n            dataJSON.section_number[record]\n          ].toLowerCase()}\n        />\n      );\n    };\n\n    const searchFieldRenderer = () => {\n      return (\n        <Search\n          placeholder=\"Search tags\"\n          minCharacters={3}\n          loading={isLoading}\n          onResultSelect={this.focusTextInput}\n          onSearchChange={this.handleSearchChange}\n          resultRenderer={searchResultsRenderer}\n          results={results}\n          value={value}\n          {...this.props}\n        />\n      );\n    };\n\n    const modalWindowRenderer = (onOpen, icon, headercontent, modalcontent) => {\n      return (\n        <Modal\n          dimmer=\"inverted\"\n          open={onOpen}\n          closeOnEscape={closeOnEscape}\n          onClose={this.close}\n        >\n          <Header icon={icon} content={headercontent} />\n          <Modal.Content scrolling>\n            <Form>{modalcontent}</Form>\n          </Modal.Content>\n        </Modal>\n      );\n    };\n\n    const statusMessageBox = () => {\n      return (\n        <Message>\n          <p>\n            Loaded configuration for Squid ver.{\" \"}\n            <b>{dataJSON.squid_version[0]}</b>\n          </p>\n          <p>\n            <b>{dataJSON.tags.length}</b> unique tags in{\" \"}\n            <b>{dataJSON.all_sections.length}</b> sections\n          </p>\n          <p>{statusMessage}</p>\n        </Message>\n      );\n    };\n\n    function versionDropdownOptions() {\n      var options = [];\n      for (var i = 0; i < dataJSON.available_versions.length; i++) {\n        options.push({\n          key: i,\n          text: dataJSON.available_versions[i],\n          value: dataJSON.available_versions[i],\n        });\n      }\n      return options;\n    }\n\n    function createSections() {\n      var AccordionContent = [];\n      var n = 0;\n      var tagEntryKey = 0;\n      var helpKey = 1000;\n      var warningBuiltWithHover = \"\";\n      var warningMessageHover = \"\";\n      var tagComponentUnitLabel = \"\";\n      var AccordeonIconColors = [];\n\n      for (var i = 0; i < dataJSON.all_sections.length; i++) {\n        var SectionContentsPopup = [];\n        var TableContentInSection = [];\n\n        SectionContentsPopup[i] = \"\";\n\n        while (dataJSON.section_number[n] === i) {\n          if (dataJSON.is_enabled[n] > 0) {\n            AccordeonIconColors[i] = primaryAccentColor;\n          }\n\n          var tagRepresentationComponent = \"\";\n          SectionContentsPopup[i] += dataJSON.tags[n] + \"\\n\";\n\n          componentRef[n] = React.createRef();\n\n          if (!dataJSON.switchable[n]) {\n            if (dataJSON.units[n]) {\n              tagComponentUnitLabel = (\n                <Label basic content={dataJSON.units[n]} horizontal />\n              );\n            } else {\n              tagComponentUnitLabel = \"\";\n            }\n            // Regular tag\n            tagRepresentationComponent = (\n              <Form.Field>\n                <Input\n                  fluid\n                  ref={componentRef[n]}\n                  entrynumber={tagEntryKey}\n                  defaultValue={dataJSON.value[n] + \" \"}\n                  onChange={readValueFromComponent}\n                  labelPosition=\"right\"\n                  type=\"text\"\n                  action\n                >\n                  <input />\n                  {tagComponentUnitLabel}\n                  <Button\n                    basic\n                    type=\"reset\"\n                    entrynumber={tagEntryKey}\n                    onClick={focusOnComponent}\n                  >\n                    Reset\n                  </Button>\n                </Input>\n              </Form.Field>\n            );\n            // Tag with on/off selection\n          } else if (dataJSON.switchable[n] === 1) {\n            var options = [\n              {\n                key: \"off\",\n                text: dataJSON.tags[n] + \" off\",\n                value: dataJSON.tags[n] + \" off\",\n              },\n              {\n                key: \"on\",\n                text: dataJSON.tags[n] + \" on\",\n                value: dataJSON.tags[n] + \" on\",\n              },\n            ];\n\n            tagRepresentationComponent = (\n              <Dropdown\n                ref={componentRef[n]}\n                entrynumber={tagEntryKey}\n                fluid\n                selection\n                options={options}\n                defaultValue={options[dataJSON.switch_position[n]].value}\n                onChange={readValueFromComponent}\n              />\n            );\n          } else if (dataJSON.switchable[n] === 2) {\n            tagRepresentationComponent = (\n              <Button\n                ref={componentRef[n]}\n                secondary\n                compact\n                value={n}\n                onClick={displayMultilineEditor}\n              >\n                {dataJSON.tags[n]} - Click to edit\n              </Button>\n            );\n          }\n\n          if (dataJSON.message_built[n]) {\n            warningBuiltWithHover = warningIconPopup(\n              primaryAccentColor,\n              \"Only available if Squid is compiled with the \" +\n                dataJSON.message_built[n]\n            );\n          } else {\n            warningBuiltWithHover = \"\";\n          }\n\n          if (dataJSON.message_warning[n]) {\n            warningMessageHover = warningIconPopup(\n              pinkColor,\n              dataJSON.message_warning[n]\n            );\n          } else {\n            warningMessageHover = \"\";\n          }\n\n          var defaultRecordChecked = false;\n          if (dataJSON.is_enabled[n] > 0) {\n            defaultRecordChecked = true;\n          }\n          TableContentInSection[n] = (\n            <Table.Row key={\"tableKey\" + n} active={activeRowIndex === n}>\n              <Table.Cell width={1}>\n                <Checkbox\n                  value={tagEntryKey}\n                  id={\"checkboxEntry\" + tagEntryKey++}\n                  defaultChecked={defaultRecordChecked}\n                  slider\n                  onClick={handleEntrySliderClick}\n                />\n              </Table.Cell>\n              <Table.Cell>\n                <Form>{tagRepresentationComponent}</Form>\n              </Table.Cell>\n              <Table.Cell width={2}>\n                {warningBuiltWithHover}\n                {warningMessageHover}\n              </Table.Cell>\n              <Table.Cell width={1} allign=\"left\">\n                <Button\n                  value={helpKey++}\n                  compact\n                  basic\n                  color={greyColor}\n                  active={active}\n                  onClick={handleShowHelpClick}\n                >\n                  Help\n                </Button>\n              </Table.Cell>\n            </Table.Row>\n          );\n          n++;\n        }\n\n        AccordionContent[i] = (\n          <Container key={\"containerKey\" + i}>\n            <Accordion.Title\n              active={activeAccordeonIndex === i}\n              index={i}\n              onClick={handleClick}\n            >\n              <Popup\n                trigger={<Icon name=\"dropdown\" />}\n                size=\"tiny\"\n                position=\"left center\"\n                header=\"Tags in this section:\"\n                content={\n                  <Grid centered columns={1}>\n                    <Grid.Column textAlign=\"left\">\n                      <pre>{SectionContentsPopup[i]}</pre>\n                    </Grid.Column>\n                  </Grid>\n                }\n              />\n              <Icon name=\"tags\" color={AccordeonIconColors[i]} />\n              &nbsp;\n              {dataJSON.all_sections[i]}\n            </Accordion.Title>\n            <Accordion.Content active={activeAccordeonIndex === i}>\n              <Table striped compact basic=\"very\">\n                <Table.Body>{TableContentInSection}</Table.Body>\n              </Table>\n            </Accordion.Content>\n          </Container>\n        );\n      }\n      return AccordionContent;\n    }\n\n    function generateSquidConfiguration() {\n      var generatedSquidConfiguration = \"\";\n      for (var i = 0; i < dataJSON.section_number.length; i++) {\n        if (dataJSON.is_enabled[i])\n          generatedSquidConfiguration =\n            generatedSquidConfiguration + \"\\n\" + dataJSON.value[i];\n      }\n      return generatedSquidConfiguration;\n    }\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return (\n        <React.Fragment>\n          <Dimmer inverted active={!isLoaded}>\n            <Loader inverted size=\"massive\">\n              Loading\n            </Loader>\n          </Dimmer>\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <Segment>\n            <Menu fixed=\"top\" inverted fitted=\"vertically\" color={blackColor}>\n              <Container>\n                <Menu.Item as=\"a\" header onClick={this.handleOpen}>\n                  <Header as=\"h3\" inverted>\n                    <Icon\n                      inverted\n                      name=\"circle outline\"\n                      color={primaryAccentColor}\n                      size=\"big\"\n                    />\n                    <Header.Content>\n                      Sucker\n                      <Header.Subheader>\n                        Squid configuration editor\n                      </Header.Subheader>\n                    </Header.Content>\n                  </Header>\n                </Menu.Item>\n                <Menu.Item as=\"a\">{searchFieldRenderer()}</Menu.Item>\n                <Menu.Item>\n                  <Header as=\"h5\" inverted>\n                    Squid version{\" \"}\n                    <Dropdown\n                      options={versionDropdownOptions()}\n                      inline\n                      defaultValue={dataJSON.squid_version[0]}\n                      onChange={this.handleVersionDropdownClick}\n                    />\n                  </Header>\n                </Menu.Item>\n                <Menu.Item as=\"a\" onClick={this.handleConfigPreview}>\n                  <Header as=\"h5\" inverted>\n                    <Icon inverted name=\"magic\" size=\"large\" />\n                    Show\n                  </Header>\n                </Menu.Item>\n                <Menu.Item as=\"a\" onClick={this.handleImportWindow}>\n                  <Header as=\"h5\" inverted>\n                    <Icon inverted name=\"download\" size=\"large\" />\n                    Import\n                  </Header>\n                </Menu.Item>\n              </Container>\n            </Menu>\n          </Segment>\n          <Divider />\n          <Grid centered columns={3}>\n            <Grid.Column widescreen={5} computer={2}>\n              {statusMessageBox()}\n            </Grid.Column>\n            <Grid.Column widescreen={6} computer={7}>\n              <div ref={this.handleContextRef}>\n                <Container>\n                  <Accordion styled fluid>\n                    {createSections()}\n                  </Accordion>\n                </Container>\n              </div>\n            </Grid.Column>\n            <Grid.Column widescreen={5} computer={7}>\n              <Sticky context={contextRef} offset={75}>\n                <Segment basic size=\"small\">\n                  <Header\n                    content={dataJSON.tags[this.state.helpEntryId - 1000]}\n                  />\n                  <pre>{dataJSON.help[this.state.helpEntryId - 1000]}</pre>\n                </Segment>\n              </Sticky>\n            </Grid.Column>\n          </Grid>\n          {modalWindowRenderer(\n            openConfigPreview,\n            \"copy\",\n            \"New configuration\",\n            <React.Fragment>\n              <Form.Field>\n                <p>\n                  <b>To use:</b> copy configuration from the text area below and\n                  save it as squid.conf in the location of the original\n                  configuration file. By default, this file is located at{\" \"}\n                  <b>/etc/squid/squid.conf</b> or{\" \"}\n                  <b>/usr/local/squid/etc/squid.conf</b>.\n                </p>\n                <TextArea autoHeight value={generateSquidConfiguration()} />\n              </Form.Field>\n              <Button negative size=\"large\" onClick={this.close}>\n                close\n              </Button>\n            </React.Fragment>\n          )}\n          {modalWindowRenderer(\n            openMultilineEntryEditor,\n            \"edit\",\n            dataJSON.tags[this.multilineEntryId],\n            <React.Fragment>\n              <Form.Field>\n                <TextArea\n                  autoHeight\n                  defaultValue={dataJSON.value[this.multilineEntryId]}\n                  onChange={this.handleMultilineEdit}\n                />\n              </Form.Field>\n              <Button type=\"reset\" secondary>\n                Revert to default\n              </Button>\n              <Button secondary onClick={this.displayMultilineEditor}>\n                Save and close\n              </Button>\n            </React.Fragment>\n          )}\n          {modalWindowRenderer(\n            openImportWindow,\n            \"paste\",\n            \"Import existing configuration\",\n            <React.Fragment>\n              <p>\n                <b>To import:</b> copy and paste contents of <b>squid.conf</b>{\" \"}\n                into the window below. By default, this file is located at{\" \"}\n                <b>/etc/squid/squid.conf</b> or{\" \"}\n                <b>/usr/local/squid/etc/squid.conf</b>.\n              </p>\n              <p>\n                <b>Please note:</b> lines that begin with '#' (i.e. commented\n                out) are not going to be processed.\n              </p>\n              <Form.TextArea\n                control=\"textarea\"\n                onChange={this.readConfigurationToImport}\n              />\n              <Button secondary onClick={this.handleImportWindow}>\n                Close\n              </Button>\n              <Button\n                secondary\n                type=\"submit\"\n                method=\"post\"\n                onClick={this.importConfiguration}\n              >\n                Import\n              </Button>\n            </React.Fragment>\n          )}\n          <Dimmer\n            inverted\n            active={active}\n            onClickOutside={this.handleClose}\n            page\n          >\n            <Header as=\"h1\" icon color={primaryAccentColor}>\n              <Icon name=\"circle outline\" color={primaryAccentColor} />\n              Sucker\n              <Header.Subheader>{suckerVersionString}</Header.Subheader>\n            </Header>\n            <Header color={greyColor}>\n              <p>\n                configuration editor for{\" \"}\n                <a href=\"http://www.squid-cache.org/\">Squid</a> caching proxy\n              </p>\n              <p>\n                <Icon name=\"github\" />\n                Github:{\" \"}\n                <a href=\"https://github.com/itworks99/sucker\">\n                  itworks99/sucker\n                </a>\n              </p>\n              <p>Built with Bottle, Gunicorn, Python, React and Semantic-UI</p>\n              <p>\n                Created in Sydney with <Icon color=\"pink\" name=\"heart\" />\n              </p>\n            </Header>\n          </Dimmer>\n          {modalWindowRenderer(\n            openReloadConfirmation,\n            \"question\",\n            \"Confirm reload of the Squid base configuration file\",\n            <React.Fragment>\n              <p>\n                This action will reload base configuration file with the version\n                requested. Plese note that any unsaved changes are going to be\n                lost. Do you want to proceed?\n              </p>\n              <Button negative onClick={this.closeReloadConfirmationWindow}>\n                no\n              </Button>\n              <Button positive onClick={this.callLoadConfigurationFile}>\n                yes\n              </Button>\n            </React.Fragment>\n          )}\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Sucker;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport Sucker from './sucker.jsx';\nimport * as serviceWorker from './serviceWorker.js';\n\nReactDOM.render( < Sucker / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}