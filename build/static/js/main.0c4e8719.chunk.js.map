{"version":3,"sources":["sucker.jsx","serviceWorker.js","index.js"],"names":["Sucker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","callLoadConfigurationFile","httpRequestMethod","loadConfigurationFile","importConfiguration","dataJSON","fetch","method","body","configurationToImport","headers","Access-Control-Allow-Origin","Access-Control-Allow-Methods","Access-Control-Allow-Headers","then","setState","isLoaded","response","json","importedDataJSON","importCompleted","message","messageList","counter","z","id","length","is_enabled","position","tags","value","switchable","switch_position","openImportWindow","statusMessage","closeConfigShow","closeOnEscape","closeOnDimmerClick","open","confirm","confirmClose","close","handleContextRef","contextRef","handleOpen","active","handleClose","handleEditorClose","openEditor","handleConfigPreview","handleHideClick","visible","resetComponent","isLoading","results","handleClick","_e","titleProps","index","newIndex","activeIndex","helpEntryId","handleHelpButtonClick","e","target","helpTextIsVisible","handleEntrySliderClick","handleVersionDropdownClick","_ref","version","openReloadConfirmation","readValueFromComponent","_ref2","entrynumber","readConfigurationToImport","handleMultilineEdit","multilineEntryId","displayMultilineEditor","_ref3","handleImportWindow","closeReloadConfirmationWindow","focusOnComponent","_ref4","componentRef","current","focus","focusTextInput","_props","_ref5","result","recordNumber","record","section_number","activeRowIndex","handleSearchChange","_ref6","searchIterateOverArray","i","source","_","times","arguments","undefined","title","setTimeout","re","RegExp","escapeRegExp","filter","test","bind","assertThisInitialized","AccordeonIconColors","_this2","error","Accept","Content-Type","JSON","stringify","color","content","react_default","a","createElement","Popup","trigger","Icon","name","_this3","_this$state","activeAccordeonIndex","openMultilineEntryEditor","openConfigPreview","handleShowHelpClick","warningIconPopup","greyColor","primaryAccentColor","pinkColor","searchResultsRenderer","_ref7","Header","key","size","subheader","all_sections","toLowerCase","modalWindowRenderer","onOpen","icon","headercontent","modalcontent","Modal","dimmer","onClose","Content","scrolling","Form","Fragment","Segment","Menu","fixed","inverted","fitted","Container","Item","as","header","onClick","Subheader","Search","assign","placeholder","minCharacters","loading","onResultSelect","onSearchChange","resultRenderer","Dropdown","options","available_versions","push","text","versionDropdownOptions","inline","defaultValue","squid_version","onChange","Divider","Grid","centered","columns","Column","widescreen","computer","Message","ref","Accordion","styled","fluid","AccordionContent","n","tagEntryKey","helpKey","warningBuiltWithHover","warningMessageHover","tagComponentUnitLabel","SectionContentsPopup","TableContentInSection","tagRepresentationComponent","React","createRef","selection","Button","secondary","compact","units","Label","basic","horizontal","Field","Input","labelPosition","type","action","message_built","message_warning","defaultRecordChecked","Table","Row","Cell","width","Checkbox","defaultChecked","slider","allign","Title","textAlign","striped","Body","createSections","Sticky","context","offset","help","TextArea","autoHeight","generatedSquidConfiguration","generateSquidConfiguration","negative","control","Dimmer","onClickOutside","page","href","positive","Loader","Component","Boolean","window","location","hostname","match","ReactDOM","render","sucker","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c4e8719.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport React from \"react\";\nimport {\n  Accordion,\n  Button,\n  Checkbox,\n  Container,\n  Dimmer,\n  Divider,\n  Dropdown,\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Input,\n  Label,\n  Loader,\n  Menu,\n  Message,\n  Modal,\n  Popup,\n  Search,\n  Segment,\n  Sticky,\n  Table,\n  TextArea\n} from \"semantic-ui-react\";\n\nconst suckerVersionString = \"ver.0.2a\";\n\nclass Sucker extends React.Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n    this.state = { activeIndex: 0 };\n    this.state = { activeRowIndex: 0 };\n    this.state = { visible: false };\n    this.state = { helpEntryId: 0 };\n    this.state = { confirm: false };\n    this.state = { openEditor: false };\n    this.state = { openImportWindow: false };\n    this.state = { dataJSON: \"\" };\n    this.state = { isLoaded: false };\n    this.state = { configurationToImport: \"\" };\n    this.state = { statusMessage: \"\" };\n    this.state = { version: \"\" };\n    this.state = { openReloadConfirmation: false };\n    this.state = { httpRequestMethod: \"\" };\n    this.state = { closeOnEscape: false };\n    this.state = { closeOnDimmerClick: false };\n\n    this.componentRef = [];\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleConfigPreview = this.handleConfigPreview.bind(this);\n    this.handleMultilineEdit = this.handleMultilineEdit.bind(this);\n    this.handleHelpButtonClick = this.handleHelpButtonClick.bind(this);\n    this.handleEntrySliderClick = this.handleEntrySliderClick.bind(this);\n    this.readValueFromComponent = this.readValueFromComponent.bind(this);\n    this.displayMultilineEditor = this.displayMultilineEditor.bind(this);\n    this.handleImportWindow = this.handleImportWindow.bind(this);\n    this.readConfigurationToImport = this.readConfigurationToImport.bind(this);\n    this.importConfiguration = this.importConfiguration.bind(this);\n    this.focusOnComponent = this.focusOnComponent.bind(this);\n    this.AccordeonIconColors = {};\n    this.loadConfigurationFile = this.loadConfigurationFile.bind(this);\n    this.callLoadConfigurationFile = this.callLoadConfigurationFile.bind(this);\n  }\n\n  componentDidMount() {\n    this.httpRequestMethod = \"GET\";\n    this.loadConfigurationFile();\n  }\n\n  callLoadConfigurationFile = () => {\n    this.httpRequestMethod = \"OPTIONS\";\n    this.loadConfigurationFile();\n  };\n\n  loadConfigurationFile() {\n    this.setState({ isLoaded: false });\n    if (this.httpRequestMethod === \"GET\") {\n      fetch(\"http://localhost:3000/json\", {\n        method: this.httpRequestMethod\n      })\n        .then(response => response.json())\n        .then(\n          json => {\n            this.setState({\n              dataJSON: json,\n              isLoaded: true\n            });\n          },\n          error => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        );\n    } else {\n      fetch(\"http://localhost:3000/version\", {\n        method: this.httpRequestMethod,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\":\n            \"GET, POST, OPTIONS, PUT, PATCH, DELETE\",\n          \"Access-Control-Allow-Headers\":\n            \"X-Requested-With, Content-Type, Accept, access-control-allow-headers\"\n        },\n        body: JSON.stringify({\n          version: this.version\n        })\n      })\n        .then(response => response.json())\n        .then(\n          json => {\n            this.setState({\n              dataJSON: json,\n              isLoaded: true\n            });\n          },\n          error => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        );\n      this.setState({ openReloadConfirmation: false });\n    }\n    return;\n  }\n\n  importConfiguration = () => {\n    const { dataJSON } = this.state;\n    fetch(\"http://localhost:3000/import\", {\n      method: \"POST\",\n      body: this.configurationToImport,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n        \"Access-Control-Allow-Methods\":\n          \"GET, POST, OPTIONS, PUT, PATCH, DELETE\",\n        \"Access-Control-Allow-Headers\": \"X-Requested-With, Content-Type, Accept\"\n      }\n    })\n      .then(this.setState({ isLoaded: false }))\n      .then(response => response.json())\n      .then(json => {\n        this.setState({\n          importedDataJSON: json,\n          importCompleted: true\n        });\n        var message = \"\";\n        var messageList = \"\";\n        var counter = 0;\n        for (var z = 0; z < json.id.length; z++) {\n          dataJSON.is_enabled[z] = 0;\n        }\n        for (z = 0; z < json.id.length; z++) {\n          var position = json.id[z];\n          if (json.id[z] === 999) {\n            messageList = messageList + \" \" + json.tags[z] + \";\";\n          } else {\n            dataJSON.is_enabled[position] = 1;\n            dataJSON.value[position] = json.value[z];\n            dataJSON.switchable[position] = json.switchable[z];\n            dataJSON.switch_position[position] = json.switch_position[z];\n            counter++;\n          }\n        }\n        if (messageList !== \"\") {\n          messageList =\n            \" The following entries were skipped as they are not being present in current version:\" +\n            messageList;\n        }\n        message =\n          \"Import completed: \" +\n          json.id.length +\n          \" entries processed, \" +\n          counter +\n          \" recognized.\" +\n          messageList;\n        this.setState({\n          openImportWindow: false,\n          statusMessage: message,\n          isLoaded: true\n        });\n      });\n  };\n\n  closeConfigShow = (closeOnEscape, closeOnDimmerClick) => () => {\n    this.setState({ closeOnEscape, closeOnDimmerClick, open: true });\n  };\n\n  confirm = () => this.setState({ confirm: true });\n  confirmClose = () => this.setState({ confirm: false });\n  open = () => this.setState({ open: true });\n  close = () => this.setState({ open: false });\n\n  handleContextRef = contextRef => this.setState({ contextRef });\n\n  handleOpen = () => this.setState({ active: true });\n  handleClose = () => this.setState({ active: false });\n\n  handleEditorClose = () => this.setState({ openEditor: false });\n  handleConfigPreview = () => this.setState({ open: true });\n  handleHideClick = () => this.setState({ visible: false });\n\n  resetComponent = () =>\n    this.setState({ isLoading: false, results: [], value: \"\" });\n\n  handleClick = (_e, titleProps) => {\n    const { index } = titleProps;\n    const { activeIndex } = this.state;\n    const newIndex = activeIndex === index ? -1 : index;\n    this.setState({ activeIndex: newIndex });\n    this.setState({ helpEntryId: 0 });\n  };\n\n  handleHelpButtonClick = e => {\n    this.setState({ helpEntryId: e.target.value });\n    this.setState({ helpTextIsVisible: true });\n  };\n\n  handleEntrySliderClick = e => {\n    const { dataJSON } = this.state;\n    dataJSON.is_enabled[e.target.value] = !dataJSON.is_enabled[e.target.value];\n  };\n\n  handleVersionDropdownClick = (_e, { value }) => {\n    this.version = value;\n    this.setState({ openReloadConfirmation: true });\n  };\n\n  readValueFromComponent = (_e, { entrynumber, value }) => {\n    const { dataJSON } = this.state;\n    dataJSON.value[entrynumber] = value;\n  };\n\n  readConfigurationToImport = e => {\n    this.configurationToImport = e.target.value;\n  };\n\n  handleMultilineEdit = e => {\n    const { dataJSON } = this.state;\n    dataJSON.value[this.multilineEntryId] = e.target.value;\n  };\n\n  displayMultilineEditor = (_e, { value }) => {\n    this.multilineEntryId = value;\n    this.setState(props => ({ openEditor: !props.openEditor }));\n  };\n\n  handleImportWindow = () => {\n    this.setState({ openImportWindow: !this.state.openImportWindow });\n  };\n\n  closeReloadConfirmationWindow = () =>\n    this.setState({ openReloadConfirmation: false });\n\n  focusOnComponent = (_e, { entrynumber }) => {\n    var component = this.componentRef[entrynumber];\n    component.current.focus();\n  };\n\n  focusTextInput = (_props, { result }) => {\n    const { dataJSON } = this.state;\n    var recordNumber = result.record;\n    var component = \"\";\n    this.setState(() => ({\n      activeIndex: dataJSON.section_number[recordNumber]\n    }));\n    this.setState(() => ({ activeRowIndex: recordNumber }));\n    if (dataJSON.switchable[recordNumber] !== 1) {\n      component = this.componentRef[recordNumber];\n      component.current.focus();\n    }\n  };\n\n  warningIconPopup(color, content) {\n    var warningMessageIcon = (\n      <Popup\n        trigger={<Icon color={color} name=\"warning sign\" />}\n        content={content}\n      />\n    );\n    return warningMessageIcon;\n  }\n\n  handleSearchChange = (_e, { value }) => {\n    function searchIterateOverArray() {\n      var i = 1;\n      return (i = i + 1);\n    }\n    const { dataJSON } = this.state;\n    const source = _.times(\n      dataJSON.tags.length,\n      (i = searchIterateOverArray) => ({\n        title: this.state.dataJSON.tags[i],\n        record: i\n      })\n    );\n\n    this.setState({ isLoading: true, value });\n    setTimeout(() => {\n      if (this.state.value.length < 1) return this.resetComponent();\n      const re = new RegExp(_.escapeRegExp(this.state.value), \"i\");\n      const isMatch = result => re.test(result.title);\n      this.setState({\n        isLoading: false,\n        results: _.filter(source, isMatch)\n      });\n    }, 300);\n  };\n\n  render() {\n    const {\n      activeIndex: activeAccordeonIndex,\n      activeRowIndex,\n      active,\n      openEditor: openMultilineEntryEditor,\n      open: openConfigPreview,\n      openImportWindow,\n      closeOnEscape,\n      dataJSON,\n      isLoaded,\n      error,\n      contextRef,\n      isLoading,\n      value,\n      results,\n      statusMessage,\n      openReloadConfirmation\n    } = this.state;\n    const handleClick = this.handleClick;\n    const handleShowHelpClick = this.handleHelpButtonClick;\n    const handleEntrySliderClick = this.handleEntrySliderClick;\n    const readValueFromComponent = this.readValueFromComponent;\n    const displayMultilineEditor = this.displayMultilineEditor;\n    const warningIconPopup = this.warningIconPopup;\n    const componentRef = this.componentRef;\n    const focusOnComponent = this.focusOnComponent;\n\n    const blackColor = \"black\";\n    const greyColor = \"grey\";\n    const primaryAccentColor = \"purple\";\n    const pinkColor = \"pink\";\n\n    const searchResultsRenderer = ({ title, record }) => {\n      return (\n        <Header\n          key={record}\n          size=\"tiny\"\n          content={title}\n          subheader={dataJSON.all_sections[\n            dataJSON.section_number[record]\n          ].toLowerCase()}\n        />\n      );\n    };\n\n    const searchFieldRenderer = () => {\n      return (\n        <Search\n          placeholder=\"Search tags\"\n          minCharacters={3}\n          loading={isLoading}\n          onResultSelect={this.focusTextInput}\n          onSearchChange={this.handleSearchChange}\n          resultRenderer={searchResultsRenderer}\n          results={results}\n          value={value}\n          {...this.props}\n        />\n      );\n    };\n\n    const modalWindowRenderer = (onOpen, icon, headercontent, modalcontent) => {\n      return (\n        <Modal\n          dimmer=\"inverted\"\n          open={onOpen}\n          closeOnEscape={closeOnEscape}\n          onClose={this.close}\n        >\n          <Header icon={icon} content={headercontent} />\n          <Modal.Content scrolling>\n            <Form>{modalcontent}</Form>\n          </Modal.Content>\n        </Modal>\n      );\n    };\n\n    const statusMessageBox = () => {\n      return (\n        <Message>\n          <p>\n            Loaded configuration for Squid ver.{\" \"}\n            <b>{dataJSON.squid_version[0]}</b>\n          </p>\n          <p>\n            <b>{dataJSON.tags.length}</b> unique tags in{\" \"}\n            <b>{dataJSON.all_sections.length}</b> sections\n          </p>\n          <p>{statusMessage}</p>\n        </Message>\n      );\n    };\n\n    function versionDropdownOptions() {\n      var options = [];\n      for (var i = 0; i < dataJSON.available_versions.length; i++) {\n        options.push({\n          key: i,\n          text: dataJSON.available_versions[i],\n          value: dataJSON.available_versions[i]\n        });\n      }\n      return options;\n    }\n\n    function createSections() {\n      var AccordionContent = [];\n      var n = 0;\n      var tagEntryKey = 0;\n      var helpKey = 1000;\n      var warningBuiltWithHover = \"\";\n      var warningMessageHover = \"\";\n      var tagComponentUnitLabel = \"\";\n      var AccordeonIconColors = [];\n\n      for (var i = 0; i < dataJSON.all_sections.length; i++) {\n        var SectionContentsPopup = [];\n        var TableContentInSection = [];\n\n        SectionContentsPopup[i] = \"\";\n\n        while (dataJSON.section_number[n] === i) {\n          if (dataJSON.is_enabled[n] > 0) {\n            AccordeonIconColors[i] = primaryAccentColor;\n          }\n\n          var tagRepresentationComponent = \"\";\n          SectionContentsPopup[i] += dataJSON.tags[n] + \"\\n\";\n\n          componentRef[n] = React.createRef();\n\n          if (!dataJSON.switchable[n]) {\n            if (dataJSON.units[n]) {\n              tagComponentUnitLabel = (\n                <Label basic content={dataJSON.units[n]} horizontal />\n              );\n            } else {\n              tagComponentUnitLabel = \"\";\n            }\n            // Regular tag\n            tagRepresentationComponent = (\n              <Form.Field>\n                <Input\n                  fluid\n                  ref={componentRef[n]}\n                  entrynumber={tagEntryKey}\n                  defaultValue={dataJSON.value[n] + \" \"}\n                  onChange={readValueFromComponent}\n                  labelPosition=\"right\"\n                  type=\"text\"\n                  action\n                >\n                  <input />\n                  {tagComponentUnitLabel}\n                  <Button\n                    basic\n                    type=\"reset\"\n                    entrynumber={tagEntryKey}\n                    onClick={focusOnComponent}\n                  >\n                    Reset\n                  </Button>\n                </Input>\n              </Form.Field>\n            );\n            // Tag with on/off selection\n          } else if (dataJSON.switchable[n] === 1) {\n            var options = [\n              {\n                key: \"off\",\n                text: dataJSON.tags[n] + \" off\",\n                value: dataJSON.tags[n] + \" off\"\n              },\n              {\n                key: \"on\",\n                text: dataJSON.tags[n] + \" on\",\n                value: dataJSON.tags[n] + \" on\"\n              }\n            ];\n\n            tagRepresentationComponent = (\n              <Dropdown\n                ref={componentRef[n]}\n                entrynumber={tagEntryKey}\n                fluid\n                selection\n                options={options}\n                defaultValue={options[dataJSON.switch_position[n]].value}\n                onChange={readValueFromComponent}\n              />\n            );\n          } else if (dataJSON.switchable[n] === 2) {\n            tagRepresentationComponent = (\n              <Button\n                ref={componentRef[n]}\n                secondary\n                compact\n                value={n}\n                onClick={displayMultilineEditor}\n              >\n                {dataJSON.tags[n]} - Click to edit\n              </Button>\n            );\n          }\n\n          if (dataJSON.message_built[n]) {\n            warningBuiltWithHover = warningIconPopup(\n              primaryAccentColor,\n              \"Only available if Squid is compiled with the \" +\n                dataJSON.message_built[n]\n            );\n          } else {\n            warningBuiltWithHover = \"\";\n          }\n\n          if (dataJSON.message_warning[n]) {\n            warningMessageHover = warningIconPopup(\n              pinkColor,\n              dataJSON.message_warning[n]\n            );\n          } else {\n            warningMessageHover = \"\";\n          }\n\n          var defaultRecordChecked = false;\n          if (dataJSON.is_enabled[n] > 0) {\n            defaultRecordChecked = true;\n          }\n          TableContentInSection[n] = (\n            <Table.Row key={\"tableKey\" + n} active={activeRowIndex === n}>\n              <Table.Cell width={1}>\n                <Checkbox\n                  value={tagEntryKey}\n                  id={\"checkboxEntry\" + tagEntryKey++}\n                  defaultChecked={defaultRecordChecked}\n                  slider\n                  onClick={handleEntrySliderClick}\n                />\n              </Table.Cell>\n              <Table.Cell>\n                <Form>{tagRepresentationComponent}</Form>\n              </Table.Cell>\n              <Table.Cell width={2}>\n                {warningBuiltWithHover}\n                {warningMessageHover}\n              </Table.Cell>\n              <Table.Cell width={1} allign=\"left\">\n                <Button\n                  value={helpKey++}\n                  compact\n                  basic\n                  color={greyColor}\n                  active={active}\n                  onClick={handleShowHelpClick}\n                >\n                  Help\n                </Button>\n              </Table.Cell>\n            </Table.Row>\n          );\n          n++;\n        }\n\n        AccordionContent[i] = (\n          <Container key={\"containerKey\" + i}>\n            <Accordion.Title\n              active={activeAccordeonIndex === i}\n              index={i}\n              onClick={handleClick}\n            >\n              <Popup\n                trigger={<Icon name=\"dropdown\" />}\n                size=\"tiny\"\n                position=\"left center\"\n                header=\"Tags in this section:\"\n                content={\n                  <Grid centered columns={1}>\n                    <Grid.Column textAlign=\"left\">\n                      <pre>{SectionContentsPopup[i]}</pre>\n                    </Grid.Column>\n                  </Grid>\n                }\n              />\n              <Icon name=\"tags\" color={AccordeonIconColors[i]} />\n              &nbsp;\n              {dataJSON.all_sections[i]}\n            </Accordion.Title>\n            <Accordion.Content active={activeAccordeonIndex === i}>\n              <Table striped compact basic=\"very\">\n                <Table.Body>{TableContentInSection}</Table.Body>\n              </Table>\n            </Accordion.Content>\n          </Container>\n        );\n      }\n      return AccordionContent;\n    }\n\n    function generateSquidConfiguration() {\n      var generatedSquidConfiguration = \"\";\n      for (var i = 0; i < dataJSON.section_number.length; i++) {\n        if (dataJSON.is_enabled[i])\n          generatedSquidConfiguration =\n            generatedSquidConfiguration + \"\\n\" + dataJSON.value[i];\n      }\n      return generatedSquidConfiguration;\n    }\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return (\n        <React.Fragment>\n          <Dimmer inverted active={!isLoaded}>\n            <Loader inverted size=\"massive\">\n              Loading\n            </Loader>\n          </Dimmer>\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <Segment>\n            <Menu fixed=\"top\" inverted fitted=\"vertically\" color={blackColor}>\n              <Container>\n                <Menu.Item as=\"a\" header onClick={this.handleOpen}>\n                  <Header as=\"h3\" inverted>\n                    <Icon\n                      inverted\n                      name=\"circle outline\"\n                      color={primaryAccentColor}\n                      size=\"big\"\n                    />\n                    <Header.Content>\n                      Sucker\n                      <Header.Subheader>\n                        Squid configuration editor\n                      </Header.Subheader>\n                    </Header.Content>\n                  </Header>\n                </Menu.Item>\n                <Menu.Item as=\"a\">{searchFieldRenderer()}</Menu.Item>\n                <Menu.Item>\n                  <Header as=\"h5\" inverted>\n                    Squid version{\" \"}\n                    <Dropdown\n                      options={versionDropdownOptions()}\n                      inline\n                      defaultValue={dataJSON.squid_version[0]}\n                      onChange={this.handleVersionDropdownClick}\n                    />\n                  </Header>\n                </Menu.Item>\n                <Menu.Item as=\"a\" onClick={this.handleConfigPreview}>\n                  <Header as=\"h5\" inverted>\n                    <Icon inverted name=\"magic\" size=\"large\" />\n                    Show\n                  </Header>\n                </Menu.Item>\n                <Menu.Item as=\"a\" onClick={this.handleImportWindow}>\n                  <Header as=\"h5\" inverted>\n                    <Icon inverted name=\"download\" size=\"large\" />\n                    Import\n                  </Header>\n                </Menu.Item>\n              </Container>\n            </Menu>\n          </Segment>\n          <Divider />\n          <Grid centered columns={3}>\n            <Grid.Column widescreen={5} computer={2}>\n              {statusMessageBox()}\n            </Grid.Column>\n            <Grid.Column widescreen={6} computer={7}>\n              <div ref={this.handleContextRef}>\n                <Container>\n                  <Accordion styled fluid>\n                    {createSections()}\n                  </Accordion>\n                </Container>\n              </div>\n            </Grid.Column>\n            <Grid.Column widescreen={5} computer={7}>\n              <Sticky context={contextRef} offset={75}>\n                <Segment basic size=\"small\">\n                  <Header\n                    content={dataJSON.tags[this.state.helpEntryId - 1000]}\n                  />\n                  <pre>{dataJSON.help[this.state.helpEntryId - 1000]}</pre>\n                </Segment>\n              </Sticky>\n            </Grid.Column>\n          </Grid>\n          {modalWindowRenderer(\n            openConfigPreview,\n            \"copy\",\n            \"New configuration\",\n            <React.Fragment>\n              <Form.Field>\n                <p>\n                  <b>To use:</b> copy configuration from the text area below and\n                  save it as squid.conf in the location of the original\n                  configuration file. By default, this file is located at{\" \"}\n                  <b>/etc/squid/squid.conf</b> or{\" \"}\n                  <b>/usr/local/squid/etc/squid.conf</b>.\n                </p>\n                <TextArea autoHeight value={generateSquidConfiguration()} />\n              </Form.Field>\n              <Button negative size=\"large\" onClick={this.close}>\n                close\n              </Button>\n            </React.Fragment>\n          )}\n          {modalWindowRenderer(\n            openMultilineEntryEditor,\n            \"edit\",\n            dataJSON.tags[this.multilineEntryId],\n            <React.Fragment>\n              <Form.Field>\n                <TextArea\n                  autoHeight\n                  defaultValue={dataJSON.value[this.multilineEntryId]}\n                  onChange={this.handleMultilineEdit}\n                />\n              </Form.Field>\n              <Button type=\"reset\" secondary>\n                Revert to default\n              </Button>\n              <Button secondary onClick={this.displayMultilineEditor}>\n                Save and close\n              </Button>\n            </React.Fragment>\n          )}\n          {modalWindowRenderer(\n            openImportWindow,\n            \"paste\",\n            \"Import existing configuration\",\n            <React.Fragment>\n              <p>\n                <b>To import:</b> copy and paste contents of <b>squid.conf</b>{\" \"}\n                into the window below. By default, this file is located at{\" \"}\n                <b>/etc/squid/squid.conf</b> or{\" \"}\n                <b>/usr/local/squid/etc/squid.conf</b>.\n              </p>\n              <p>\n                <b>Please note:</b> lines that begin with '#' (i.e. commented\n                out) are not going to be processed.\n              </p>\n              <Form.TextArea\n                control=\"textarea\"\n                onChange={this.readConfigurationToImport}\n              />\n              <Button secondary onClick={this.handleImportWindow}>\n                Close\n              </Button>\n              <Button\n                secondary\n                type=\"submit\"\n                method=\"post\"\n                onClick={this.importConfiguration}\n              >\n                Import\n              </Button>\n            </React.Fragment>\n          )}\n          <Dimmer\n            inverted\n            active={active}\n            onClickOutside={this.handleClose}\n            page\n          >\n            <Header as=\"h1\" icon color={primaryAccentColor}>\n              <Icon name=\"circle outline\" color={primaryAccentColor} />\n              Sucker\n              <Header.Subheader>{suckerVersionString}</Header.Subheader>\n            </Header>\n            <Header color={greyColor}>\n              <p>\n                configuration editor for{\" \"}\n                <a href=\"http://www.squid-cache.org/\">Squid</a> caching proxy\n              </p>\n              <p>\n                <Icon name=\"github\" />\n                Github:{\" \"}\n                <a href=\"https://github.com/itworks99/sucker\">\n                  itworks99/sucker\n                </a>\n              </p>\n              <p>Built with Bottle, Gunicorn, Python, React and Semantic-UI</p>\n              <p>\n                Created in Sydney with <Icon color=\"pink\" name=\"heart\" />\n              </p>\n            </Header>\n          </Dimmer>\n          {modalWindowRenderer(\n            openReloadConfirmation,\n            \"question\",\n            \"Confirm reload of the Squid base configuration file\",\n            <React.Fragment>\n              <p>\n                This action will reload base configuration file with the version\n                requested. Plese note that any unsaved changes are going to be\n                lost. Do you want to proceed?\n              </p>\n              <Button negative onClick={this.closeReloadConfirmationWindow}>\n                no\n              </Button>\n              <Button positive onClick={this.callLoadConfigurationFile}>\n                yes\n              </Button>\n            </React.Fragment>\n          )}\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Sucker;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport Sucker from './sucker.jsx';\nimport * as serviceWorker from './serviceWorker.js';\n\nReactDOM.render( < Sucker / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}